;;; autoloads.in   -*- emacs-lisp -*-

(eval-when-compile
  (require 'cl))

(defvar generated-autoload-file)

(defun generate-autoloads ()
  (interactive)
  (require 'autoload)
  (setq generated-autoload-file (car command-line-args-left))
  (setq command-line-args-left (cdr command-line-args-left))
  (batch-update-autoloads))

;;; Load in customization dependencies:

(unless (fboundp 'package-provide)
  (defalias 'package-provide 'ignore))

(provide 'autoloads)

;;; Generated autoloads follow -- DO NOT EDIT

;;;### (autoloads (vassoc set-modified-alist modify-alist remove-alist
;;;;;;  set-alist del-alist put-alist) "lib/apel/alist" "lib/apel/alist.el"
;;;;;;  (20488 45462))
;;; Generated autoloads from lib/apel/alist.el

(autoload 'put-alist "lib/apel/alist" "\
Set cdr of an element (KEY . ...) in ALIST to VALUE and return ALIST.
If there is no such element, create a new pair (KEY . VALUE) and
return a new alist whose car is the new pair and cdr is ALIST.

\(fn KEY VALUE ALIST)" nil nil)

(autoload 'del-alist "lib/apel/alist" "\
Delete an element whose car equals KEY from ALIST.
Return the modified ALIST.

\(fn KEY ALIST)" nil nil)

(autoload 'set-alist "lib/apel/alist" "\
Set cdr of an element (KEY . ...) in the alist bound to SYMBOL to VALUE.

\(fn SYMBOL KEY VALUE)" nil nil)

(autoload 'remove-alist "lib/apel/alist" "\
Delete an element whose car equals KEY from the alist bound to SYMBOL.

\(fn SYMBOL KEY)" nil nil)

(autoload 'modify-alist "lib/apel/alist" "\
Store elements in the alist MODIFIER in the alist DEFAULT.
Return the modified alist.

\(fn MODIFIER DEFAULT)" nil nil)

(autoload 'set-modified-alist "lib/apel/alist" "\
Store elements in the alist MODIFIER in an alist bound to SYMBOL.
If SYMBOL is not bound, set it to nil at first.

\(fn SYMBOL MODIFIER)" nil nil)

(autoload 'vassoc "lib/apel/alist" "\
Search AVLIST for an element whose first element equals KEY.
AVLIST is a list of vectors.
See also `assoc'.

\(fn KEY AVLIST)" nil nil)

;;;***

;;;### (autoloads (setenv) "lib/apel/env" "lib/apel/env.el" (20488
;;;;;;  45462))
;;; Generated autoloads from lib/apel/env.el

(autoload 'setenv "lib/apel/env" "\
Set the value of the environment variable named VARIABLE to VALUE.
VARIABLE should be a string.  VALUE is optional; if not provided or is
`nil', the environment variable VARIABLE will be removed.  

Interactively, a prefix argument means to unset the variable.
Interactively, the current value (if any) of the variable
appears at the front of the history list when you type in the new value.

This function works by modifying `process-environment'.

\(fn VARIABLE &optional VALUE UNSET)" t nil)

;;;***

;;;### (autoloads (module-installed-p exec-installed-p file-installed-p
;;;;;;  get-latest-path add-latest-path add-path) "lib/apel/path-util"
;;;;;;  "lib/apel/path-util.el" (20488 45462))
;;; Generated autoloads from lib/apel/path-util.el

(autoload 'add-path "lib/apel/path-util" "\
Add PATH to `load-path' if it exists under `default-load-path'
directories and it does not exist in `load-path'.

You can use following PATH styles:
	load-path relative: \"PATH/\"
			(it is searched from `default-load-path')
	home directory relative: \"~/PATH/\" \"~USER/PATH/\"
	absolute path: \"/HOO/BAR/BAZ/\"

You can specify following OPTIONS:
	'all-paths	search from `load-path'
			instead of `default-load-path'
	'append		add PATH to the last of `load-path'

\(fn PATH &rest OPTIONS)" nil nil)

(autoload 'add-latest-path "lib/apel/path-util" "\
Add latest path matched by PATTERN to `load-path'
if it exists under `default-load-path' directories
and it does not exist in `load-path'.

If optional argument ALL-PATHS is specified, it is searched from all
of load-path instead of default-load-path.

\(fn PATTERN &optional ALL-PATHS)" nil nil)

(autoload 'get-latest-path "lib/apel/path-util" "\
Return latest directory in default-load-path
which is matched to regexp PATTERN.
If optional argument ALL-PATHS is specified,
it is searched from all of load-path instead of default-load-path.

\(fn PATTERN &optional ALL-PATHS)" nil nil)

(autoload 'file-installed-p "lib/apel/path-util" "\
Return absolute-path of FILE if FILE exists in PATHS.
If PATHS is omitted, `load-path' is used.

\(fn FILE &optional PATHS)" nil nil)

(defvar exec-suffix-list '("") "\
*List of suffixes for executable.")

(autoload 'exec-installed-p "lib/apel/path-util" "\
Return absolute-path of FILE if FILE exists in PATHS.
If PATHS is omitted, `exec-path' is used.
If suffixes is omitted, `exec-suffix-list' is used.

\(fn FILE &optional PATHS SUFFIXES)" nil nil)

(autoload 'module-installed-p "lib/apel/path-util" "\
Return t if module is provided or exists in PATHS.
If PATHS is omitted, `load-path' is used.

\(fn MODULE &optional PATHS)" nil nil)

;;;***

;;;### (autoloads (richtext-decode richtext-encode) "lib/apel/richtext"
;;;;;;  "lib/apel/richtext.el" (20488 45462))
;;; Generated autoloads from lib/apel/richtext.el

(autoload 'richtext-encode "lib/apel/richtext" "\


\(fn FROM TO)" nil nil)

(autoload 'richtext-decode "lib/apel/richtext" "\


\(fn FROM TO)" nil nil)

;;;***

;;;### (autoloads (gh-api-v3 gh-api-v2 gh-api) "lib/gh-el/gh-api"
;;;;;;  "lib/gh-el/gh-api.el" (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-api.el

(require 'eieio)

(eieio-defclass-autoload 'gh-api 'nil "lib/gh-el/gh-api" "Github API")

(eieio-defclass-autoload 'gh-api-v2 '(gh-api) "lib/gh-el/gh-api" nil)

(eieio-defclass-autoload 'gh-api-v3 '(gh-api) "lib/gh-el/gh-api" "Github API v3")

;;;***

;;;### (autoloads (gh-oauth-authenticator gh-password-authenticator
;;;;;;  gh-authenticator) "lib/gh-el/gh-auth" "lib/gh-el/gh-auth.el"
;;;;;;  (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-auth.el

(require 'eieio)

(eieio-defclass-autoload 'gh-authenticator 'nil "lib/gh-el/gh-auth" "Abstract authenticator")

(eieio-defclass-autoload 'gh-password-authenticator '(gh-authenticator) "lib/gh-el/gh-auth" "Password-based authenticator")

(eieio-defclass-autoload 'gh-oauth-authenticator '(gh-authenticator) "lib/gh-el/gh-auth" "Oauth-based authenticator")

;;;***

;;;### (autoloads nil "lib/gh-el/gh-cache" "lib/gh-el/gh-cache.el"
;;;;;;  (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-cache.el

(require 'eieio)

;;;***

;;;### (autoloads nil "lib/gh-el/gh-common" "lib/gh-el/gh-common.el"
;;;;;;  (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-common.el

(require 'eieio)

;;;***

;;;### (autoloads (gh-gist-gist gh-gist-gist-stub gh-gist-api) "lib/gh-el/gh-gist"
;;;;;;  "lib/gh-el/gh-gist.el" (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-gist.el

(require 'eieio)

(eieio-defclass-autoload 'gh-gist-api '(gh-api-v3) "lib/gh-el/gh-gist" "Gist API")

(eieio-defclass-autoload 'gh-gist-gist-stub '(gh-object) "lib/gh-el/gh-gist" "Class for user-created gist objects")

(eieio-defclass-autoload 'gh-gist-gist '(gh-gist-gist-stub) "lib/gh-el/gh-gist" "Gist object")

;;;***

;;;### (autoloads nil "lib/gh-el/gh-issues" "lib/gh-el/gh-issues.el"
;;;;;;  (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-issues.el

(require 'eieio)

;;;***

;;;### (autoloads (gh-oauth-api) "lib/gh-el/gh-oauth" "lib/gh-el/gh-oauth.el"
;;;;;;  (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-oauth.el

(require 'eieio)

(eieio-defclass-autoload 'gh-oauth-api '(gh-api-v3) "lib/gh-el/gh-oauth" "OAuth API")

;;;***

;;;### (autoloads (gh-orgs-org-stub gh-orgs-api) "lib/gh-el/gh-orgs"
;;;;;;  "lib/gh-el/gh-orgs.el" (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-orgs.el

(require 'eieio)

(eieio-defclass-autoload 'gh-orgs-api '(gh-api-v3) "lib/gh-el/gh-orgs" "Orgs API")

(eieio-defclass-autoload 'gh-orgs-org-stub '(gh-object) "lib/gh-el/gh-orgs" nil)

;;;***

;;;### (autoloads (gh-pulls-request gh-pulls-api) "lib/gh-el/gh-pulls"
;;;;;;  "lib/gh-el/gh-pulls.el" (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-pulls.el

(require 'eieio)

(eieio-defclass-autoload 'gh-pulls-api '(gh-api-v3) "lib/gh-el/gh-pulls" "Git pull requests API")

(eieio-defclass-autoload 'gh-pulls-request '(gh-pulls-request-stub) "lib/gh-el/gh-pulls" "Git pull requests API")

;;;***

;;;### (autoloads (gh-repos-repo gh-repos-repo-stub gh-repos-api)
;;;;;;  "lib/gh-el/gh-repos" "lib/gh-el/gh-repos.el" (20488 45469))
;;; Generated autoloads from lib/gh-el/gh-repos.el

(require 'eieio)

(eieio-defclass-autoload 'gh-repos-api '(gh-api-v3) "lib/gh-el/gh-repos" "Repos API")

(eieio-defclass-autoload 'gh-repos-repo-stub '(gh-object) "lib/gh-el/gh-repos" "Class for user-created repository objects")

(eieio-defclass-autoload 'gh-repos-repo '(gh-repos-repo-stub) "lib/gh-el/gh-repos" "Class for GitHub repositories")

;;;***

;;;### (autoloads (alert alert-add-rule) "lisp/alert/alert" "lisp/alert/alert.el"
;;;;;;  (20488 45474))
;;; Generated autoloads from lisp/alert/alert.el

(autoload 'alert-add-rule "lisp/alert/alert" "\
Programmatically add an alert configuration rule.

Normally, users should custoimze `alert-user-configuration'.
This facility is for module writers and users that need to do
things the Lisp way.  

Here is a rule the author currently uses with ERC, so that the
fringe gets colored whenever people chat on BitlBee:

\(alert-add-rule :status   '(buried visible idle)
                :severity '(moderate high urgent)
                :mode     'erc-mode
                :predicate
                #'(lambda (info)
                    (string-match (concat \"\\\\`[^&].*@BitlBee\\\\'\")
                                  (erc-format-target-and/or-network)))
                :persistent
                #'(lambda (info)
                    ;; If the buffer is buried, or the user has been
                    ;; idle for `alert-reveal-idle-time' seconds,
                    ;; make this alert persistent.  Normally, alerts
                    ;; become persistent after
                    ;; `alert-persist-idle-time' seconds.
                    (memq (plist-get info :status) '(buried idle)))
                :style 'fringe
                :continue t)

\(fn &key SEVERITY STATUS MODE CATEGORY TITLE MESSAGE PREDICATE (style alert-default-style) PERSISTENT CONTINUE NEVER-PERSIST APPEND)" nil nil)

(autoload 'alert "lisp/alert/alert" "\
Alert the user that something has happened.
MESSAGE is what the user will see.  You may also use keyword
arguments to specify additional details.  Here is a full example:

\(alert \"This is a message\"
       :severity 'high          ;; The default severity is `normal'
       :title \"Title\"         ;; An optional title
       :category 'example       ;; A symbol to identify the message
       :mode 'text-mode         ;; Normally determined automatically
       :buffer (current-buffer) ;; This is the default
       :data nil                ;; Unused by alert.el itself
       :persistent nil          ;; Force the alert to be persistent;
                                ;; it is best not to use this
       :never-persist nil       ;; Force this alert to never persist
       :style 'fringe)          ;; Force a given style to be used;
                                ;; this is only for debugging!

If no :title is given, the buffer-name of :buffer is used.  If
:buffer is nil, it is the current buffer at the point of call.

:data is an opaque value which modules can pass through to their
own styles if they wish.

Here are some more typical examples of usage:

  ;; This is the most basic form usage
  (alert \"This is an alert\")

  ;; You can adjust the severity for more important messages
  (alert \"This is an alert\" :severity 'high)

  ;; Or decrease it for purely informative ones
  (alert \"This is an alert\" :severity 'trivial)

  ;; Alerts can have optional titles.  Otherwise, the title is the
  ;; buffer-name of the (current-buffer) where the alert originated.
  (alert \"This is an alert\" :title \"My Alert\")

  ;; Further, alerts can have categories.  This allows users to
  ;; selectively filter on them.
  (alert \"This is an alert\" :title \"My Alert\"
         :category 'some-category-or-other)

\(fn MESSAGE &key (severity (quote normal)) TITLE CATEGORY BUFFER MODE DATA STYLE PERSISTENT NEVER-PERSIST)" nil nil)

;;;***

;;;### (autoloads (c-includes c-includes-current-file c-includes-add-binding)
;;;;;;  "lisp/c-includes" "lisp/c-includes.el" (20488 45440))
;;; Generated autoloads from lisp/c-includes.el

(autoload 'c-includes-add-binding "lisp/c-includes" "\
Set binding for C-c C-i in cc-mode.

\(fn)" nil nil)

(autoload 'c-includes-current-file "lisp/c-includes" "\
Find all of the header file included by the current file.

\(fn &optional REGEXP)" t nil)

(autoload 'c-includes "lisp/c-includes" "\
Find all of the header files included by FILENAME.
REGEXP, if non-nil, is a regular expression to search for within
FILENAME and the files that it includes.  The output will be
structured in the same order that the compiler will see it, enabling
you to determine order of occurrence.

\(fn FILENAME &optional REGEXP)" t nil)

;;;***

;;;### (autoloads nil "lisp/chess/_pkg" "lisp/chess/_pkg.el" (20488
;;;;;;  45486))
;;; Generated autoloads from lisp/chess/_pkg.el

(if (fboundp 'package-provide) (package-provide 'chess :version 2.0 :type 'regular))

;;;***

;;;### (autoloads (chess-create-display chess) "lisp/chess/chess"
;;;;;;  "lisp/chess/chess.el" (20488 45486))
;;; Generated autoloads from lisp/chess/chess.el

(autoload 'chess "lisp/chess/chess" "\
Start a game of chess, playing against ENGINE (a module name).

\(fn &optional ENGINE DISABLE-POPUP ENGINE-RESPONSE-HANDLER &rest ENGINE-CTOR-ARGS)" t nil)

(defalias 'chess-session 'chess)

(autoload 'chess-create-display "lisp/chess/chess" "\
Create a display, letting the user's customization decide the style.
If MODULES-TOO is non-nil, also create and associate the modules
listed in `chess-default-modules'.

\(fn PERSPECTIVE &optional MODULES-TOO)" nil nil)

;;;***

;;;### (autoloads (chess-ics) "lisp/chess/chess-ics" "lisp/chess/chess-ics.el"
;;;;;;  (20488 45486))
;;; Generated autoloads from lisp/chess/chess-ics.el

(autoload 'chess-ics "lisp/chess/chess-ics" "\
Connect to an Internet Chess Server.

\(fn SERVER PORT &optional HANDLE PASSWORD-OR-FILENAME HELPER &rest HELPER-ARGS)" t nil)

;;;***

;;;### (autoloads (chess-link) "lisp/chess/chess-link" "lisp/chess/chess-link.el"
;;;;;;  (20488 45486))
;;; Generated autoloads from lisp/chess/chess-link.el

(autoload 'chess-link "lisp/chess/chess-link" "\
Play out a game between two engines, and watch the progress.
If you want to run an engine as a bot, make the transport the first
engine, and the computer the second engine.

\(fn FIRST-ENGINE-TYPE SECOND-ENGINE-TYPE)" t nil)

;;;***

;;;### (autoloads (chess-pgn-mode chess-pgn-read) "lisp/chess/chess-pgn"
;;;;;;  "lisp/chess/chess-pgn.el" (20488 45486))
;;; Generated autoloads from lisp/chess/chess-pgn.el

(autoload 'chess-pgn-read "lisp/chess/chess-pgn" "\
Read and display a PGN game after point.

\(fn &optional FILE)" t nil)

(autoload 'chess-pgn-mode "lisp/chess/chess-pgn" "\
A mode for editing chess PGN files.

\(fn)" t nil)

(defalias 'pgn-mode 'chess-pgn-mode)

(add-to-list 'auto-mode-alist '("\\.pgn\\'" . chess-pgn-mode))

;;;***

;;;### (autoloads (chess-puzzle) "lisp/chess/chess-puzzle" "lisp/chess/chess-puzzle.el"
;;;;;;  (20488 45486))
;;; Generated autoloads from lisp/chess/chess-puzzle.el

(autoload 'chess-puzzle "lisp/chess/chess-puzzle" "\
Pick a random puzzle from FILE, and solve it against the default engine.
The spacebar in the display buffer is bound to `chess-puzzle-next',
making it easy to go on to the next puzzle once you've solved one.

\(fn FILE &optional INDEX)" t nil)

;;;***

;;;### (autoloads (chess-fischer-random-position) "lisp/chess/chess-random"
;;;;;;  "lisp/chess/chess-random.el" (20488 45486))
;;; Generated autoloads from lisp/chess/chess-random.el

(autoload 'chess-fischer-random-position "lisp/chess/chess-random" "\
Generate a Fischer Random style position.

\(fn)" nil nil)

;;;***

;;;### (autoloads (chess-tutorial) "lisp/chess/chess-tutorial" "lisp/chess/chess-tutorial.el"
;;;;;;  (20488 45486))
;;; Generated autoloads from lisp/chess/chess-tutorial.el

(autoload 'chess-tutorial "lisp/chess/chess-tutorial" "\
A simple chess training display.

\(fn)" t nil)

;;;***

;;;### (autoloads (cl-info) "lisp/cl-info" "lisp/cl-info.el" (20488
;;;;;;  45440))
;;; Generated autoloads from lisp/cl-info.el

(autoload 'cl-info "lisp/cl-info" "\


\(fn SYMBOL-NAME)" t nil)

;;;***

;;;### (autoloads (copy-code-as-rtf) "lisp/copy-code" "lisp/copy-code.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from lisp/copy-code.el

(autoload 'copy-code-as-rtf "lisp/copy-code" "\


\(fn &optional FONT-SIZE)" t nil)

;;;***

;;;### (autoloads (async-start async-start-process) "lisp/emacs-async/async"
;;;;;;  "lisp/emacs-async/async.el" (20488 45488))
;;; Generated autoloads from lisp/emacs-async/async.el

(autoload 'async-start-process "lisp/emacs-async/async" "\
Start the executable PROGRAM asynchronously.  See `async-start'.
PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the
process object when done.  If FINISH-FUNC is nil, the future
object will return the process object when the program is
finished.

\(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)" nil nil)

(autoload 'async-start "lisp/emacs-async/async" "\
Execute START-FUNC (often a lambda) in a subordinate Emacs process.
When done, the return value is passed to FINISH-FUNC.  Example:

    (async-start
       ;; What to do in the child process
       (lambda ()
         (message \"This is a test\")
         (sleep-for 3)
         222)

       ;; What to do when it finishes
       (lambda (result)
         (message \"Async process done, result should be 222: %s\"
                  result)))

If FINISH-FUNC is nil or missing, a future is returned that can
be inspected using `async-get', blocking until the value is
ready.  Example:

    (let ((proc (async-start
                   ;; What to do in the child process
                   (lambda ()
                     (message \"This is a test\")
                     (sleep-for 3)
                     222))))

        (message \"I'm going to do some work here\") ;; ....

        (message \"Waiting on async process, result should be 222: %s\"
                 (async-get proc)))

If you don't want to use a callback, and you don't care about any
return value form the child process, pass the `ignore' symbol as
the second argument (if you don't, and never call `async-get', it
will leave *emacs* process buffers hanging around):

    (async-start
     (lambda ()
       (delete-file \"a remote file on a slow link\" nil))
     'ignore)

Note: Even when FINISH-FUNC is present, a future is still
returned except that it yields no value (since the value is
passed to FINISH-FUNC).  Call `async-get' on such a future always
returns nil.  It can still be useful, however, as an argument to
`async-ready' or `async-wait'.

\(fn START-FUNC &optional FINISH-FUNC)" nil (quote macro))

;;;***

;;;### (autoloads (erc-nick-notify-mode) "lisp/erc-nick-notify" "lisp/erc-nick-notify.el"
;;;;;;  (20496 3041))
;;; Generated autoloads from lisp/erc-nick-notify.el

(defvar erc-nick-notify-mode nil "\
Non-nil if Erc-Nick-Notify mode is enabled.
See the command `erc-nick-notify-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `erc-nick-notify-mode'.")

(custom-autoload 'erc-nick-notify-mode "lisp/erc-nick-notify" nil)

(autoload 'erc-nick-notify-mode "lisp/erc-nick-notify" "\
Minor mode that calls `erc-nick-notify-cmd' when your nick gets
mentioned in an erc channel.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads nil "lisp/erc-notifications" "lisp/erc-notifications.el"
;;;;;;  (20494 52423))
;;; Generated autoloads from lisp/erc-notifications.el
(autoload 'erc-notifications-mode "erc-notifications" "" t)

;;;***

;;;### (autoloads (eshell-toggle eshell-toggle-cd) "lisp/esh-toggle"
;;;;;;  "lisp/esh-toggle.el" (20488 45440))
;;; Generated autoloads from lisp/esh-toggle.el

(autoload 'eshell-toggle-cd "lisp/esh-toggle" "\
Calls `eshell-toggle' with a prefix argument.
See the command `eshell-toggle'

\(fn)" t nil)

(autoload 'eshell-toggle "lisp/esh-toggle" "\
Toggles between the *eshell* buffer and the current buffer.
With a prefix ARG also insert a \"cd DIR\" command into the eshell,
where DIR is the directory of the current buffer.

Call twice in a row to get a full screen window for the *eshell*
buffer.

When called in the *eshell* buffer returns you to the buffer you were
editing before caling the first time.

Options: `eshell-toggle-goto-eob'

\(fn MAKE-CD)" t nil)

;;;***

;;;### (autoloads (gnus-harvest-install gnus-harvest-find-address
;;;;;;  gnus-harvest-addresses) "lisp/gnus-harvest/gnus-harvest"
;;;;;;  "lisp/gnus-harvest/gnus-harvest.el" (20488 45490))
;;; Generated autoloads from lisp/gnus-harvest/gnus-harvest.el

(autoload 'gnus-harvest-addresses "lisp/gnus-harvest/gnus-harvest" "\
Harvest and remember the addresses in the current article buffer.

\(fn)" nil nil)

(autoload 'gnus-harvest-find-address "lisp/gnus-harvest/gnus-harvest" "\


\(fn)" t nil)

(autoload 'gnus-harvest-install "lisp/gnus-harvest/gnus-harvest" "\


\(fn &rest FEATURES)" nil nil)

;;;***

;;;### (autoloads (org-smart-capture) "lisp/org-smart-capture" "lisp/org-smart-capture.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from lisp/org-smart-capture.el

(autoload 'org-smart-capture "lisp/org-smart-capture" "\


\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (planner-calendar-show planner-calendar-goto planner-search-notes
;;;;;;  planner-search-notes-with-body planner-create-task-from-buffer
;;;;;;  planner-create-low-priority-task-from-buffer planner-create-medium-priority-task-from-buffer
;;;;;;  planner-create-high-priority-task-from-buffer planner-goto-next-daily-page
;;;;;;  planner-goto-previous-daily-page planner-goto-tomorrow planner-goto-yesterday
;;;;;;  planner-goto-most-recent planner-goto-today planner-show
;;;;;;  planner-goto-plan-page planner-goto plan planner-create-note
;;;;;;  planner-resolve-position-url planner-browse-position-url
;;;;;;  planner-annotation-from-file-with-position planner-annotation-as-kill
;;;;;;  planner-mode) "lisp/planner/planner" "lisp/planner/planner.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner.el

(autoload 'planner-mode "lisp/planner/planner" "\
A personal information manager for Emacs.
\\{planner-mode-map}

\(fn)" t nil)

(autoload 'planner-annotation-as-kill "lisp/planner/planner" "\
Copy the current annotation into the kill ring.
When called with a prefix argument, prompt for the link display name.

\(fn ARG)" t nil)

(autoload 'planner-annotation-from-file-with-position "lisp/planner/planner" "\
Return the filename and cursor position of the current buffer.
If `planner-annotation-use-relative-file' is t or a function that
returns non-nil, a relative link is used instead. If
`planner-annotation-strip-directory' is non-nil, the directory is
stripped from the link description.

\(fn)" nil nil)

(autoload 'planner-browse-position-url "lisp/planner/planner" "\
If this is a position URL, jump to it.

\(fn URL)" nil nil)

(autoload 'planner-resolve-position-url "lisp/planner/planner" "\
Replace ID with the blog, web or e-mail address of the BBDB record.

\(fn ID)" nil nil)

(autoload 'planner-create-note "lisp/planner/planner" "\
Create a note to be remembered in PAGE (today if PAGE is nil).
If `planner-reverse-chronological-notes' is non-nil, create the
note at the beginning of the notes section; otherwise, add it to
the end.  Position point after the anchor.

\(fn &optional PAGE)" t nil)

(autoload 'plan "lisp/planner/planner" "\
Start your planning for the day, carrying unfinished tasks forward.

If FORCE-DAYS is a positive integer, search that many days in the past
for unfinished tasks.
If FORCE-DAYS is 0 or t, scan all days.
If FORCE-DAYS is nil, use the value of `planner-carry-tasks-forward'
instead, except t means scan only yesterday.

\(fn &optional FORCE-DAYS)" t nil)

(autoload 'planner-goto "lisp/planner/planner" "\
Jump to the planning page for DATE.
If no page for DATE exists and JUST-SHOW is non-nil, don't create
a new page - simply return nil.

\(fn DATE &optional JUST-SHOW)" t nil)

(autoload 'planner-goto-plan-page "lisp/planner/planner" "\
Opens PAGE in the the `planner-project' wiki.
Use `planner-goto' if you want fancy calendar completion.

\(fn PAGE)" t nil)

(autoload 'planner-show "lisp/planner/planner" "\
Show the plan page for DATE in another window, but don't select it.
If no page for DATE exists, return nil.

\(fn DATE)" t nil)

(autoload 'planner-goto-today "lisp/planner/planner" "\
Jump to the planning page for today.

\(fn)" t nil)

(autoload 'planner-goto-most-recent "lisp/planner/planner" "\
Go to the most recent day with planning info.

\(fn)" t nil)

(autoload 'planner-goto-yesterday "lisp/planner/planner" "\
Goto the planner page DAYS before the currently displayed date.
If DAYS is nil, goes to the day immediately before the currently
displayed date.  If the current buffer is not a daily planner
page, calculates date based on today.

\(fn &optional DAYS)" t nil)

(autoload 'planner-goto-tomorrow "lisp/planner/planner" "\
Goto the planner page DAYS after the currently displayed date.
If DAYS is nil, goes to the day immediately after the currently
displayed date.  If the current buffer is not a daily planner
page, calculates date based on today.

\(fn &optional DAYS)" t nil)

(autoload 'planner-goto-previous-daily-page "lisp/planner/planner" "\
Goto the last plan page before the current date.
The current date is taken from the day page in the current
buffer, or today if the current buffer is not a planner page.
Does not create pages if they do not yet exist.

\(fn)" t nil)

(autoload 'planner-goto-next-daily-page "lisp/planner/planner" "\
Goto the first plan page after the current date.
The current date is taken from the day page in the current
buffer, or today if the current buffer is not a planner page.
Does not create pages if they do not yet exist.

\(fn)" t nil)

(autoload 'planner-create-high-priority-task-from-buffer "lisp/planner/planner" "\
Create a high-priority task based on this buffer.
Do not use this in LISP programs. Instead, set the value of
`planner-default-task-priority' and call `planner-create-task' or
`planner-create-task-from-buffer'.

\(fn)" t nil)

(autoload 'planner-create-medium-priority-task-from-buffer "lisp/planner/planner" "\
Create a high-priority task based on this buffer.
Do not use this in LISP programs. Instead, set the value of
`planner-default-task-priority' and call `planner-create-task' or
`planner-create-task-from-buffer'.

\(fn)" t nil)

(autoload 'planner-create-low-priority-task-from-buffer "lisp/planner/planner" "\
Create a high-priority task based on this buffer.
Do not use this in LISP programs. Instead, set the value of
`planner-default-task-priority' and call `planner-create-task' or
`planner-create-task-from-buffer'.

\(fn)" t nil)

(autoload 'planner-create-task-from-buffer "lisp/planner/planner" "\
Create a new task named TITLE on DATE based on the current buffer.
With a prefix, do not prompt for PLAN-PAGE. The task is
associated with PLAN-PAGE if non-nil. If STATUS is non-nil, use
that as the status for the task. Otherwise, use
`planner-default-task-status'. See `planner-create-task' for more
information.

\(fn TITLE DATE &optional PLAN-PAGE STATUS)" t nil)

(autoload 'planner-search-notes-with-body "lisp/planner/planner" "\
Return a buffer with all the notes returned by the query for REGEXP.
If called with a prefix argument, prompt for LIMIT and search days on
or after LIMIT. Display the body of the notes as well.

\(fn REGEXP LIMIT)" t nil)

(autoload 'planner-search-notes "lisp/planner/planner" "\
Return a buffer with all the notes returned by the query for REGEXP.
If called with a prefix argument, prompt for LIMIT and search days on
or after LIMIT. If INCLUDE-BODY is non-nil, return the body as well.

\(fn REGEXP LIMIT &optional INCLUDE-BODY)" t nil)

(autoload 'planner-calendar-goto "lisp/planner/planner" "\
Goto the plan page corresponding to the calendar date.

\(fn)" t nil)

(autoload 'planner-calendar-show "lisp/planner/planner" "\
Show the plan page for the calendar date under point in another window.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-accomplishments-show planner-accomplishments-update
;;;;;;  planner-accomplishments-insinuate) "lisp/planner/planner-accomplishments"
;;;;;;  "lisp/planner/planner-accomplishments.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-accomplishments.el

(autoload 'planner-accomplishments-insinuate "lisp/planner/planner-accomplishments" "\
Automatically call `planner-accomplishments-update'.

\(fn)" nil nil)

(autoload 'planner-accomplishments-update "lisp/planner/planner-accomplishments" "\
Update `planner-accomplishments-section'.

\(fn)" t nil)

(autoload 'planner-accomplishments-show "lisp/planner/planner-accomplishments" "\
Display a buffer with the current page's accomplishment report.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-appt-use-tasks-and-schedule planner-appt-use-schedule
;;;;;;  planner-appt-use-tasks planner-appt-insinuate planner-appt-insinuate-if-today
;;;;;;  planner-appt-update) "lisp/planner/planner-appt" "lisp/planner/planner-appt.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-appt.el

(autoload 'planner-appt-update "lisp/planner/planner-appt" "\
Update the appointments on the current page.

\(fn)" t nil)

(autoload 'planner-appt-insinuate-if-today "lisp/planner/planner-appt" "\


\(fn)" nil nil)

(autoload 'planner-appt-insinuate "lisp/planner/planner-appt" "\
Insinuate appointment alerting into planner mode.
Appointment methods should be set up first using one of:
  `planner-appt-use-tasks'
  `planner-appt-use-schedule'
  `planner-appt-use-tasks-and-schedule'.

\(fn)" nil nil)

(autoload 'planner-appt-use-tasks "lisp/planner/planner-appt" "\
Use tasks to derive appointment alerts.

\(fn)" nil nil)

(autoload 'planner-appt-use-schedule "lisp/planner/planner-appt" "\
Use the schedule to derive appointment alerts.

\(fn)" nil nil)

(autoload 'planner-appt-use-tasks-and-schedule "lisp/planner/planner-appt" "\
Use both tasks and the schedule to derive appointment alerts.

\(fn)" nil nil)

;;;***

;;;### (autoloads (planner-bbdb-resolve-url planner-bbdb-browse-url
;;;;;;  planner-bbdb-annotation-from-bbdb) "lisp/planner/planner-bbdb"
;;;;;;  "lisp/planner/planner-bbdb.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-bbdb.el

(autoload 'planner-bbdb-annotation-from-bbdb "lisp/planner/planner-bbdb" "\
If called from a bbdb buffer, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-bbdb-browse-url "lisp/planner/planner-bbdb" "\
If this is a BBDB URL, jump to it.

\(fn URL)" nil nil)

(autoload 'planner-bbdb-resolve-url "lisp/planner/planner-bbdb" "\
Replace ID with the blog, web or e-mail address of the BBDB record.

\(fn ID)" nil nil)

;;;***

;;;### (autoloads (planner-bibtex-browse-url planner-bibtex-annotation-old
;;;;;;  planner-bibtex-annotation-new) "lisp/planner/planner-bibtex"
;;;;;;  "lisp/planner/planner-bibtex.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-bibtex.el

(autoload 'planner-bibtex-annotation-new "lisp/planner/planner-bibtex" "\
Return an annotation for the current bibtex entry.

\(fn)" nil nil)

(autoload 'planner-bibtex-annotation-old "lisp/planner/planner-bibtex" "\
Return the filename on the current line in dired.

\(fn)" nil nil)

(autoload 'planner-bibtex-browse-url "lisp/planner/planner-bibtex" "\
If this is a Bibtex URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-bookmark-browse-url planner-bookmark-annotation-from-bookmark)
;;;;;;  "lisp/planner/planner-bookmark" "lisp/planner/planner-bookmark.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-bookmark.el

(autoload 'planner-bookmark-annotation-from-bookmark "lisp/planner/planner-bookmark" "\
If called from a bookmark buffer, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-bookmark-browse-url "lisp/planner/planner-bookmark" "\
If this is a bookmark URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-cyclic-create-tasks-maybe) "lisp/planner/planner-cyclic"
;;;;;;  "lisp/planner/planner-cyclic.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-cyclic.el

(autoload 'planner-cyclic-create-tasks-maybe "lisp/planner/planner-cyclic" "\
Maybe create cyclic tasks.
This will only create tasks for future dates or today.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-deadline-remove planner-deadline-change
;;;;;;  planner-deadline-update) "lisp/planner/planner-deadline"
;;;;;;  "lisp/planner/planner-deadline.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-deadline.el

(autoload 'planner-deadline-update "lisp/planner/planner-deadline" "\
Replace the text for all tasks with deadlines.
By default, deadlines are of the form {{Deadline: yyyy.mm.dd}}.
See `planner-deadline-regexp' for details.

\(fn)" t nil)

(autoload 'planner-deadline-change "lisp/planner/planner-deadline" "\
Change the deadline of current task to DATE.
If DATE is nil, prompt for it.

\(fn DATE)" t nil)

(defalias 'planner-deadline-add 'planner-deadline-change)

(autoload 'planner-deadline-remove "lisp/planner/planner-deadline" "\
Remove the deadline of the current task.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-diary-add-entry planner-diary-insinuate
;;;;;;  planner-diary-show-day-plan-or-diary planner-diary-insert-all-diaries-maybe
;;;;;;  planner-diary-insert-all-diaries planner-diary-update-section)
;;;;;;  "lisp/planner/planner-diary" "lisp/planner/planner-diary.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-diary.el

(autoload 'planner-diary-update-section "lisp/planner/planner-diary" "\
Update FILE's existing section TITLE by replacing existing text with TEXT.
If optional arg FORCE is non-nil, update the section even if it doesn't exist,
i.e. insert TITLE followed by TEXT at the top of the buffer.

\(fn FILE TITLE TEXT &optional FORCE)" nil nil)

(autoload 'planner-diary-insert-all-diaries "lisp/planner/planner-diary" "\
Update all diary sections in a day plan file.
If FORCE is non-nil, insert a diary section even if there is no section header.
Inserts only diaries if the corresponding `planner-diary-use-*' variable is t.

\(fn &optional FORCE)" t nil)

(autoload 'planner-diary-insert-all-diaries-maybe "lisp/planner/planner-diary" "\
Update all diary sections in a day plan file.
If the current day is in the past and FORCE is nil, don't do anything.
If FORCE is non-nil, insert a diary section even if there is no section header.
Inserts only diaries if the corresponding `planner-diary-use-*' variable is t.

\(fn &optional FORCE)" t nil)

(autoload 'planner-diary-show-day-plan-or-diary "lisp/planner/planner-diary" "\
Show the day plan or diary entries for the date under point in calendar.
Add this to `calendar-move-hook' if you want to use it.  In that case you
should also `remove-hook' `planner-calendar-show' from `calendar-move-hook'.

\(fn)" t nil)

(autoload 'planner-diary-insinuate "lisp/planner/planner-diary" "\
Hook Diary into Planner.
Automatically insert and update a Diary section in day plan files.
This adds a new key binding to `planner-mode-map':
C-cC-e updates the diary sections.

\(fn)" nil nil)

(defalias 'planner-insinuate-diary 'planner-diary-insinuate)

(autoload 'planner-diary-add-entry "lisp/planner/planner-diary" "\
Prompt for a diary entry to add to `diary-file' on DATE.
Uses `planner-annotation-functions' to make hyperlinks.
TIME and TEXT are used in the description.

\(fn DATE TIME TEXT)" t nil)

;;;***

;;;### (autoloads (planner-erc-browse-url planner-erc-annotation-from-erc)
;;;;;;  "lisp/planner/planner-erc" "lisp/planner/planner-erc.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-erc.el

(autoload 'planner-erc-annotation-from-erc "lisp/planner/planner-erc" "\
Return an annotation for the current line.
This function can be added to `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-erc-browse-url "lisp/planner/planner-erc" "\
If this is an IRC URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-export-diary planner-export-diary-setup
;;;;;;  planner-export-diary-future) "lisp/planner/planner-export-diary"
;;;;;;  "lisp/planner/planner-export-diary.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-export-diary.el

(autoload 'planner-export-diary-future "lisp/planner/planner-export-diary" "\
Exports only `planner-export-number-of-days' days of entries.
This function can be put into your `after-save-hook'.

\(fn)" t nil)

(autoload 'planner-export-diary-setup "lisp/planner/planner-export-diary" "\
Add `planner-export-diary-future' to `after-save-hook' in planner buffers.
You can add this function to `planner-mode-hook'.

\(fn)" nil nil)

(autoload 'planner-export-diary "lisp/planner/planner-export-diary" "\
Exports all the schedules or the ones from FROM to TO (inclusive).

\(fn &optional FROM TO)" t nil)

;;;***

;;;### (autoloads (planner-gnats-browse-url planner-gnats-annotation-from-gnats)
;;;;;;  "lisp/planner/planner-gnats" "lisp/planner/planner-gnats.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-gnats.el

(autoload 'planner-gnats-annotation-from-gnats "lisp/planner/planner-gnats" "\
If called from gnats-edit or gnats-view buffer, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-gnats-browse-url "lisp/planner/planner-gnats" "\
If this is a Gnats URL, view the pr (view-pr).

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-gnus-browse-url planner-gnus-annotation
;;;;;;  planner-gnus-insinuate) "lisp/planner/planner-gnus" "lisp/planner/planner-gnus.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-gnus.el

(autoload 'planner-gnus-insinuate "lisp/planner/planner-gnus" "\
Hook Planner into Gnus.

Adds special planner keybindings to the variable
`gnus-summary-article-map'. From a summary or article buffer, you
can type C-c C-t to call planner-create-task-from-buffer.

\(fn)" nil nil)

(autoload 'planner-gnus-annotation "lisp/planner/planner-gnus" "\
Return an annotation from a Gnus summary or message buffer.
Suitable for use in `planner-annotation-functions'. If you
include this, you can omit `planner-gnus-annotation-from-summary'
and `planner-gnus-annotation-from-message'.

\(fn)" nil nil)

(autoload 'planner-gnus-browse-url "lisp/planner/planner-gnus" "\
If this is a Gnus URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-id-setup planner-id-update-tasks-maybe
;;;;;;  planner-id-markup planner-id-add-task-id-maybe planner-id-jump-to-linked-task
;;;;;;  planner-id-find-task) "lisp/planner/planner-id" "lisp/planner/planner-id.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-id.el

(autoload 'planner-id-find-task "lisp/planner/planner-id" "\
Find task described by TASK-INFO. If POINT is non-nil, start from there.
If task is found, move point to line beginning and return non-nil.
If task is not found, leave point at POINT or the start of the buffer
and return nil.

\(fn TASK-INFO &optional POINT)" nil nil)

(autoload 'planner-id-jump-to-linked-task "lisp/planner/planner-id" "\
Display the linked task page.
If INFO is specified, follow that task instead.

\(fn &optional INFO)" t nil)

(autoload 'planner-id-add-task-id-maybe "lisp/planner/planner-id" "\
Add task ID if `planner-id-add-task-id-flag' is non-nil.

\(fn)" nil nil)

(autoload 'planner-id-markup "lisp/planner/planner-id" "\
Highlight IDs as unobtrusive, clickable text from BEG to END.
VERBOSE is ignored.

\(fn BEG END &optional VERBOSE)" nil nil)

(autoload 'planner-id-update-tasks-maybe "lisp/planner/planner-id" "\
Update tasks depending on the value of `planner-id-update-automatically'.

\(fn)" nil nil)

(autoload 'planner-id-setup "lisp/planner/planner-id" "\
Hook into `planner-mode'.

\(fn)" nil nil)

;;;***

;;;### (autoloads (planner-ledger-insert-maybe) "lisp/planner/planner-ledger"
;;;;;;  "lisp/planner/planner-ledger.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-ledger.el

(autoload 'planner-ledger-insert-maybe "lisp/planner/planner-ledger" "\
Maybe insert ledger sections into a Planner page.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-lisp-browse-url) "lisp/planner/planner-lisp"
;;;;;;  "lisp/planner/planner-lisp.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-lisp.el

(autoload 'planner-lisp-browse-url "lisp/planner/planner-lisp" "\
If this is a LISP URL, evaluate it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-log-edit-add-note) "lisp/planner/planner-log-edit"
;;;;;;  "lisp/planner/planner-log-edit.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-log-edit.el

(autoload 'planner-log-edit-add-note "lisp/planner/planner-log-edit" "\
Add a note describing the commit to the current planner page.

\(fn)" nil nil)

;;;***

;;;### (autoloads (planner-mhe-browse-url planner-mhe-annotation)
;;;;;;  "lisp/planner/planner-mhe" "lisp/planner/planner-mhe.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-mhe.el

(autoload 'planner-mhe-annotation "lisp/planner/planner-mhe" "\
If called from a MH-E folder or message buffer, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-mhe-browse-url "lisp/planner/planner-mhe" "\
If this is a MH-E URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-multi-remove-task-from-pool) "lisp/planner/planner-multi"
;;;;;;  "lisp/planner/planner-multi.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-multi.el

(autoload 'planner-multi-remove-task-from-pool "lisp/planner/planner-multi" "\
Remove completed tasks from `planner-multi-copy-tasks-to-page' if that still leaves them linked.

\(fn OLD-STATUS NEW-STATUS)" nil nil)

;;;***

;;;### (autoloads (planner-notes-index-years planner-notes-index-months
;;;;;;  planner-notes-index-weeks planner-notes-index-days planner-notes-index
;;;;;;  planner-notes-index-month-table-tag planner-notes-index-tag)
;;;;;;  "lisp/planner/planner-notes-index" "lisp/planner/planner-notes-index.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-notes-index.el

(autoload 'planner-notes-index-tag "lisp/planner/planner-notes-index" "\
Mark up planner-notes-index tags.

Tags can be of the form:

  <planner-notes-index page=\"2004.03.02\">
  <planner-notes-index from=\"2004.03.01\" to=\"2004.03.31\">
  <planner-notes-index limit=\"10\">

\(fn TAG-BEG TAG-END ATTRS)" nil nil)

(autoload 'planner-notes-index-month-table-tag "lisp/planner/planner-notes-index" "\
Mark up a month note index.  Tag is from BEG to END.
ATTRS is a list of attributes. \"Month\" is a yyyy.mm
 string (default: current month). \"Limit\" is the maximum number
 of items per day (default: all).

Examples:
<planner-notes-index-month-table month=\"2004.02\">
<planner-notes-index-month-table month=\"2004.02\" limit=\"4\">

\(fn BEG END ATTRS)" nil nil)

(autoload 'planner-notes-index "lisp/planner/planner-notes-index" "\
Display a clickable notes index.
If called from a Lisp program, display only dates between FROM
and TO. With a prefix arg LIMIT, display only that number of
entries.

\(fn &optional FROM TO LIMIT)" t nil)

(autoload 'planner-notes-index-days "lisp/planner/planner-notes-index" "\
Display an index of notes posted over the past few DAYS.
The list ends with the day of the current buffer or `planner-today'.

\(fn DAYS)" t nil)

(autoload 'planner-notes-index-weeks "lisp/planner/planner-notes-index" "\
Display an index of notes posted over the past few WEEKS.
The list ends with the week of the current buffer or `planner-today'.
Weeks start from Sunday.

\(fn WEEKS)" t nil)

(autoload 'planner-notes-index-months "lisp/planner/planner-notes-index" "\
Display an index of notes posted over the past few MONTHS.
The list ends with the month of the current buffer or `planner-today'.

\(fn MONTHS)" t nil)

(autoload 'planner-notes-index-years "lisp/planner/planner-notes-index" "\
Display an index of notes posted over the past few YEARS.
The current year is included.

\(fn YEARS)" t nil)

;;;***

;;;### (autoloads (planner-psvn-log-edit-add-note planner-psvn-browse-url
;;;;;;  planner-annotation-from-psvn) "lisp/planner/planner-psvn"
;;;;;;  "lisp/planner/planner-psvn.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-psvn.el

(autoload 'planner-annotation-from-psvn "lisp/planner/planner-psvn" "\
If called from a psvn  *svn-log-view* buffer, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-psvn-browse-url "lisp/planner/planner-psvn" "\
If this is a psvn url, handle it.

\(fn URL)" nil nil)

(autoload 'planner-psvn-log-edit-add-note "lisp/planner/planner-psvn" "\
Add a note describing the commit via psvn to the current planner page.

\(fn)" nil nil)

;;;***

;;;### (autoloads (planner-rank-update-all planner-rank-update-current-task
;;;;;;  planner-rank-change planner-sort-tasks-by-urgency planner-sort-tasks-by-importance
;;;;;;  planner-sort-tasks-by-rank) "lisp/planner/planner-rank" "lisp/planner/planner-rank.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-rank.el

(autoload 'planner-sort-tasks-by-rank "lisp/planner/planner-rank" "\
Sort tasks by status (_PDXC), priority (ABC), and rank.
Suitable for `planner-sort-tasks-key-function'

\(fn)" nil nil)

(autoload 'planner-sort-tasks-by-importance "lisp/planner/planner-rank" "\
Sort tasks by status (_PDXC), priority (ABC), and importance.
Suitable for `planner-sort-tasks-key-function'

\(fn)" nil nil)

(autoload 'planner-sort-tasks-by-urgency "lisp/planner/planner-rank" "\
Sort tasks by status (_PDXC), priority (ABC), and urgency.
Suitable for `planner-sort-tasks-key-function'

\(fn)" nil nil)

(autoload 'planner-rank-change "lisp/planner/planner-rank" "\
Change the IMPORTANCE and URGENCY of the current task.
If there's deadline available, calculate urgency instead of asking
the user.

\(fn &optional IMPORTANCE URGENCY)" t nil)

(autoload 'planner-rank-update-current-task "lisp/planner/planner-rank" "\
Re-calculate rank for the current task.

\(fn)" t nil)

(autoload 'planner-rank-update-all "lisp/planner/planner-rank" "\
Re-calculate rank for all tasks in the current page.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-rdf-publish-index planner-rdf-publish-file)
;;;;;;  "lisp/planner/planner-rdf" "lisp/planner/planner-rdf.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-rdf.el

(autoload 'planner-rdf-publish-file "lisp/planner/planner-rdf" "\
Publish the file in RDF format, if called by PlannerMode.
Designed to be called via `muse-after-publish-hook'.
Non-Planner files, matching `muse-image-regexp' will be treated
differently. Currently they are simply ignored.

\(fn FILE)" t nil)

(autoload 'planner-rdf-publish-index "lisp/planner/planner-rdf" "\
Create an index for the .rdf files.
Will be called via `muse-after-publish-hook'.
Creates index.rdf, a rdf:bag, with all existing .rdf files as
items.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-registry-initialize) "lisp/planner/planner-registry"
;;;;;;  "lisp/planner/planner-registry.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-registry.el

(autoload 'planner-registry-initialize "lisp/planner/planner-registry" "\
Set `planner-registry-alist' from `planner-registry-file'.
If `planner-registry-file' doesn't exist, create it.
If FROM-SCRATCH is non-nil, make the registry from scratch.

\(fn &optional FROM-SCRATCH)" t nil)

;;;***

;;;### (autoloads (planner-report-generate) "lisp/planner/planner-report"
;;;;;;  "lisp/planner/planner-report.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-report.el

(autoload 'planner-report-generate "lisp/planner/planner-report" "\
Generate a status report spanning a period from BEGIN to END.
BEGIN and END are in the format YYYY.MM.DD.

\(fn BEGIN END)" t nil)

;;;***

;;;### (autoloads (planner-rmail-browse-url planner-rmail-annotation-from-mail)
;;;;;;  "lisp/planner/planner-rmail" "lisp/planner/planner-rmail.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-rmail.el

(autoload 'planner-rmail-annotation-from-mail "lisp/planner/planner-rmail" "\
Return an annotation for the current message.
This function can be added to `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-rmail-browse-url "lisp/planner/planner-rmail" "\
If this is an RMAIL URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-rss-add-note) "lisp/planner/planner-rss"
;;;;;;  "lisp/planner/planner-rss.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-rss.el

(autoload 'planner-rss-add-note "lisp/planner/planner-rss" "\
Export the current note using `planner-rss-add-item'.
If FEED is non-nil, add the note to the specified feed only.
Call with the interactive prefix in order to be prompted for FEED.

\(fn &optional FEED)" t nil)

;;;***

;;;### (autoloads (planner-schedule-show-end-project) "lisp/planner/planner-schedule"
;;;;;;  "lisp/planner/planner-schedule.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-schedule.el

(autoload 'planner-schedule-show-end-project "lisp/planner/planner-schedule" "\
Display the estimated project completion time.

\(fn)" t nil)

;;;***

;;;### (autoloads (planner-tasks-overview-show-summary planner-tasks-overview-jump
;;;;;;  planner-tasks-overview-jump-other-window planner-tasks-overview)
;;;;;;  "lisp/planner/planner-tasks-overview" "lisp/planner/planner-tasks-overview.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-tasks-overview.el

(autoload 'planner-tasks-overview "lisp/planner/planner-tasks-overview" "\
Display a task overview from START to END.

\(fn START END)" t nil)

(autoload 'planner-tasks-overview-jump-other-window "lisp/planner/planner-tasks-overview" "\
Display the task under point in a different window.

\(fn)" t nil)

(autoload 'planner-tasks-overview-jump "lisp/planner/planner-tasks-overview" "\
Display the task under point.

\(fn &optional OTHER-WINDOW)" t nil)

(autoload 'planner-tasks-overview-show-summary "lisp/planner/planner-tasks-overview" "\
Count unscheduled, scheduled, and completed tasks for FILE-LIST.
If called with an interactive prefix, prompt for the page(s) to
display. planner-multi is required for multiple pages.

\(fn &optional FILE-LIST)" t nil)

;;;***

;;;### (autoloads (planner-colors-timeclock-report-tag) "lisp/planner/planner-timeclock"
;;;;;;  "lisp/planner/planner-timeclock.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-timeclock.el

(autoload 'planner-colors-timeclock-report-tag "lisp/planner/planner-timeclock" "\
Replace the region BEG to END with a timeclock report, colorizing
the result.

\(fn BEG END)" nil nil)

;;;***

;;;### (autoloads (planner-timeclock-summary-show-2 planner-timeclock-summary-show-range-filter
;;;;;;  planner-timeclock-summary-show-filter planner-timeclock-summary-show
;;;;;;  planner-timeclock-summary-update planner-timeclock-summary-insinuate)
;;;;;;  "lisp/planner/planner-timeclock-summary" "lisp/planner/planner-timeclock-summary.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-timeclock-summary.el

(autoload 'planner-timeclock-summary-insinuate "lisp/planner/planner-timeclock-summary" "\
Automatically call `planner-timeclock-summary-update'.
This function is called when the day page is saved.

\(fn)" nil nil)

(autoload 'planner-timeclock-summary-update "lisp/planner/planner-timeclock-summary" "\
Update `planner-timeclock-summary-section'. in the current day page.
The section is updated only if it exists.

\(fn)" t nil)

(autoload 'planner-timeclock-summary-show "lisp/planner/planner-timeclock-summary" "\
Display a buffer with the timeclock summary for DATE.
Date is a string in the form YYYY.MM.DD.

\(fn &optional DATE)" t nil)

(autoload 'planner-timeclock-summary-show-filter "lisp/planner/planner-timeclock-summary" "\
Show a timeclock report filtered by FILTER for DATE.

If FILTER is a regexp, only plan pages matching that regexp will
be included. If FILTER is a function, it will be called with the
current timeclock item, and the line considered if the function
returned non-nil.

If called interactively, prompt for FILTER (a regexp) and DATE.
DATE is a string in the form YYYY.MM.DD and can be nil.

\(fn FILTER DATE)" t nil)

(autoload 'planner-timeclock-summary-show-range-filter "lisp/planner/planner-timeclock-summary" "\
Show a timeclock report filtered by FILTER for START-DATE to END-DATE.

If FILTER is a regexp, only plan pages matching that regexp will
be included. If FILTER is a function, it will be called with the
current timeclock item, and the line considered if the function
returned non-nil.

If called interactively, prompt for FILTER (a regexp), START-DATE and END-DATE.
Dates are strings in the form YYYY.MM.DD and can be nil.

\(fn FILTER START-DATE END-DATE)" t nil)

(autoload 'planner-timeclock-summary-show-2 "lisp/planner/planner-timeclock-summary" "\
Display a buffer with the timeclock summary for DATE.

Date is a string in the form YYYY.MM.DD. It will be asked if not
given.

\(fn &optional DATE)" t nil)

;;;***

;;;### (autoloads (planner-timeclock-summary-proj-report planner-timeclock-summary-proj-current
;;;;;;  planner-timeclock-summary-proj-all) "lisp/planner/planner-timeclock-summary-proj"
;;;;;;  "lisp/planner/planner-timeclock-summary-proj.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-timeclock-summary-proj.el

(autoload 'planner-timeclock-summary-proj-all "lisp/planner/planner-timeclock-summary-proj" "\
Insert time report for all projects in the current buffer.

\(fn)" t nil)

(autoload 'planner-timeclock-summary-proj-current "lisp/planner/planner-timeclock-summary-proj" "\
Insert time report for the current project in the current buffer.

\(fn)" t nil)

(autoload 'planner-timeclock-summary-proj-report "lisp/planner/planner-timeclock-summary-proj" "\
Insert time report for PROJECT in the current buffer.

\(fn PROJECT)" t nil)

;;;***

;;;### (autoloads (planner-trunk-tasks) "lisp/planner/planner-trunk"
;;;;;;  "lisp/planner/planner-trunk.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-trunk.el

(autoload 'planner-trunk-tasks "lisp/planner/planner-trunk" "\
Trunk(group) tasks in the current page.
Please refer the docstring of `planner-trunk-rule-list' for how
it works. You may want to call this function before you sort tasks
and/or after you create new tasks. If a prefix is given or FORCE is not
nil, trunk completed tasks together with non-completed tasks not
matter what the `planner-trunk-rule-list' said.

\(fn &optional FORCE)" t nil)

;;;***

;;;### (autoloads (planner-unix-mail-browse-url planner-unix-mail-annotation-from-mail)
;;;;;;  "lisp/planner/planner-unix-mail" "lisp/planner/planner-unix-mail.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-unix-mail.el

(autoload 'planner-unix-mail-annotation-from-mail "lisp/planner/planner-unix-mail" "\
Return an annotation for the current message.
This function can be added to `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-unix-mail-browse-url "lisp/planner/planner-unix-mail" "\
If this is an UNIX-MAIL URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-vm-browse-url planner-vm-annotation-from-mail)
;;;;;;  "lisp/planner/planner-vm" "lisp/planner/planner-vm.el" (20488
;;;;;;  45500))
;;; Generated autoloads from lisp/planner/planner-vm.el

(autoload 'planner-vm-annotation-from-mail "lisp/planner/planner-vm" "\
Return an annotation for the current message.
This function can be added to `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-vm-browse-url "lisp/planner/planner-vm" "\
If this is an VM URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-w3m-annotation-from-w3m) "lisp/planner/planner-w3m"
;;;;;;  "lisp/planner/planner-w3m.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-w3m.el

(autoload 'planner-w3m-annotation-from-w3m "lisp/planner/planner-w3m" "\
If called from a w3m page, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

;;;***

;;;### (autoloads (planner-wl-browse-url planner-wl-annotation-from-wl
;;;;;;  planner-wl-insinuate) "lisp/planner/planner-wl" "lisp/planner/planner-wl.el"
;;;;;;  (20488 45500))
;;; Generated autoloads from lisp/planner/planner-wl.el

(autoload 'planner-wl-insinuate "lisp/planner/planner-wl" "\
Hook Planner into Wanderlust.
Add special planner keybindings to`wl-summary-mode-map'.
From the Wanderlust Summary view, you can type C-c C-t to create a task.

\(fn)" nil nil)

(autoload 'planner-wl-annotation-from-wl "lisp/planner/planner-wl" "\
If called from wl, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-wl-browse-url "lisp/planner/planner-wl" "\
If this is a Wanderlust URL, jump to it.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (planner-xtla-log-edit-add-note planner-xtla-browse-url
;;;;;;  planner-annotation-from-xtla) "lisp/planner/planner-xtla"
;;;;;;  "lisp/planner/planner-xtla.el" (20488 45500))
;;; Generated autoloads from lisp/planner/planner-xtla.el

(autoload 'planner-annotation-from-xtla "lisp/planner/planner-xtla" "\
If called from a xtla buffer, return an annotation.
Suitable for use in `planner-annotation-functions'.

\(fn)" nil nil)

(autoload 'planner-xtla-browse-url "lisp/planner/planner-xtla" "\
If this is a xtla url, handle it.

\(fn URL)" nil nil)

(autoload 'planner-xtla-log-edit-add-note "lisp/planner/planner-xtla" "\
Provide `planner-log-edit'-like functionality for xtla.
This function is automatically called by `tla-commit-hook'.
See also `planner-xtla-log-edit-notice-commit-function'.

\(fn)" t nil)

;;;***

;;;### (autoloads (regex-tool) "lisp/regex-tool/regex-tool" "lisp/regex-tool/regex-tool.el"
;;;;;;  (20488 45501))
;;; Generated autoloads from lisp/regex-tool/regex-tool.el

(autoload 'regex-tool "lisp/regex-tool/regex-tool" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (shell-toggle shell-toggle-cd) "lisp/sh-toggle"
;;;;;;  "lisp/sh-toggle.el" (20488 45440))
;;; Generated autoloads from lisp/sh-toggle.el

(autoload 'shell-toggle-cd "lisp/sh-toggle" "\
Calls `shell-toggle' with a prefix argument.
See the command `shell-toggle'

\(fn)" t nil)

(autoload 'shell-toggle "lisp/sh-toggle" "\
Toggles between the *shell* buffer and the current buffer.
With a prefix ARG also insert a \"cd DIR\" command into the shell,
where DIR is the directory of the current buffer.

Call twice in a row to get a full screen window for the *shell*
buffer.

When called in the *shell* buffer returns you to the buffer you were
editing before caling the first time.

Options: `shell-toggle-goto-eob'

\(fn MAKE-CD)" t nil)

;;;***

;;;### (autoloads nil "lisp/springboard/ido-springboard" "lisp/springboard/ido-springboard.el"
;;;;;;  (20488 45502))
;;; Generated autoloads from lisp/springboard/ido-springboard.el

(defadvice ido-switch-buffer (around ido-springboard-ido-switch-buffer activate) "\
Adds ability to set `default-directory' for commands at ido minibuffer." (interactive) (add-hook (quote minibuffer-setup-hook) (quote ido-springboard-add-trap)) (add-hook (quote minibuffer-exit-hook) (quote ido-springboard-remove-trap)) (unwind-protect (let* (ido-springboard-trapped ido-springboard-already-trapped (default-directory (catch (quote abort) (ignore ad-do-it)))) (if default-directory (call-interactively this-command))) (remove-hook (quote minibuffer-setup-hook) (quote ido-springboard-add-trap)) (remove-hook (quote minibuffer-exit-hook) (quote ido-springboard-remove-trap))))

;;;***

;;;### (autoloads (springboard springboard-apply-passthrough-keys)
;;;;;;  "lisp/springboard/springboard" "lisp/springboard/springboard.el"
;;;;;;  (20488 45502))
;;; Generated autoloads from lisp/springboard/springboard.el

(autoload 'springboard-apply-passthrough-keys "lisp/springboard/springboard" "\


\(fn)" nil nil)

(autoload 'springboard "lisp/springboard/springboard" "\
`helm'-based command for temporarily changing the default directory.

\(fn)" t nil)

;;;***

;;;### (autoloads (find-fn-or-var-nearest-point near-point-y-distance
;;;;;;  near-point-x-distance) "lisp/thingatpt+" "lisp/thingatpt+.el"
;;;;;;  (20288 3973))
;;; Generated autoloads from lisp/thingatpt+.el

(defvar near-point-x-distance 50 "\
*Maximum number of characters from point to search, left and right.
Used by functions that provide default text for minibuffer input.
Some functions might ignore or override this setting temporarily.")

(custom-autoload 'near-point-x-distance "lisp/thingatpt+" t)

(defvar near-point-y-distance 5 "\
*Maximum number of lines from point to search, up and down.
To constrain search to the same line as point, set this to zero.
Used by functions that provide default text for minibuffer input.
Some functions might ignore or override this setting temporarily.")

(custom-autoload 'near-point-y-distance "lisp/thingatpt+" t)

(intern "whitespace-&-newlines")

(autoload 'find-fn-or-var-nearest-point "lisp/thingatpt+" "\
Go to the definition of the function or variable nearest the cursor.
With a prefix arg, or if no function or variable is near the cursor,
prompt for the function or variable to find, instead.

\(fn &optional CONFIRMP)" t nil)

;;;***

;;;### (autoloads (outlineify-sticky allout-mode allout-mode-p allout-auto-activation
;;;;;;  allout-setup allout-auto-activation-helper) "override/allout"
;;;;;;  "override/allout.el" (20488 45440))
;;; Generated autoloads from override/allout.el

(autoload 'allout-auto-activation-helper "override/allout" "\
Institute `allout-auto-activation'.

Intended to be used as the `allout-auto-activation' :set function.

\(fn VAR VALUE)" nil nil)

(autoload 'allout-setup "override/allout" "\
Do fundamental emacs session for allout auto-activation.

Establishes allout processing as part of visiting a file if
`allout-auto-activation' is non-nil, or removes it otherwise.

The proper way to use this is through customizing the setting of
`allout-auto-activation'.

\(fn)" nil nil)

(defvar allout-auto-activation nil "\
Configure allout outline mode auto-activation.

Control whether and how allout outline mode is automatically
activated when files are visited with non-nil buffer-specific
file variable `allout-layout'.

When allout-auto-activation is \"On\" (t), allout mode is
activated in buffers with non-nil `allout-layout', and the
specified layout is applied.

With value \"ask\", auto-mode-activation is enabled, and endorsement for
performing auto-layout is asked of the user each time.

With value \"activate\", only auto-mode-activation is enabled.
Auto-layout is not.

With value nil, inhibit any automatic allout-mode activation.")

(custom-autoload 'allout-auto-activation "override/allout" nil)

(put 'allout-use-hanging-indents 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-reindent-bodies 'safe-local-variable (lambda (x) (memq x '(nil t text force))))

(put 'allout-show-bodies 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-header-prefix 'safe-local-variable 'stringp)

(put 'allout-primary-bullet 'safe-local-variable 'stringp)

(put 'allout-plain-bullets-string 'safe-local-variable 'stringp)

(put 'allout-distinctive-bullets-string 'safe-local-variable 'stringp)

(put 'allout-use-mode-specific-leader 'safe-local-variable (lambda (x) (or (memq x '(t nil allout-mode-leaders comment-start)) (stringp x))))

(put 'allout-old-style-prefixes 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-stylish-prefixes 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-numbered-bullet 'safe-local-variable (if (fboundp 'string-or-null-p) 'string-or-null-p (lambda (x) (or (stringp x) (null x)))))

(put 'allout-file-xref-bullet 'safe-local-variable (if (fboundp 'string-or-null-p) 'string-or-null-p (lambda (x) (or (stringp x) (null x)))))

(put 'allout-presentation-padding 'safe-local-variable 'integerp)

(put 'allout-layout 'safe-local-variable (lambda (x) (or (numberp x) (listp x) (memq x '(: * + -)))))

(put 'allout-passphrase-verifier-string 'safe-local-variable 'stringp)

(put 'allout-passphrase-hint-string 'safe-local-variable 'stringp)

(autoload 'allout-mode-p "override/allout" "\
Return t if `allout-mode' is active in current buffer.

\(fn)" nil (quote macro))

(autoload 'allout-mode "override/allout" "\
Toggle minor mode for controlling exposure and editing of text outlines.
\\<allout-mode-map-value>

Allout outline mode always runs as a minor mode.

Allout outline mode provides extensive outline oriented
formatting and manipulation.  It enables structural editing of
outlines, as well as navigation and exposure.  It also is
specifically aimed at accommodating syntax-sensitive text like
programming languages.  (For example, see the allout code itself,
which is organized as an allout outline.)

In addition to typical outline navigation and exposure, allout includes:

 - topic-oriented authoring, including keystroke-based topic creation,
   repositioning, promotion/demotion, cut, and paste
 - incremental search with dynamic exposure and reconcealment of hidden text
 - adjustable format, so programming code can be developed in outline-structure
 - easy topic encryption and decryption, symmetric or key-pair
 - \"Hot-spot\" operation, for single-keystroke maneuvering and exposure control
 - integral outline layout, for automatic initial exposure when visiting a file
 - independent extensibility, using comprehensive exposure and authoring hooks

and many other features.

Below is a description of the key bindings, and then description
of special `allout-mode' features and terminology.  See also the
outline menubar additions for quick reference to many of the
features.  Customize `allout-auto-activation' to prepare your
emacs session for automatic activation of `allout-mode'.

The bindings are those listed in `allout-prefixed-keybindings'
and `allout-unprefixed-keybindings'.  We recommend customizing
`allout-command-prefix' to use just `\\C-c' as the command
prefix, if the allout bindings don't conflict with any personal
bindings you have on \\C-c.  In any case, outline structure
navigation and authoring is simplified by positioning the cursor
on an item's bullet character, the \"hot-spot\" -- then you can
invoke allout commands with just the un-prefixed,
un-control-shifted command letters.  This is described further in
the HOT-SPOT Operation section.

        Exposure Control:
        ----------------
\\[allout-hide-current-subtree]   `allout-hide-current-subtree'
\\[allout-show-children] `allout-show-children'
\\[allout-show-current-subtree] `allout-show-current-subtree'
\\[allout-show-current-entry] `allout-show-current-entry'
\\[allout-show-all]   `allout-show-all'

        Navigation:
        ----------
\\[allout-next-visible-heading] `allout-next-visible-heading'
\\[allout-previous-visible-heading] `allout-previous-visible-heading'
\\[allout-up-current-level] `allout-up-current-level'
\\[allout-forward-current-level] `allout-forward-current-level'
\\[allout-backward-current-level] `allout-backward-current-level'
\\[allout-end-of-entry] `allout-end-of-entry'
\\[allout-beginning-of-current-entry] `allout-beginning-of-current-entry' (alternately, goes to hot-spot)
\\[allout-beginning-of-line]  `allout-beginning-of-line' -- like regular beginning-of-line, but
     if immediately repeated cycles to the beginning of the current item
     and then to the hot-spot (if `allout-beginning-of-line-cycles' is set).


        Topic Header Production:
        -----------------------
\\[allout-open-sibtopic] `allout-open-sibtopic' Create a new sibling after current topic.
\\[allout-open-subtopic]   `allout-open-subtopic' ... an offspring of current topic.
\\[allout-open-supertopic] `allout-open-supertopic' ... a sibling of the current topic's parent.

        Topic Level and Prefix Adjustment:
        ---------------------------------
\\[allout-shift-in] `allout-shift-in'   Shift current topic and all offspring deeper
\\[allout-shift-out] `allout-shift-out' ... less deep
\\[allout-rebullet-current-heading] `allout-rebullet-current-heading' Prompt for alternate bullet for
            current topic
\\[allout-rebullet-topic] `allout-rebullet-topic'   Reconcile bullets of topic and
            its' offspring -- distinctive bullets are not changed, others
            are alternated according to nesting depth.
\\[allout-number-siblings] `allout-number-siblings'  Number bullets of topic and siblings --
           the offspring are not affected.
           With repeat count, revoke numbering.

        Topic-oriented Killing and Yanking:
        ----------------------------------
\\[allout-kill-topic] `allout-kill-topic'   Kill current topic, including offspring.
\\[allout-copy-topic-as-kill] `allout-copy-topic-as-kill' Copy current topic, including offspring.
\\[allout-kill-line]     `allout-kill-line'    kill-line, attending to outline structure.
\\[allout-copy-line-as-kill]     `allout-copy-line-as-kill' Copy line but don't delete it.
\\[allout-yank] `allout-yank'        Yank, adjusting depth of yanked topic to
                             depth of heading if yanking into bare topic
                             heading (ie, prefix sans text).
\\[allout-yank-pop]     `allout-yank-pop'       Is to allout-yank as yank-pop is to yank

        Topic-oriented Encryption:
        -------------------------
\\[allout-toggle-current-subtree-encryption] `allout-toggle-current-subtree-encryption'
          Encrypt/Decrypt topic content

        Misc commands:
        -------------
M-x outlineify-sticky       Activate outline mode for current buffer,
                            and establish a default file-var setting
                            for `allout-layout'.
\\[allout-mark-topic]       `allout-mark-topic'
\\[allout-copy-exposed-to-buffer] `allout-copy-exposed-to-buffer'
                            Duplicate outline, sans concealed text, to
                            buffer with name derived from derived from that
                            of current buffer -- \"*BUFFERNAME exposed*\".
\\[allout-flatten-exposed-to-buffer] `allout-flatten-exposed-to-buffer'
                            Like above 'copy-exposed', but convert topic
                            prefixes to section.subsection... numeric
                            format.
\\[customize-variable] allout-auto-activation
                            Prepare Emacs session for allout outline mode
                            auto-activation.

                  Topic Encryption

Outline mode supports gpg encryption of topics, with support for
symmetric and key-pair modes, and auto-encryption of topics
pending encryption on save.

Topics pending encryption are, by default, automatically
encrypted during file saves, including checkpoint saves, to avoid
exposing the plain text of encrypted topics in the file system.
If the content of the topic containing the cursor was encrypted
for a save, it is automatically decrypted for continued editing.

NOTE: A few GnuPG v2 versions improperly preserve incorrect
symmetric decryption keys, preventing entry of the correct key on
subsequent decryption attempts until the cache times-out.  That
can take several minutes.  (Decryption of other entries is not
affected.)  Upgrade your EasyPG version, if you can, and you can
deliberately clear your gpg-agent's cache by sending it a '-HUP'
signal.

See `allout-toggle-current-subtree-encryption' function docstring
and `allout-encrypt-unencrypted-on-saves' customization variable
for details.

                 HOT-SPOT Operation

Hot-spot operation provides a means for easy, single-keystroke outline
navigation and exposure control.

When the text cursor is positioned directly on the bullet character of
a topic, regular characters (a to z) invoke the commands of the
corresponding allout-mode keymap control chars.  For example, \"f\"
would invoke the command typically bound to \"C-c<space>C-f\"
\(\\[allout-forward-current-level] `allout-forward-current-level').

Thus, by positioning the cursor on a topic bullet, you can
execute the outline navigation and manipulation commands with a
single keystroke.  Regular navigation keys (eg, \\[forward-char], \\[next-line]) don't get
this special translation, so you can use them to get out of the
hot-spot and back to normal editing operation.

In allout-mode, the normal beginning-of-line command (\\[allout-beginning-of-line]) is
replaced with one that makes it easy to get to the hot-spot.  If you
repeat it immediately it cycles (if `allout-beginning-of-line-cycles'
is set) to the beginning of the item and then, if you hit it again
immediately, to the hot-spot.  Similarly, `allout-beginning-of-current-entry'
\(\\[allout-beginning-of-current-entry]) moves to the hot-spot when the cursor is already located
at the beginning of the current entry.

                             Extending Allout

Allout exposure and authoring activites all have associated
hooks, by which independent code can cooperate with allout
without changes to the allout core.  Here are key ones:

`allout-mode-hook'
`allout-mode-deactivate-hook' (deprecated)
`allout-mode-off-hook'
`allout-exposure-change-hook'
`allout-structure-added-hook'
`allout-structure-deleted-hook'
`allout-structure-shifted-hook'
`allout-after-copy-or-kill-hook'
`allout-post-undo-hook'

                            Terminology

Topic hierarchy constituents -- TOPICS and SUBTOPICS:

ITEM:   A unitary outline element, including the HEADER and ENTRY text.
TOPIC:  An ITEM and any ITEMs contained within it, ie having greater DEPTH
        and with no intervening items of lower DEPTH than the container.
CURRENT ITEM:
        The visible ITEM most immediately containing the cursor.
DEPTH:  The degree of nesting of an ITEM; it increases with containment.
        The DEPTH is determined by the HEADER PREFIX.  The DEPTH is also
        called the:
LEVEL:  The same as DEPTH.

ANCESTORS:
        Those ITEMs whose TOPICs contain an ITEM.
PARENT: An ITEM's immediate ANCESTOR.  It has a DEPTH one less than that
        of the ITEM.
OFFSPRING:
        The ITEMs contained within an ITEM's TOPIC.
SUBTOPIC:
        An OFFSPRING of its ANCESTOR TOPICs.
CHILD:
        An immediate SUBTOPIC of its PARENT.
SIBLINGS:
        TOPICs having the same PARENT and DEPTH.

Topic text constituents:

HEADER: The first line of an ITEM, include the ITEM PREFIX and HEADER
        text.
ENTRY:  The text content of an ITEM, before any OFFSPRING, but including
        the HEADER text and distinct from the ITEM PREFIX.
BODY:   Same as ENTRY.
PREFIX: The leading text of an ITEM which distinguishes it from normal
        ENTRY text.  Allout recognizes the outline structure according
        to the strict PREFIX format.  It consists of a PREFIX-LEAD string,
        PREFIX-PADDING, and a BULLET.  The BULLET might be followed by a
        number, indicating the ordinal number of the topic among its
        siblings, or an asterisk indicating encryption, plus an optional
        space.  After that is the ITEM HEADER text, which is not part of
        the PREFIX.

        The relative length of the PREFIX determines the nesting DEPTH
        of the ITEM.
PREFIX-LEAD:
        The string at the beginning of a HEADER PREFIX, by default a `.'.
        It can be customized by changing the setting of
        `allout-header-prefix' and then reinitializing `allout-mode'.

        When the PREFIX-LEAD is set to the comment-string of a
        programming language, outline structuring can be embedded in
        program code without interfering with processing of the text
        (by emacs or the language processor) as program code.  This
        setting happens automatically when allout mode is used in
        programming-mode buffers.  See `allout-use-mode-specific-leader'
        docstring for more detail.
PREFIX-PADDING:
        Spaces or asterisks which separate the PREFIX-LEAD and the
        bullet, determining the ITEM's DEPTH.
BULLET: A character at the end of the ITEM PREFIX, it must be one of
        the characters listed on `allout-plain-bullets-string' or
        `allout-distinctive-bullets-string'.  When creating a TOPIC,
        plain BULLETs are by default used, according to the DEPTH of the
        TOPIC.  Choice among the distinctive BULLETs is offered when you
        provide a universal argugment (\\[universal-argument]) to the
        TOPIC creation command, or when explictly rebulleting a TOPIC.  The
        significance of the various distinctive bullets is purely by
        convention.  See the documentation for the above bullet strings for
        more details.
EXPOSURE:
        The state of a TOPIC which determines the on-screen visibility
        of its OFFSPRING and contained ENTRY text.
CONCEALED:
        TOPICs and ENTRY text whose EXPOSURE is inhibited.  Concealed
        text is represented by \"...\" ellipses.

        CONCEALED TOPICs are effectively collapsed within an ANCESTOR.
CLOSED: A TOPIC whose immediate OFFSPRING and body-text is CONCEALED.
OPEN:	A TOPIC that is not CLOSED, though its OFFSPRING or BODY may be.

\(fn &optional ARG)" t nil)

(defalias 'outlinify-sticky 'outlineify-sticky)

(autoload 'outlineify-sticky "override/allout" "\
Activate outline mode and establish file var so it is started subsequently.

See `allout-layout' and customization of `allout-auto-activation'
for details on preparing emacs for automatic allout activation.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (ediff-toggle-use-toolbar ediff-toggle-multiframe)
;;;;;;  "override/ediff-util" "override/ediff-util.el" (20488 45440))
;;; Generated autoloads from override/ediff-util.el

(autoload 'ediff-toggle-multiframe "override/ediff-util" "\
Switch from multiframe display to single-frame display and back.
To change the default, set the variable `ediff-window-setup-function',
which see.

\(fn)" t nil)

(autoload 'ediff-toggle-use-toolbar "override/ediff-util" "\
Enable or disable Ediff toolbar.
Works only in versions of Emacs that support toolbars.
To change the default, set the variable `ediff-use-toolbar-p', which see.

\(fn)" t nil)

;;;***

;;;### (autoloads (ido-completing-read ido-read-directory-name ido-read-file-name
;;;;;;  ido-read-buffer ido-dired ido-insert-file ido-write-file
;;;;;;  ido-find-file-other-frame ido-display-file ido-find-file-read-only-other-frame
;;;;;;  ido-find-file-read-only-other-window ido-find-file-read-only
;;;;;;  ido-find-alternate-file ido-find-file-other-window ido-find-file
;;;;;;  ido-find-file-in-dir ido-switch-buffer-other-frame ido-insert-buffer
;;;;;;  ido-kill-buffer ido-display-buffer ido-switch-buffer-other-window
;;;;;;  ido-switch-buffer ido-mode ido-mode) "override/ido" "override/ido.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from override/ido.el

(defvar ido-mode nil "\
Determines for which functional group (buffer and files) ido behavior
should be enabled.  The following values are possible:
- `buffer': Turn only on ido buffer behavior (switching, killing,
  displaying...)
- `file': Turn only on ido file behavior (finding, writing, inserting...)
- `both': Turn on ido buffer and file behavior.
- `nil': Turn off any ido switching.

Setting this variable directly does not take effect;
use either \\[customize] or the function `ido-mode'.")

(custom-autoload 'ido-mode "override/ido" nil)

(autoload 'ido-mode "override/ido" "\
Toggle ido mode on or off.
With ARG, turn ido-mode on if arg is positive, off otherwise.
Turning on ido-mode will remap (via a minor-mode keymap) the default
keybindings for the `find-file' and `switch-to-buffer' families of
commands to the ido versions of these functions.
However, if ARG arg equals 'files, remap only commands for files, or
if it equals 'buffers, remap only commands for buffer switching.
This function also adds a hook to the minibuffer.

\(fn &optional ARG)" t nil)

(autoload 'ido-switch-buffer "override/ido" "\
Switch to another buffer.
The buffer is displayed according to `ido-default-buffer-method' -- the
default is to show it in the same window, unless it is already visible
in another frame.

As you type in a string, all of the buffers matching the string are
displayed if substring-matching is used (default).  Look at
`ido-enable-prefix' and `ido-toggle-prefix'.  When you have found the
buffer you want, it can then be selected.  As you type, most keys have
their normal keybindings, except for the following: \\<ido-buffer-completion-map>

RET Select the buffer at the front of the list of matches.  If the
list is empty, possibly prompt to create new buffer.

\\[ido-select-text] Select the current prompt as the buffer.
If no buffer is found, prompt for a new one.

\\[ido-next-match] Put the first element at the end of the list.
\\[ido-prev-match] Put the last element at the start of the list.
\\[ido-complete] Complete a common suffix to the current string that
matches all buffers.  If there is only one match, select that buffer.
If there is no common suffix, show a list of all matching buffers
in a separate window.
\\[ido-edit-input] Edit input string.
\\[ido-fallback-command] Fallback to non-ido version of current command.
\\[ido-toggle-regexp] Toggle regexp searching.
\\[ido-toggle-prefix] Toggle between substring and prefix matching.
\\[ido-toggle-case] Toggle case-sensitive searching of buffer names.
\\[ido-completion-help] Show list of matching buffers in separate window.
\\[ido-enter-find-file] Drop into `ido-find-file'.
\\[ido-kill-buffer-at-head] Kill buffer at head of buffer list.
\\[ido-toggle-ignore] Toggle ignoring buffers listed in `ido-ignore-buffers'.

\(fn)" t nil)

(autoload 'ido-switch-buffer-other-window "override/ido" "\
Switch to another buffer and show it in another window.
The buffer name is selected interactively by typing a substring.
For details of keybindings, see `ido-switch-buffer'.

\(fn)" t nil)

(autoload 'ido-display-buffer "override/ido" "\
Display a buffer in another window but don't select it.
The buffer name is selected interactively by typing a substring.
For details of keybindings, see `ido-switch-buffer'.

\(fn)" t nil)

(autoload 'ido-kill-buffer "override/ido" "\
Kill a buffer.
The buffer name is selected interactively by typing a substring.
For details of keybindings, see `ido-switch-buffer'.

\(fn)" t nil)

(autoload 'ido-insert-buffer "override/ido" "\
Insert contents of a buffer in current buffer after point.
The buffer name is selected interactively by typing a substring.
For details of keybindings, see `ido-switch-buffer'.

\(fn)" t nil)

(autoload 'ido-switch-buffer-other-frame "override/ido" "\
Switch to another buffer and show it in another frame.
The buffer name is selected interactively by typing a substring.
For details of keybindings, see `ido-switch-buffer'.

\(fn)" t nil)

(autoload 'ido-find-file-in-dir "override/ido" "\
Switch to another file starting from DIR.

\(fn DIR)" t nil)

(autoload 'ido-find-file "override/ido" "\
Edit file with name obtained via minibuffer.
The file is displayed according to `ido-default-file-method' -- the
default is to show it in the same window, unless it is already
visible in another frame.

The file name is selected interactively by typing a substring.  As you
type in a string, all of the filenames matching the string are displayed
if substring-matching is used (default).  Look at `ido-enable-prefix' and
`ido-toggle-prefix'.  When you have found the filename you want, it can
then be selected.  As you type, most keys have their normal keybindings,
except for the following: \\<ido-file-completion-map>

RET Select the file at the front of the list of matches.  If the
list is empty, possibly prompt to create new file.

\\[ido-select-text] Select the current prompt as the buffer or file.
If no buffer or file is found, prompt for a new one.

\\[ido-next-match] Put the first element at the end of the list.
\\[ido-prev-match] Put the last element at the start of the list.
\\[ido-complete] Complete a common suffix to the current string that
matches all files.  If there is only one match, select that file.
If there is no common suffix, show a list of all matching files
in a separate window.
\\[ido-edit-input] Edit input string (including directory).
\\[ido-prev-work-directory] or \\[ido-next-work-directory] go to previous/next directory in work directory history.
\\[ido-merge-work-directories] search for file in the work directory history.
\\[ido-forget-work-directory] removes current directory from the work directory history.
\\[ido-prev-work-file] or \\[ido-next-work-file] cycle through the work file history.
\\[ido-wide-find-file-or-pop-dir] and \\[ido-wide-find-dir-or-delete-dir] prompts and uses find to locate files or directories.
\\[ido-make-directory] prompts for a directory to create in current directory.
\\[ido-fallback-command] Fallback to non-ido version of current command.
\\[ido-toggle-regexp] Toggle regexp searching.
\\[ido-toggle-prefix] Toggle between substring and prefix matching.
\\[ido-toggle-case] Toggle case-sensitive searching of file names.
\\[ido-toggle-literal] Toggle literal reading of this file.
\\[ido-completion-help] Show list of matching files in separate window.
\\[ido-toggle-ignore] Toggle ignoring files listed in `ido-ignore-files'.

\(fn)" t nil)

(autoload 'ido-find-file-other-window "override/ido" "\
Switch to another file and show it in another window.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-find-alternate-file "override/ido" "\
Switch to another file and show it in another window.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-find-file-read-only "override/ido" "\
Edit file read-only with name obtained via minibuffer.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-find-file-read-only-other-window "override/ido" "\
Edit file read-only in other window with name obtained via minibuffer.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-find-file-read-only-other-frame "override/ido" "\
Edit file read-only in other frame with name obtained via minibuffer.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-display-file "override/ido" "\
Display a file in another window but don't select it.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-find-file-other-frame "override/ido" "\
Switch to another file and show it in another frame.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-write-file "override/ido" "\
Write current buffer to a file.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-insert-file "override/ido" "\
Insert contents of file in current buffer.
The file name is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-dired "override/ido" "\
Call `dired' the ido way.
The directory is selected interactively by typing a substring.
For details of keybindings, see `ido-find-file'.

\(fn)" t nil)

(autoload 'ido-read-buffer "override/ido" "\
Ido replacement for the built-in `read-buffer'.
Return the name of a buffer selected.
PROMPT is the prompt to give to the user.  DEFAULT if given is the default
buffer to be selected, which will go to the front of the list.
If REQUIRE-MATCH is non-nil, an existing buffer must be selected.

\(fn PROMPT &optional DEFAULT REQUIRE-MATCH)" nil nil)

(autoload 'ido-read-file-name "override/ido" "\
Ido replacement for the built-in `read-file-name'.
Read file name, prompting with PROMPT and completing in directory DIR.
See `read-file-name' for additional parameters.

\(fn PROMPT &optional DIR DEFAULT-FILENAME MUSTMATCH INITIAL PREDICATE)" nil nil)

(autoload 'ido-read-directory-name "override/ido" "\
Ido replacement for the built-in `read-directory-name'.
Read directory name, prompting with PROMPT and completing in directory DIR.
See `read-directory-name' for additional parameters.

\(fn PROMPT &optional DIR DEFAULT-DIRNAME MUSTMATCH INITIAL)" nil nil)

(autoload 'ido-completing-read "override/ido" "\
Ido replacement for the built-in `completing-read'.
Read a string in the minibuffer with ido-style completion.
PROMPT is a string to prompt with; normally it ends in a colon and a space.
CHOICES is a list of strings which are the possible completions.
PREDICATE and INHERIT-INPUT-METHOD is currently ignored; it is included
 to be compatible with `completing-read'.
If REQUIRE-MATCH is non-nil, the user is not allowed to exit unless
 the input is (or completes to) an element of CHOICES or is null.
 If the input is null, `ido-completing-read' returns DEF, or an empty
 string if DEF is nil, regardless of the value of REQUIRE-MATCH.
If INITIAL-INPUT is non-nil, insert it in the minibuffer initially,
 with point positioned at the end.
HIST, if non-nil, specifies a history list.
DEF, if non-nil, is the default value.

\(fn PROMPT CHOICES &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)" nil nil)

;;;***

;;;### (autoloads (sc-cite-original) "override/supercite" "override/supercite.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from override/supercite.el

(autoload 'sc-cite-original "override/supercite" "\
Workhorse citing function which performs the initial citation.
This is callable from the various mail and news readers' reply
function according to the agreed upon standard.  See the associated
info node `(SC)Top' for more details.
`sc-cite-original' does not do any yanking of the
original message but it does require a few things:

     1) The reply buffer is the current buffer.

     2) The original message has been yanked and inserted into the
        reply buffer.

     3) Verbose mail headers from the original message have been
        inserted into the reply buffer directly before the text of the
        original message.

     4) Point is at the beginning of the verbose headers.

     5) Mark is at the end of the body of text to be cited.

The region need not be active (and typically isn't when this
function is called).  Also, the hook `sc-pre-hook' is run before,
and `sc-post-hook' is run after the guts of this function.

\(fn)" nil nil)

;;;***

;;;### (autoloads (ace-jump-mode) "site-lisp/ace-jump-mode/ace-jump-mode"
;;;;;;  "site-lisp/ace-jump-mode/ace-jump-mode.el" (20488 45629))
;;; Generated autoloads from site-lisp/ace-jump-mode/ace-jump-mode.el

(autoload 'ace-jump-mode "site-lisp/ace-jump-mode/ace-jump-mode" "\
AceJump mode is a minor mode for you to quick jump to a
position in the curret view.
   There is three submode now:
     `ace-jump-char-mode'
     `ace-jump-word-mode'
     `ace-jump-line-mode'

You can specify the sequence about which mode should enter
by customize `ace-jump-mode-submode-list'.

If you do not want to query char for word mode, you can change
`ace-jump-word-mode-use-query-char' to nil.

If you don't like the default move keys, you can change it by
setting `ace-jump-mode-move-keys'.

You can constrol whether use the case sensitive via
`ace-jump-mode-case-fold'.

\(fn &optional PREFIX)" t nil)

;;;***

;;;### (autoloads (ascii-off ascii-on ascii-display ascii-customize)
;;;;;;  "site-lisp/ascii" "site-lisp/ascii.el" (20488 45440))
;;; Generated autoloads from site-lisp/ascii.el

(autoload 'ascii-customize "site-lisp/ascii" "\
Customize ASCII options.

\(fn)" t nil)

(autoload 'ascii-display "site-lisp/ascii" "\
Toggle ASCII code display.

If ARG is null, toggle ASCII code display.
If ARG is a number and is greater than zero, turn on display; otherwise, turn
off display.
If ARG is anything else, turn on display.

\(fn &optional ARG)" t nil)

(autoload 'ascii-on "site-lisp/ascii" "\
Turn on ASCII code display.

\(fn)" t nil)

(autoload 'ascii-off "site-lisp/ascii" "\
Turn off ASCII code display.

\(fn)" t nil)

;;;***

;;;### (autoloads (turn-on-bib-cite bib-cite-minor-mode) "site-lisp/auctex/bib-cite"
;;;;;;  "site-lisp/auctex/bib-cite.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/bib-cite.el

(autoload 'bib-cite-minor-mode "site-lisp/auctex/bib-cite" "\
Toggle bib-cite mode.
When bib-cite mode is enabled, citations, labels and refs are highlighted
when the mouse is over them.  Clicking on these highlights with [mouse-2]
runs bib-find, and [mouse-3] runs bib-display.

\(fn ARG)" t nil)

(autoload 'turn-on-bib-cite "site-lisp/auctex/bib-cite" "\
Unconditionally turn on Bib Cite mode.

\(fn)" nil nil)

;;;***

;;;### (autoloads (context-mode) "site-lisp/auctex/context" "site-lisp/auctex/context.el"
;;;;;;  (20488 45639))
;;; Generated autoloads from site-lisp/auctex/context.el

(defalias 'ConTeXt-mode 'context-mode)

(autoload 'context-mode "site-lisp/auctex/context" "\
Major mode in AUCTeX for editing ConTeXt files.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of context-mode-hook.

\(fn)" t nil)

;;;***

;;;### (autoloads (context-en-mode) "site-lisp/auctex/context-en"
;;;;;;  "site-lisp/auctex/context-en.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/context-en.el

(autoload 'context-en-mode "site-lisp/auctex/context-en" "\
Major mode for editing files for ConTeXt using its english interface.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of TeX-mode-hook, and then the value
of context-mode-hook.

\(fn)" t nil)

;;;***

;;;### (autoloads (context-nl-mode) "site-lisp/auctex/context-nl"
;;;;;;  "site-lisp/auctex/context-nl.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/context-nl.el

(autoload 'context-nl-mode "site-lisp/auctex/context-nl" "\
Major mode for editing files for ConTeXt using its dutch interface.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of TeX-mode-hook, and then the value
of context-mode-hook.

\(fn)" t nil)

;;;***

;;;### (autoloads (font-latex-setup) "site-lisp/auctex/font-latex"
;;;;;;  "site-lisp/auctex/font-latex.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/font-latex.el

(autoload 'font-latex-setup "site-lisp/auctex/font-latex" "\
Setup this buffer for LaTeX font-lock.  Usually called from a hook.

\(fn)" nil nil)

;;;***

;;;### (autoloads (docTeX-mode TeX-latex-mode BibTeX-auto-store)
;;;;;;  "site-lisp/auctex/latex" "site-lisp/auctex/latex.el" (20488
;;;;;;  45639))
;;; Generated autoloads from site-lisp/auctex/latex.el

(autoload 'BibTeX-auto-store "site-lisp/auctex/latex" "\
This function should be called from `bibtex-mode-hook'.
It will setup BibTeX to store keys in an auto file.

\(fn)" nil nil)

(add-to-list 'auto-mode-alist '("\\.drv\\'" . latex-mode))

(autoload 'TeX-latex-mode "site-lisp/auctex/latex" "\
Major mode in AUCTeX for editing LaTeX files.
See info under AUCTeX for full documentation.

Special commands:
\\{LaTeX-mode-map}

Entering LaTeX mode calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `LaTeX-mode-hook'.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.dtx\\'" . doctex-mode))

(autoload 'docTeX-mode "site-lisp/auctex/latex" "\
Major mode in AUCTeX for editing .dtx files derived from `LaTeX-mode'.
Runs `LaTeX-mode', sets a few variables and
runs the hooks in `docTeX-mode-hook'.

\(fn)" t nil)

(defalias 'TeX-doctex-mode 'docTeX-mode)

;;;***

;;;### (autoloads (multi-prompt-key-value multi-prompt) "site-lisp/auctex/multi-prompt"
;;;;;;  "site-lisp/auctex/multi-prompt.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/multi-prompt.el

(autoload 'multi-prompt "site-lisp/auctex/multi-prompt" "\
Completing prompt for a list of strings.  
The first argument SEPARATOR should be the string (of length 1) to
separate the elements in the list.  The second argument UNIQUE should
be non-nil, if each element must be unique.  The remaining elements
are the arguments to `completing-read'.  See that.

\(fn SEPARATOR UNIQUE PROMPT TABLE &optional MP-PREDICATE REQUIRE-MATCH INITIAL HISTORY)" nil nil)

(autoload 'multi-prompt-key-value "site-lisp/auctex/multi-prompt" "\
Read multiple strings, with completion and key=value support.
PROMPT is a string to prompt with, usually ending with a colon
and a space.  TABLE is an alist.  The car of each element should
be a string representing a key and the optional cdr should be a
list with strings to be used as values for the key.

See the documentation for `completing-read' for details on the
other arguments: PREDICATE, REQUIRE-MATCH, INITIAL-INPUT, HIST,
DEF, and INHERIT-INPUT-METHOD.

The return value is the string as entered in the minibuffer.

\(fn PROMPT TABLE &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)" nil nil)

;;;***

;;;### (autoloads (TeX-submit-bug-report ams-tex-mode TeX-auto-generate-global
;;;;;;  TeX-auto-generate TeX-plain-tex-mode TeX-tex-mode) "site-lisp/auctex/tex"
;;;;;;  "site-lisp/auctex/tex.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/tex.el

(autoload 'TeX-tex-mode "site-lisp/auctex/tex" "\
Major mode in AUCTeX for editing TeX or LaTeX files.
Tries to guess whether this file is for plain TeX or LaTeX.

The algorithm is as follows:

   1) if the file is empty or `TeX-force-default-mode' is not set to nil,
      `TeX-default-mode' is chosen
   2) If \\documentstyle or \\begin{, \\section{, \\part{ or \\chapter{ is
      found, `latex-mode' is selected.
   3) Otherwise, use `plain-tex-mode'

\(fn)" t nil)

(autoload 'TeX-plain-tex-mode "site-lisp/auctex/tex" "\
Major mode in AUCTeX for editing plain TeX files.
See info under AUCTeX for documentation.

Special commands:
\\{plain-TeX-mode-map}

Entering `plain-tex-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of plain-TeX-mode-hook.

\(fn)" t nil)

(autoload 'TeX-auto-generate "site-lisp/auctex/tex" "\
Generate style file for TEX and store it in AUTO.
If TEX is a directory, generate style files for all files in the directory.

\(fn TEX AUTO)" t nil)

(autoload 'TeX-auto-generate-global "site-lisp/auctex/tex" "\
Create global auto directory for global TeX macro definitions.

\(fn)" t nil)

(autoload 'ams-tex-mode "site-lisp/auctex/tex" "\
Major mode in AUCTeX for editing AmS-TeX files.
See info under AUCTeX for documentation.

Special commands:
\\{AmSTeX-mode-map}

Entering AmS-tex-mode calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `AmS-TeX-mode-hook'.

\(fn)" t nil)

(autoload 'TeX-submit-bug-report "site-lisp/auctex/tex" "\
Submit a bug report on AUCTeX via mail.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from (X)Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your AUCTeX version and AUCTeX configuration.

\(fn)" t nil)

;;;***

;;;### (autoloads (LaTeX-install-toolbar TeX-install-toolbar) "site-lisp/auctex/tex-bar"
;;;;;;  "site-lisp/auctex/tex-bar.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/tex-bar.el

(autoload 'TeX-install-toolbar "site-lisp/auctex/tex-bar" "\
Install toolbar buttons for TeX mode.

\(fn)" t nil)

(autoload 'LaTeX-install-toolbar "site-lisp/auctex/tex-bar" "\
Install toolbar buttons for LaTeX mode.

\(fn)" t nil)

;;;***

;;;### (autoloads nil "site-lisp/auctex/tex-fold" "site-lisp/auctex/tex-fold.el"
;;;;;;  (20488 45639))
;;; Generated autoloads from site-lisp/auctex/tex-fold.el
 (autoload 'TeX-fold-mode "tex-fold" "Minor mode for hiding and revealing macros and environments." t)

(defalias 'tex-fold-mode 'TeX-fold-mode)

;;;***

;;;### (autoloads (tex-font-setup) "site-lisp/auctex/tex-font" "site-lisp/auctex/tex-font.el"
;;;;;;  (20488 45639))
;;; Generated autoloads from site-lisp/auctex/tex-font.el

(autoload 'tex-font-setup "site-lisp/auctex/tex-font" "\
Setup font lock support for TeX.

\(fn)" nil nil)

;;;***

;;;### (autoloads (TeX-texinfo-mode) "site-lisp/auctex/tex-info"
;;;;;;  "site-lisp/auctex/tex-info.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/tex-info.el

(defalias 'Texinfo-mode 'texinfo-mode)

(autoload 'TeX-texinfo-mode "site-lisp/auctex/tex-info" "\
Major mode in AUCTeX for editing Texinfo files.

Special commands:
\\{Texinfo-mode-map}

Entering Texinfo mode calls the value of `text-mode-hook'  and then the
value of `Texinfo-mode-hook'.

\(fn)" t nil)

;;;***

;;;### (autoloads (japanese-latex-mode japanese-plain-tex-mode) "site-lisp/auctex/tex-jp"
;;;;;;  "site-lisp/auctex/tex-jp.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/tex-jp.el

(autoload 'japanese-plain-tex-mode "site-lisp/auctex/tex-jp" "\
Major mode in AUCTeX for editing Japanese plain TeX files.
Set `japanese-TeX-mode' to t, and enter `TeX-plain-tex-mode'.

\(fn)" t nil)

(autoload 'japanese-latex-mode "site-lisp/auctex/tex-jp" "\
Major mode in AUCTeX for editing Japanese LaTeX files.
Set `japanese-TeX-mode' to t, and enter `TeX-latex-mode'.

\(fn)" t nil)

;;;***

;;;### (autoloads (texmathp-match-switch texmathp) "site-lisp/auctex/texmathp"
;;;;;;  "site-lisp/auctex/texmathp.el" (20488 45639))
;;; Generated autoloads from site-lisp/auctex/texmathp.el

(autoload 'texmathp "site-lisp/auctex/texmathp" "\
Determine if point is inside (La)TeX math mode.
Returns t or nil.  Additional info is placed into `texmathp-why'.
The functions assumes that you have (almost) syntactically correct (La)TeX in
the buffer.
See the variable `texmathp-tex-commands' about which commands are checked.

\(fn)" t nil)

(autoload 'texmathp-match-switch "site-lisp/auctex/texmathp" "\
Search backward for any of the math switches.
Limit searched to BOUND.

\(fn BOUND)" nil nil)

;;;***

;;;### (autoloads nil "site-lisp/auctex/toolbar-x" "site-lisp/auctex/toolbar-x.el"
;;;;;;  (20488 45639))
;;; Generated autoloads from site-lisp/auctex/toolbar-x.el
 (autoload 'toolbarx-install-toolbar "toolbar-x")

;;;***

;;;### (autoloads (bm-previous-mouse bm-previous bm-next-mouse bm-next
;;;;;;  bm-toggle-mouse bm-toggle) "site-lisp/bm/bm" "site-lisp/bm/bm.el"
;;;;;;  (20488 45645))
;;; Generated autoloads from site-lisp/bm/bm.el

(autoload 'bm-toggle "site-lisp/bm/bm" "\
Toggle bookmark at point.

\(fn)" t nil)

(autoload 'bm-toggle-mouse "site-lisp/bm/bm" "\
Toggle a bookmark with a mouse click.
EV is the mouse event.

\(fn EV)" t nil)

(autoload 'bm-next "site-lisp/bm/bm" "\
Goto next bookmark.

\(fn)" t nil)

(autoload 'bm-next-mouse "site-lisp/bm/bm" "\
Go to the next bookmark with the scroll wheel.
EV is the mouse event.

\(fn EV)" t nil)

(autoload 'bm-previous "site-lisp/bm/bm" "\
Goto previous bookmark.

\(fn)" t nil)

(autoload 'bm-previous-mouse "site-lisp/bm/bm" "\
Go to the previous bookmark with the scroll wheel.
EV is the mouse event.

\(fn EV)" t nil)

;;;***

;;;### (autoloads (bmkp-version) "site-lisp/bookmark-plus/bookmark+"
;;;;;;  "site-lisp/bookmark-plus/bookmark+.el" (20488 45649))
;;; Generated autoloads from site-lisp/bookmark-plus/bookmark+.el

(defconst bmkp-version-number "3.4.1")

(autoload 'bmkp-version "site-lisp/bookmark-plus/bookmark+" "\
Show version number of library `bookmark+.el'.

\(fn)" t nil)

;;;***

;;;### (autoloads (bmkp-delete-bookmarks bmkp-delete-all-temporary-bookmarks
;;;;;;  bmkp-make-bookmark-savable bmkp-make-bookmark-temporary bmkp-toggle-temporary-bookmark
;;;;;;  bmkp-toggle-autotemp-on-set bmkp-delete-all-autonamed-for-this-buffer
;;;;;;  bmkp-set-autonamed-regexp-region bmkp-set-autonamed-regexp-buffer
;;;;;;  bmkp-set-autonamed-bookmark-at-line bmkp-set-autonamed-bookmark
;;;;;;  bmkp-toggle-autonamed-bookmark-set/delete bmkp-previous-bookmark-w32-repeat
;;;;;;  bmkp-next-bookmark-w32-repeat bmkp-previous-bookmark-w32
;;;;;;  bmkp-next-bookmark-w32 bmkp-previous-bookmark-this-buffer-repeat
;;;;;;  bmkp-next-bookmark-this-buffer-repeat bmkp-previous-bookmark-this-buffer
;;;;;;  bmkp-next-bookmark-this-buffer bmkp-previous-bookmark-this-file-repeat
;;;;;;  bmkp-next-bookmark-this-file-repeat bmkp-previous-bookmark-this-file
;;;;;;  bmkp-next-bookmark-this-file bmkp-previous-bookmark-this-file/buffer-repeat
;;;;;;  bmkp-next-bookmark-this-file/buffer-repeat bmkp-previous-bookmark-this-file/buffer
;;;;;;  bmkp-next-bookmark-this-file/buffer bmkp-previous-bookmark-repeat
;;;;;;  bmkp-next-bookmark-repeat bmkp-previous-bookmark bmkp-next-bookmark
;;;;;;  bmkp-cycle-this-buffer-other-window bmkp-cycle-this-buffer
;;;;;;  bmkp-cycle-this-file-other-window bmkp-cycle-this-file bmkp-cycle-this-file/buffer-other-window
;;;;;;  bmkp-cycle-this-file/buffer bmkp-cycle-other-window bmkp-cycle
;;;;;;  bmkp-jump-in-navlist-other-window bmkp-jump-in-navlist bmkp-autofile-some-tags-regexp-jump-other-window
;;;;;;  bmkp-autofile-some-tags-regexp-jump bmkp-autofile-some-tags-jump-other-window
;;;;;;  bmkp-autofile-some-tags-jump bmkp-autofile-all-tags-regexp-jump-other-window
;;;;;;  bmkp-autofile-all-tags-regexp-jump bmkp-autofile-all-tags-jump-other-window
;;;;;;  bmkp-autofile-all-tags-jump bmkp-autofile-jump-other-window
;;;;;;  bmkp-autofile-jump bmkp-file-this-dir-some-tags-regexp-jump-other-window
;;;;;;  bmkp-file-this-dir-some-tags-regexp-jump bmkp-file-this-dir-some-tags-jump-other-window
;;;;;;  bmkp-file-this-dir-some-tags-jump bmkp-file-this-dir-all-tags-regexp-jump-other-window
;;;;;;  bmkp-file-this-dir-all-tags-regexp-jump bmkp-file-this-dir-all-tags-jump-other-window
;;;;;;  bmkp-file-this-dir-all-tags-jump bmkp-file-some-tags-regexp-jump-other-window
;;;;;;  bmkp-file-some-tags-regexp-jump bmkp-file-some-tags-jump-other-window
;;;;;;  bmkp-file-some-tags-jump bmkp-file-all-tags-regexp-jump-other-window
;;;;;;  bmkp-file-all-tags-regexp-jump bmkp-file-all-tags-jump-other-window
;;;;;;  bmkp-file-all-tags-jump bmkp-some-tags-regexp-jump-other-window
;;;;;;  bmkp-some-tags-regexp-jump bmkp-some-tags-jump-other-window
;;;;;;  bmkp-some-tags-jump bmkp-all-tags-regexp-jump-other-window
;;;;;;  bmkp-all-tags-regexp-jump bmkp-all-tags-jump-other-window
;;;;;;  bmkp-all-tags-jump bmkp-w3m-jump-other-window bmkp-w3m-jump
;;;;;;  bmkp-w32-browser-jump bmkp-url-jump-other-window bmkp-url-jump
;;;;;;  bmkp-variable-list-jump bmkp-this-buffer-jump-other-window
;;;;;;  bmkp-this-buffer-jump bmkp-temporary-jump-other-window bmkp-temporary-jump
;;;;;;  bmkp-specific-files-jump-other-window bmkp-specific-files-jump
;;;;;;  bmkp-specific-buffers-jump-other-window bmkp-specific-buffers-jump
;;;;;;  bmkp-remote-file-jump-other-window bmkp-remote-file-jump
;;;;;;  bmkp-region-jump-other-window bmkp-region-jump bmkp-non-file-jump-other-window
;;;;;;  bmkp-non-file-jump bmkp-man-jump-other-window bmkp-man-jump
;;;;;;  bmkp-local-file-jump-other-window bmkp-local-file-jump bmkp-info-jump-other-window
;;;;;;  bmkp-info-jump bmkp-image-jump-other-window bmkp-image-jump
;;;;;;  bmkp-gnus-jump-other-window bmkp-gnus-jump bmkp-file-this-dir-jump-other-window
;;;;;;  bmkp-file-this-dir-jump bmkp-file-jump-other-window bmkp-file-jump
;;;;;;  bmkp-dired-this-dir-jump-other-window bmkp-dired-this-dir-jump
;;;;;;  bmkp-dired-jump-other-window bmkp-dired-jump bmkp-desktop-jump
;;;;;;  bmkp-bookmark-list-jump bmkp-autonamed-this-buffer-jump-other-window
;;;;;;  bmkp-autonamed-this-buffer-jump bmkp-autonamed-jump-other-window
;;;;;;  bmkp-autonamed-jump bmkp-jump-to-type-other-window bmkp-jump-to-type
;;;;;;  bmkp-dired-subdirs bmkp-set-variable-list-bookmark bmkp-desktop-delete
;;;;;;  bmkp-desktop-read bmkp-desktop-change-dir bmkp-set-desktop-bookmark
;;;;;;  bmkp-bookmark-file-jump bmkp-set-bookmark-file-bookmark bmkp-list-defuns-in-commands-file
;;;;;;  bmkp-describe-bookmark-internals bmkp-describe-bookmark bmkp-purge-notags-autofiles
;;;;;;  bmkp-autofile-remove-tags bmkp-autofile-add-tags bmkp-autofile-set
;;;;;;  bmkp-file-target-set bmkp-url-target-set bmkp-paste-replace-tags
;;;;;;  bmkp-paste-add-tags bmkp-copy-tags bmkp-rename-tag bmkp-remove-tags-from-all
;;;;;;  bmkp-remove-tags bmkp-set-tag-value bmkp-set-tag-value-for-navlist
;;;;;;  bmkp-add-tags bmkp-remove-all-tags bmkp-list-all-tags bmkp-unomit-all
;;;;;;  bmkp-navlist-bmenu-list bmkp-this-buffer-bmenu-list bmkp-this-file-bmenu-list
;;;;;;  bmkp-this-file/buffer-bmenu-list bmkp-choose-navlist-of-type
;;;;;;  bmkp-choose-navlist-from-bookmark-list bmkp-crosshairs-highlight
;;;;;;  bmkp-empty-file bmkp-switch-bookmark-file-create bmkp-switch-to-last-bookmark-file
;;;;;;  bmkp-switch-bookmark-file bmkp-revert-bookmark-file bmkp-make-function-bookmark
;;;;;;  bmkp-toggle-saving-bookmark-file bmkp-save-menu-list-state
;;;;;;  bmkp-toggle-saving-menu-list-state bmkp-toggle-bookmark-set-refreshes
;;;;;;  bmkp-send-bug-report bmkp-edit-tags-send bmkp-edit-tags bmkp-edit-bookmark-record-send
;;;;;;  bmkp-edit-bookmark-record bmkp-edit-bookmark-records-send
;;;;;;  bmkp-edit-bookmark-name-and-file bookmark-load bookmark-save
;;;;;;  bookmark-delete bookmark-insert bookmark-rename bookmark-insert-location
;;;;;;  bookmark-relocate bookmark-jump-other-window bookmark-jump
;;;;;;  bookmark-yank-word bookmark-set bookmark-edit-annotation
;;;;;;  bookmark-send-edited-annotation bookmark-edit-annotation-mode
;;;;;;  bmkp-w3m-allow-multi-tabs bmkp-use-region bmkp-temporary-bookmarking-mode-lighter
;;;;;;  bmkp-guess-default-handler-for-file-flag bmkp-this-file/buffer-cycle-sort-comparer
;;;;;;  bmkp-temporary-bookmarking-mode-hook bmkp-tags-for-completion
;;;;;;  bmkp-su-or-sudo-regexp bmkp-sort-comparer bmkp-show-end-of-region
;;;;;;  bmkp-sequence-jump-display-function bmkp-save-new-location-flag
;;;;;;  bmkp-region-search-size bmkp-prompt-for-tags-flag bmkp-other-window-pop-to-flag
;;;;;;  bmkp-new-bookmark-default-names bmkp-menu-popup-max-length
;;;;;;  bmkp-incremental-filter-delay bmkp-handle-region-function
;;;;;;  bmkp-desktop-no-save-vars bmkp-default-handlers-for-file-types
;;;;;;  bmkp-default-bookmark-name bmkp-crosshairs-flag bmkp-count-multi-mods-as-one-flag
;;;;;;  bmkp-bookmark-name-length-max bmkp-autotemp-bookmark-predicates
;;;;;;  bmkp-autoname-format bmkp-autoname-bookmark-function bmkp-auto-idle-bookmark-mode-set-function
;;;;;;  bmkp-auto-idle-bookmark-mode-lighter bmkp-auto-idle-bookmark-mode-delay
;;;;;;  bmkp-auto-idle-bookmark-min-distance) "site-lisp/bookmark-plus/bookmark+-1"
;;;;;;  "site-lisp/bookmark-plus/bookmark+-1.el" (20488 45649))
;;; Generated autoloads from site-lisp/bookmark-plus/bookmark+-1.el

(defvar bmkp-auto-idle-bookmark-min-distance 1000 "\
*Minimum number of chars between automatic bookmark positions.")

(custom-autoload 'bmkp-auto-idle-bookmark-min-distance "site-lisp/bookmark-plus/bookmark+-1" t)

(unless (fboundp 'define-minor-mode) (defcustom bmkp-auto-idle-bookmark-mode nil "*Non-nil means that bookmarks are created periodically automatically.\nSetting this variable directly does not take effect;\nuse either \\[customize] or command `bmkp-auto-idle-bookmark-mode'." :set (lambda (symbol value) (bmkp-auto-idle-bookmark-mode (if value 1 -1))) :initialize 'custom-initialize-default :type 'boolean :group 'bookmark-plus :require 'bookmark+))

(defvar bmkp-auto-idle-bookmark-mode-delay 60 "\
*Number of seconds delay before automatically setting a bookmark.
Such automatic bookmarking is controlled by
`bmkp-temporary-bookmarking-mode'.")

(custom-autoload 'bmkp-auto-idle-bookmark-mode-delay "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-auto-idle-bookmark-mode-lighter " Auto-Bmk" "\
*Lighter for `bmkp-auto-idle-bookmark-mode'.
This string shows in the mode line when `bmkp-auto-idle-bookmark-mode'
is enabled.  Set this to nil or \"\" if you do not want any lighter.")

(custom-autoload 'bmkp-auto-idle-bookmark-mode-lighter "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-auto-idle-bookmark-mode-set-function #'bmkp-set-autonamed-bookmark-at-line "\
*Function used to set an automatic bookmark.
Used by `bmkp-temporary-bookmarking-mode'.
The default value, `bmkp-set-autonamed-bookmark-at-line', sets an
autonamed bookmark at the start of the current line.  To bookmark the
current position, so you can have more than one automatic bookmark per
line, use `bmkp-set-autonamed-bookmark' instead.")

(custom-autoload 'bmkp-auto-idle-bookmark-mode-set-function "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-autoname-bookmark-function 'bmkp-autoname-bookmark-function-default "\
*Function to automatically name a bookmark at point (cursor position).
It should accept a buffer position as its (first) argument.
The name returned should match the application of
`bmkp-autoname-format' to the buffer name.")

(custom-autoload 'bmkp-autoname-bookmark-function "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-autoname-format (if (> emacs-major-version 21) "^[0-9]\\{9\\} %s" "^[0-9]+ %s") "\
*Format string to match an autonamed bookmark name.
It must have a single `%s' to accept the buffer name.")

(custom-autoload 'bmkp-autoname-format "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-autotemp-bookmark-predicates '(bmkp-autonamed-bookmark-p bmkp-autonamed-this-buffer-bookmark-p) "\
*Predicates for bookmarks to be set (created) as temporary bookmarks.
Each is typically a type predicate, but it can be any function that
accepts as its (first) argument a bookmark or bookmark name.
These are the predefined type predicates:
 `bmkp-autofile-bookmark-p', `bmkp-autonamed-bookmark-for-buffer-p',
 `bmkp-autonamed-bookmark-p', `bmkp-autonamed-this-buffer-bookmark-p',
 `bmkp-bookmark-file-bookmark-p', `bmkp-bookmark-list-bookmark-p',
 `bmkp-desktop-bookmark-p', `bmkp-dired-bookmark-p',
 `bmkp-dired-this-dir-bookmark-p', `bmkp-file-bookmark-p',
 `bmkp-file-remote-p', `bmkp-file-this-dir-bookmark-p',
 `bmkp-function-bookmark-p', `bmkp-gnus-bookmark-p',
 `bmkp-image-bookmark-p', `bmkp-info-bookmark-p',
 `bmkp-last-specific-buffer-p', `bmkp-last-specific-file-p',
 `bmkp-local-directory-bookmark-p', `bmkp-local-file-bookmark-p',
 `bmkp-man-bookmark-p', `bmkp-non-file-bookmark-p',
 `bmkp-region-bookmark-p', `bmkp-remote-file-bookmark-p',
 `bmkp-sequence-bookmark-p', `bmkp-this-buffer-p', `bmkp-this-file-p',
 `bmkp-url-bookmark-p', `bmkp-url-browse-bookmark-p',
 `bmkp-variable-list-bookmark-p', `bmkp-w3m-bookmark-p'")

(custom-autoload 'bmkp-autotemp-bookmark-predicates "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-bookmark-name-length-max 70 "\
*Max number of chars for default name for a bookmark with a region.")

(custom-autoload 'bmkp-bookmark-name-length-max "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-count-multi-mods-as-one-flag t "\
*Non-nil means count multiple modifications as one.

This is for `bookmark-alist-modification-count'.  Non-nil means that
when you invoke a command that acts on multiple bookmarks or acts in
multiple ways on one bookmark, all of changes together count as only
one moficication.  That can prevent automatic saving of your bookmark
file during the sequence of modifications, so that when the command is
done you can choose not to save (i.e., to quit) if you like.")

(custom-autoload 'bmkp-count-multi-mods-as-one-flag "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-crosshairs-flag (> emacs-major-version 21) "\
*Non-nil means highlight with crosshairs when you visit a bookmark.
The highlighting is temporary - until your next action.
You need library `crosshairs.el' for this feature, and you need Emacs
22 or later.

NOTE: Crosshairs highlighting is shown in the buffer that is current
after jumping.  If the bookmarked jumped to does not really have an
associated buffer, for example a bookmark with a handler such as
`w32-browser' that just invokes a separate, non-Emacs program, then
the current buffer after jumping will be the buffer before jumping.

If you use this option in Lisp code, you will want to add/remove
`bmkp-crosshairs-highlight' to/from `bookmark-after-jump-hook'.")

(custom-autoload 'bmkp-crosshairs-flag "site-lisp/bookmark-plus/bookmark+-1" nil)

(defvar bmkp-default-bookmark-name 'highlighted "\
*Default bookmark name preference for accessing existing bookmarks.
\(The default name for a new bookmark is obtained using option
`bmkp-new-bookmark-default-names'.)

In `*Bookmark List*' use the name of the current line's bookmark.
Otherwise, if `bookmark+-lit.el' is not loaded then use the name of
the last-used bookmark in the current file.

Otherwise, use this option to determine the default, by preferring one
of the following, if available:

* a highlighted bookmark at point
* the last-used bookmark in the current file")

(custom-autoload 'bmkp-default-bookmark-name "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-default-handlers-for-file-types (and (require 'dired-x) (eval-when-compile (when (< emacs-major-version 21) (require 'cl))) (let ((assns nil)) (dolist (shell-assn dired-guess-shell-alist-user) (push (cons (car shell-assn) `(lambda (bmk) (dired-run-shell-command (dired-shell-stuff-it ,(cadr shell-assn) (list (bookmark-get-filename bmk)) nil nil)))) assns)) assns)) "\
*File associations for bookmark handlers used for indirect bookmarks.
Each element of the alist is (REGEXP . COMMAND).
REGEXP matches a file name.
COMMAND is a sexp that evaluates to either a shell command (a string)
 or an Emacs function (a symbol or a lambda form).  The shell command
 or Lisp function must accept a file-name argument.

Example value:

 ((\"\\\\.pdf$\"   . \"AcroRd32.exe\") ; Adobe Acrobat Reader
  (\"\\\\.ps$\"    . \"gsview32.exe\") ; Ghostview (PostScript viewer)
  (\"\\\\.html?$\" . browse-url)       ; Use Lisp function `browse-url'
  (\"\\\\.doc$\"   . w32-browser))     ; Use Lisp function `w32-browser'

When you change this option using Customize, if you want to use a
literal string as COMMAND then you must double-quote the text:
\"...\".  (But do not use double-quotes for the REGEXP.)  If you want
to use a symbol as COMMAND, just type the symbol name (no quotes).

This option is used by `bmkp-default-handler-for-file' to determine
the default `file-handler' property for a given file bookmark.  If a
given file name does not match this option, and if
`bmkp-guess-default-handler-for-file-flag' is non-nil, then
`bmkp-default-handler-for-file' tries to guess a shell command to use
in the default handler.  For that it uses `dired-guess-default' and
\(Emacs 23+ only) mailcap entries, in that order.")

(custom-autoload 'bmkp-default-handlers-for-file-types "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-desktop-no-save-vars '(search-ring regexp-search-ring kill-ring) "\
*List of variables not to save when creating a desktop bookmark.
They are removed from `desktop-globals-to-save' for the duration of
the save (only).")

(custom-autoload 'bmkp-desktop-no-save-vars "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-handle-region-function 'bmkp-handle-region-default "\
*Function to handle a bookmarked region.")

(custom-autoload 'bmkp-handle-region-function "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-incremental-filter-delay (if (boundp 'bookmark-search-delay) bookmark-search-delay 0.2) "\
*Seconds to wait before updating display when filtering bookmarks.")

(custom-autoload 'bmkp-incremental-filter-delay "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-menu-popup-max-length 20 "\
*Max number of bookmarks for `bookmark-completing-read' to use a menu.
When choosing a bookmark from a list of bookmarks using
`bookmark-completing-read', this controls whether to use a menu or
minibuffer input with completion.
If t, then always use a menu.
If nil, then never use a menu.
If an integer, then use a menu only if there are fewer bookmark
 choices than the value.")

(custom-autoload 'bmkp-menu-popup-max-length "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-new-bookmark-default-names (let ((fns '((lambda nil (let ((ff (function-called-at-point))) (and ff (symbolp ff) (symbol-name ff))))))) (when (fboundp 'region-or-non-nil-symbol-name-nearest-point) (push 'region-or-non-nil-symbol-name-nearest-point fns)) fns) "\
Functions to produce the default name for a new bookmark.
\(The default name for an *existing* bookmark is obtained using
`bmkp-default-bookmark-name'.)

The option value is a list of functions that do not require an
argument and return a string (or nil).  They are invoked in order to
produce the default names.

The following names are also provided, after the names described
above: The value of variable `bookmark-current-bookmark' and the
return value of function `bookmark-buffer-name', in that order.

These latter names are the defaults provided by vanilla Emacs
`bookmark.el', so if you want the vanilla behavior then set the option
value to nil.

For non-interactive use of a default bookmark name, and for Emacs
prior to Emacs 23 even for interactive use, only the first default
name is used.

Some functions you might want to use in the option value:

 * `region-or-non-nil-symbol-name-nearest-point'
 * (lambda () (let ((ff  (function-called-at-point)))
      (and (symbolp ff)  (symbol-name ff))))
 * (lambda () (let ((vv  (variable-at-point))) ; `variable-at-point'
      (and (symbolp vv)  (symbol-name vv))))   ;  returns 0 if no var
 * `word-at-point'
 * (lambda () (let ((ss  (symbol-at-point)))
     (and ss  (symbol-name ss))))

The first of these is defined in library `thingatpt+.el'.  It returns
the text in the region, if it is active and not empty.  Otherwise it
returns the name of the (non-`nil') symbol nearest point, within
maximum search distances `near-point-x-distance' (left and right) and
`near-point-y-distance' (up and down).")

(custom-autoload 'bmkp-new-bookmark-default-names "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-other-window-pop-to-flag t "\
*Non-nil means other-window bookmark jumping uses `pop-to-buffer'.
Use nil if you want the vanilla Emacs behavior, which uses
`switch-to-buffer-other-window'.  That creates a new window even if
there is already another window showing the buffer.")

(custom-autoload 'bmkp-other-window-pop-to-flag "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-prompt-for-tags-flag nil "\
*Non-nil means `bookmark-set' prompts for tags (when called interactively).")

(custom-autoload 'bmkp-prompt-for-tags-flag "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-region-search-size 40 "\
*Same as `bookmark-search-size', but specialized for bookmark regions.")

(custom-autoload 'bmkp-region-search-size "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-save-new-location-flag t "\
*Non-nil means save automatically relocated bookmarks.
If nil, then the new bookmark location is visited, but it is not saved
as part of the bookmark definition.")

(custom-autoload 'bmkp-save-new-location-flag "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-sequence-jump-display-function 'pop-to-buffer "\
*Function used to display the bookmarks in a bookmark sequence.")

(custom-autoload 'bmkp-sequence-jump-display-function "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-show-end-of-region t "\
*Show end of region with `exchange-point-and-mark' when activating a region.
If nil show only beginning of region.")

(custom-autoload 'bmkp-show-end-of-region "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-sort-comparer '((bmkp-info-cp bmkp-gnus-cp bmkp-url-cp bmkp-local-file-type-cp) bmkp-alpha-p) "\
*Predicate or predicates for sorting (comparing) bookmarks.
This defines the default sort for bookmarks in the bookmark list.

Various sorting commands, such as \\<bookmark-bmenu-mode-map>`\\[bmkp-bmenu-sort-by-bookmark-visit-frequency]', change the value of this
option dynamically (but they do not save the changed value).

The value must be one of the following:

* nil, meaning do not sort

* a predicate that takes two bookmarks as args

* a list of the form ((PRED...) FINAL-PRED), where each PRED and
  FINAL-PRED are predicates that take two bookmarks as args

If the value is a list of predicates, then each PRED is tried in turn
until one returns a non-nil value.  In that case, the result is the
car of that value.  If no non-nil value is returned by any PRED, then
FINAL-PRED is used and its value is the result.

Each PRED should return `(t)' for true, `(nil)' for false, or nil for
undecided.  A nil value means that the next PRED decides (or
FINAL-PRED, if there is no next PRED).

Thus, a PRED is a special kind of predicate that indicates either a
boolean value (as a singleton list) or \"I cannot decide - let the
next guy else decide\".  (Essentially, each PRED is a hook function
that is run using `run-hook-with-args-until-success'.)

Examples:

 nil           - No sorting.

 string-lessp  - Single predicate that returns nil or non-nil.

 ((p1 p2))     - Two predicates `p1' and `p2', which each return
                 (t) for true, (nil) for false, or nil for undecided.

 ((p1 p2) string-lessp)
               - Same as previous, except if both `p1' and `p2' return
                 nil, then the return value of `string-lessp' is used.

Note that these two values are generally equivalent, in terms of their
effect (*):

 ((p1 p2))
 ((p1) p2-plain) where p2-plain is (bmkp-make-plain-predicate p2)

Likewise, these three values generally act equivalently (*):

 ((p1))
 (() p1-plain)
 p1-plain        where p1-plain is (bmkp-make-plain-predicate p1)

The PRED form lets you easily combine predicates: use `p1' unless it
cannot decide, in which case try `p2', and so on.  The value ((p2 p1))
tries the predicates in the opposite order: first `p2', then `p1' if
`p2' returns nil.

Using a single predicate or FINAL-PRED makes it easy to reuse an
existing predicate that returns nil or non-nil.

You can also convert a PRED-type predicate (which returns (t), (nil),
or nil) into an ordinary predicate, by using function
`bmkp-make-plain-predicate'.  That lets you reuse elsewhere, as
ordinary predicates, any PRED-type predicates you define.

For example, this defines a plain predicate to compare by URL:
 (defalias 'bmkp-url-p (bmkp-make-plain-predicate 'bmkp-url-cp))

Note: As a convention, predefined Bookmark+ PRED-type predicate names
have the suffix `-cp' (for \"component predicate\") instead of `-p'.

--
* If you use `\\[bmkp-reverse-multi-sort-order]', then there is a difference in behavior between

   (a) using a plain predicate as FINAL-PRED and
   (b) using the analogous PRED-type predicate (and no FINAL-PRED).

  In the latter case, `\\[bmkp-reverse-multi-sort-order]' affects when the predicate is tried and
  its return value.  See `bmkp-reverse-multi-sort-order'.")

(custom-autoload 'bmkp-sort-comparer "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-su-or-sudo-regexp "\\(/su:\\|/sudo:\\)" "\
*Regexp to recognize `su' or `sudo' Tramp bookmarks.")

(custom-autoload 'bmkp-su-or-sudo-regexp "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-tags-for-completion 'current "\
*List of strings used as tags for completion (not an alist).
The tags can be specified here individually or taken from (a) the
current bookmark list or (b) one or more bookmark files or both.

\(In Emacs 20 and 21, you cannot choose (b) when customizing, but if
\(b) was chosen using a later Emacs version then the option value can
still be used in Emacs 20 and 21.)

If a relative file name is specified for a bookmark file then the
current value of `default-directory' is used to find the file.")

(custom-autoload 'bmkp-tags-for-completion "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-temporary-bookmarking-mode-hook nil "\
*Functions run after entering and exiting temporary-bookmarking mode.")

(custom-autoload 'bmkp-temporary-bookmarking-mode-hook "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-this-file/buffer-cycle-sort-comparer '((bmkp-position-cp)) "\
*`bmkp-sort-comparer' value for cycling this-file/buffer bookmarks.
Use bookmarks for the currently visited file or (non-file) buffer.
Some values you might want to use: ((bmkp-position-cp)),
 ((bmkp-bookmark-creation-cp)), ((bmkp-visited-more-cp)).
See `bmkp-sort-comparer'.")

(custom-autoload 'bmkp-this-file/buffer-cycle-sort-comparer "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-guess-default-handler-for-file-flag nil "\
*Non-nil means guess the default handler when creating a file bookmark.
This is ignored if a handler can be found using option
`bmkp-default-handlers-for-file-types'.  Otherwise, this is used by
function `bmkp-default-handler-for-file' to determine the default
handler for a given file.")

(custom-autoload 'bmkp-guess-default-handler-for-file-flag "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-temporary-bookmarking-mode-lighter " Temp-Bmk" "\
*Lighter for `bmkp-temporary-bookmarking-mode'.
This string shows in the mode line when `bmkp-temporary-bookmarking-mode'
is enabled.  Set this to nil or \"\" if you do not want any lighter.")

(custom-autoload 'bmkp-temporary-bookmarking-mode-lighter "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-use-region t "\
*Non-nil means visiting a bookmark activates its recorded region.")

(custom-autoload 'bmkp-use-region "site-lisp/bookmark-plus/bookmark+-1" t)

(defvar bmkp-w3m-allow-multi-tabs t "\
*Non-nil means jump to W3M bookmarks in a new session.")

(custom-autoload 'bmkp-w3m-allow-multi-tabs "site-lisp/bookmark-plus/bookmark+-1" t)

(autoload 'bookmark-edit-annotation-mode "site-lisp/bookmark-plus/bookmark+-1" "\
Mode for editing the annotation of bookmark BOOKMARK.
When you have finished composing, type \\[bookmark-send-annotation].
BOOKMARK is a bookmark name or a bookmark record.

\\{bookmark-edit-annotation-mode-map}

\(fn BOOKMARK)" t nil)

(autoload 'bookmark-send-edited-annotation "site-lisp/bookmark-plus/bookmark+-1" "\
Use buffer contents as annotation for a bookmark.
Lines beginning with `#' are ignored.

\(fn)" t nil)

(autoload 'bookmark-edit-annotation "site-lisp/bookmark-plus/bookmark+-1" "\
Pop up a buffer for editing bookmark BOOKMARK's annotation.
BOOKMARK is a bookmark name or a bookmark record.

\(fn BOOKMARK)" t nil)

(autoload 'bookmark-set "site-lisp/bookmark-plus/bookmark+-1" "\
Set a bookmark named NAME, then run `bmkp-after-set-hook'.
If the region is active (`transient-mark-mode') and nonempty, then
record the region limits in the bookmark.

If NAME is nil, then prompt for the bookmark name.  The default names
for prompting are as follows (in order of priority):

 * If in W3M mode, then the current W3M title.

 * If in a Gnus mode, then the Gnus summary article header.

 * If on a `man' page, then the page name (command and section).

 * If the region is active and nonempty, then the buffer name followed
   by \": \" and the region prefix (up to
   `bmkp-bookmark-name-length-max' chars).

 * The names defined by option `bmkp-new-bookmark-default-names'.

 * The value of variable `bookmark-current-bookmark', the name of the
   last-used bookmark for the current file.

 * The value returned by function `bookmark-buffer-name'.

For Emacs 23+, all of the names described above are available as
default values, by repeating `M-n'.  For older Emacs versions, the
first name provided is the only default value.

While entering a bookmark name at the prompt:

 * You can use (lax) completion against bookmarks in the same buffer.
   If there are no bookmarks in the current buffer, then all bookmarks
   are completion candidates.  (See also below, about a numeric prefix
   argument.)

 * You can use `C-M-w' to yank words from the buffer to the
   minibuffer.  Repeating `C-M-w' yanks successive words (newlines
   between yanked words are stripped out).

 * You can use `C-M-u' to insert the name of the last bookmark used in
   the buffer.  This can be useful as an aid to track your progress
   through a large file.  (If no bookmark has yet been used, then
   `C-M-u' inserts the name of the visited file.)

A prefix argument changes the behavior as follows:

 * Numeric prefix arg: Use all bookmarks as completion candidates,
   instead of just the bookmarks for the current buffer.

 * Plain prefix arg (`C-u'): Do not overwrite a bookmark that has the
   same name as NAME, if such a bookmark already exists.  Instead,
   push the new bookmark onto the bookmark alist.

   The most recently set bookmark named NAME is thus the one in effect
   at any given time, but any others named NAME are still available,
   should you decide to delete the most recent one.

Use `\\[bookmark-delete]' to remove bookmarks (you give it a name, and it removes
only the first instance of a bookmark with that name from the list of
bookmarks).

\(fn &optional NAME PARG INTERACTIVEP)" t nil)

(autoload 'bookmark-yank-word "site-lisp/bookmark-plus/bookmark+-1" "\
Yank the word at point in `bookmark-current-buffer'.
Repeat to yank consecutive words from the current buffer, appending
them to the minibuffer.  However, newline characters between yanked
words are stripped out.

\(fn)" t nil)

(autoload 'bookmark-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to bookmark BOOKMARK.
You may have a problem using this function if the value of variable
`bookmark-alist' is nil.  If that happens, you need to load in some
bookmarks.  See function `bookmark-load' for more about this.

If the file pointed to by BOOKMARK no longer exists, you are asked if
you wish to give the bookmark a new location.  If so, `bookmark-jump'
jumps to the new location and saves it.

If the bookmark defines a region, then the region is activated if
`bmkp-use-region' is not-nil or it is nil and you use a prefix
argument.  A prefix arg temporarily flips the value of
`bmkp-use-region'.

If you use Icicles, then you can use `S-delete' during completion of a
bookmark name to delete the bookmark named by the current completion
candidate.

In Lisp code:
BOOKMARK is a bookmark name or a bookmark record.
Non-nil DISPLAY-FUNCTION is a function to display the bookmark.  By
 default, `switch-to-buffer' is used.
Non-nil USE-REGION-P flips the value of `bmkp-use-region'.

\(fn BOOKMARK &optional DISPLAY-FUNCTION USE-REGION-P)" t nil)

(autoload 'bookmark-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to bookmark BOOKMARK in another window.
See `bookmark-jump', in particular for info about using a prefix arg.

\(fn BOOKMARK &optional USE-REGION-P)" t nil)

(autoload 'bookmark-relocate "site-lisp/bookmark-plus/bookmark+-1" "\
Relocate the bookmark named BOOKMARK-NAME to another file.
You are prompted for the new file name.

Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and do not
refresh/rebuild the bookmark-list display.

Changes the file associated with the bookmark.
Useful when a file has been renamed after a bookmark was set in it.

If you use Icicles, then you can use `S-delete' during completion of a
bookmark name to delete the bookmark named by the current completion
candidate.

\(fn BOOKMARK-NAME &optional NO-UPDATE-P)" t nil)

(autoload 'bookmark-insert-location "site-lisp/bookmark-plus/bookmark+-1" "\
Insert file or buffer name for the bookmark named BOOKMARK-NAME.
If a file is bookmarked, insert the recorded file name.
If a non-file buffer is bookmarked, insert the recorded buffer name.

Optional second arg NO-HISTORY means do not record this in the
minibuffer history list `bookmark-history'.

If you use Icicles, then you can use `S-delete' during completion of a
bookmark name to delete the bookmark named by the current completion
candidate.

\(fn BOOKMARK-NAME &optional NO-HISTORY)" t nil)

(autoload 'bookmark-rename "site-lisp/bookmark-plus/bookmark+-1" "\
Change bookmark's name from OLD to NEW.
Interactively:
 If called from the keyboard, then prompt for OLD.
 If called from the menubar, select OLD from a menu.
If NEW is nil, then prompt for its string value (unless BATCH).

When entering the NEW name you can use completion against existing
bookmark names.  This completion is lax, so you can easily edit an
existing name.  See `bookmark-set' for particular keys available
during this input.

If BATCHP is non-nil, then do not rebuild the bookmark list.  (NEW
should be non-nil if BATCH is non-nil.)

If you use Icicles then you can use `S-delete' during completion of a
bookmark name to delete the bookmark named by the current completion
candidate.

\(fn OLD &optional NEW BATCHP)" t nil)

(autoload 'bookmark-insert "site-lisp/bookmark-plus/bookmark+-1" "\
Insert the text of a bookmarked file.
BOOKMARK-NAME is the name of the bookmark.
You may have a problem using this function if the value of variable
`bookmark-alist' is nil.  If that happens, you need to load in some
bookmarks.  See function `bookmark-load' for more about this.

If you use Icicles, then you can use `S-delete' during completion of a
bookmark name to delete the bookmark named by the current completion
candidate.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bookmark-delete "site-lisp/bookmark-plus/bookmark+-1" "\
Delete the BOOKMARK from the bookmark list.
BOOKMARK is a bookmark name or a bookmark record.
Interactively, default to the \"current\" bookmark (that is, the one
most recently used in this file), if it exists.

If BOOKMARK is a name and it has property `bmkp-full-record' then use
that property along with the name to find the bookmark to delete.
If it is a name without property `bmkp-full-record' then delete (only)
the first bookmark in `bookmark-alist' with that name.

Optional arg BATCHP means do not update buffer `*Bookmark List*'.

If you use Icicles, then you can use `S-delete' during completion of a
bookmark name to delete the bookmark named by the current completion
candidate.  In this way, you can delete multiple bookmarks.

\(fn BOOKMARK &optional BATCHP)" t nil)

(autoload 'bookmark-save "site-lisp/bookmark-plus/bookmark+-1" "\
Save currently defined bookmarks.
Save by default in the file named by variable
`bmkp-current-bookmark-file'.  With a prefix arg, you are prompted for
the file to save to.

If `bmkp-last-as-first-bookmark-file' is non-nil, update its value to
the file being saved.

To load bookmarks from a specific file, use `\\[bookmark-load]'
\(`bookmark-load').

If called from Lisp:
 With nil PARG, use file `bmkp-current-bookmark-file'.
 With non-nil PARG and non-nil FILE, use file FILE.
 With non-nil PARG and nil FILE, prompt the user for the file to use.

\(fn &optional PARG FILE)" t nil)

(autoload 'bookmark-load "site-lisp/bookmark-plus/bookmark+-1" "\
Load bookmarks from FILE (which must be in the standard format).
Without a prefix argument (argument OVERWRITE is nil), add the newly
loaded bookmarks to those already current.  They will be saved to the
current bookmark file when bookmarks are saved.

If you do not use a prefix argument, then no existing bookmarks are
overwritten.  If you load some bookmarks that have the same names as
bookmarks already defined in your Emacs session, numeric suffixes
\"<2>\", \"<3>\",... are appended as needed to the names of those new
bookmarks to distinguish them.

With a prefix argument, switch the bookmark file currently used,
*replacing* all currently existing bookmarks with the newly loaded
bookmarks.  In this case, the value of `bmkp-current-bookmark-file'is
backed up to `bmkp-last-bookmark-file' and then changed to FILE, so
bookmarks will subsequently be saved to FILE.  If
`bmkp-last-as-first-bookmark-file' is non-nil then its value is also
changed to FILE and it is saved persistently, so that the next Emacs
session will start with it as the bookmark file.  (The value of
`bookmark-default-file' is unaffected.)

Interactively, if any bookmarks have been modified since last saved
then you are asked whether you want to first save them before loading
FILE.  If you hit `C-g' then both saving and loading are canceled.

When called from Lisp, non-nil optional arg BATCHP means this is not
an interactive call.  In this case, do not interact with the user: do
not ask whether to save the current (unsaved) bookmark list before
loading; do not display any load progress messages; and do not
update/refresh buffer `*Bookmark List*'.

If BATCHP is `save' and bookmarks have been modified since the
bookmark list was last saved, then save the bookmark list before
loading.

If BATCHP is any other non-nil value besides `save', do not save the
bookmark list.

Your initial bookmark file, either `bmkp-last-as-first-bookmark-file'
or `bookmark-default-file', is loaded automatically by Emacs the first
time you use bookmarks in a session - you do not need to load it
manually.  Use `bookmark-load' only to load extra bookmarks (with no
prefix arg) or an alternative set of bookmarks (with a prefix arg).

If you use `bookmark-load' to load a file that does not contain a
proper bookmark alist, then when bookmarks are saved the current
bookmark file will likely become corrupted.  You should load only
bookmark files that were created using the bookmark functions.

\(fn FILE &optional OVERWRITE BATCHP)" t nil)

(autoload 'bmkp-edit-bookmark-name-and-file "site-lisp/bookmark-plus/bookmark+-1" "\
Edit BOOKMARK's name and file name, and maybe save them.
Return a list of the new bookmark name and new file name.
BOOKMARK is a bookmark name or a bookmark record.

Without a prefix arg, you are prompted for the new bookmark name and
 the new file name.  When entering the new name you can use completion
 against existing names.  This completion is lax, so you can easily
 edit an existing name.  See `bookmark-set' for particular keys
available during this input.

With a prefix arg, edit the complete bookmark record (the
 internal, Lisp form).

\(fn BOOKMARK &optional EDIT-RECORD-P)" t nil)

(autoload 'bmkp-edit-bookmark-records-send "site-lisp/bookmark-plus/bookmark+-1" "\
Update `bookmark-alist' with buffer contents: a bookmark alist.
Lines beginning with `;;' are ignored.
Non-interactively, optional arg MSG-P means display progress messages.

This assumes that the bookmarks in the buffer are the marked bookmarks
in `*Bookmark List*'.  That is, it assumes that the buffer was created
by `bmkp-bmenu-edit-marked' (`\\<bookmark-bmenu-mode-map>\\[bmkp-bmenu-edit-marked]' in `*Bookmark List*').

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-edit-bookmark-record "site-lisp/bookmark-plus/bookmark+-1" "\
Edit the full record (the Lisp sexp) for BOOKMARK.
BOOKMARK is a bookmark name or a bookmark record.
When you finish editing, use `\\[bmkp-edit-bookmark-record-send]'.
The current bookmark list is then updated to reflect your edits.

\(fn BOOKMARK)" t nil)

(autoload 'bmkp-edit-bookmark-record-send "site-lisp/bookmark-plus/bookmark+-1" "\
Update `bookmark-alist' with buffer contents: a bookmark record.
Lines beginning with `;;' are ignored.
Non-interactively, optional arg MSG-P means display progress messages.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-edit-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Edit BOOKMARK's tags, and maybe save the result.
The edited value must be a list each of whose elements is either a
 string or a cons whose key is a string.
BOOKMARK is a bookmark name or a bookmark record.

\(fn BOOKMARK)" t nil)

(autoload 'bmkp-edit-tags-send "site-lisp/bookmark-plus/bookmark+-1" "\
Use buffer contents as the internal form of a bookmark's tags.
DO NOT MODIFY the header comment lines, which begin with `;;'.

\(fn &optional BATCHP)" t nil)

(autoload 'bmkp-send-bug-report "site-lisp/bookmark-plus/bookmark+-1" "\
Send a bug report about a Bookmark+ problem.

\(fn)" t nil)

(autoload 'bmkp-toggle-bookmark-set-refreshes "site-lisp/bookmark-plus/bookmark+-1" "\
Toggle `bookmark-set' refreshing `bmkp-latest-bookmark-alist'.
Add/remove `bmkp-refresh-latest-bookmark-list' to/from
`bmkp-after-set-hook'.

\(fn)" t nil)

(autoload 'bmkp-toggle-saving-menu-list-state "site-lisp/bookmark-plus/bookmark+-1" "\
Toggle the value of option `bmkp-bmenu-state-file'.
Tip: You can use this before quitting Emacs, to not save the state.
If the initial value of `bmkp-bmenu-state-file' is nil, then this
command has no effect.

\(fn)" t nil)

(autoload 'bmkp-save-menu-list-state "site-lisp/bookmark-plus/bookmark+-1" "\
Save menu-list state, unless not saving or list has not yet been shown.
The state is saved to the value of `bmkp-bmenu-state-file'.
Non-interactively, optional arg MSG-P means display progress messages.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-toggle-saving-bookmark-file "site-lisp/bookmark-plus/bookmark+-1" "\
Toggle the value of option `bookmark-save-flag'.
If the initial value of `bookmark-save-flag' is nil, then this
command has no effect.
Non-interactively, non-nil MSG-P means display a status message.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-make-function-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Create a bookmark that invokes FUNCTION when \"jumped\" to.
You are prompted for the bookmark name and the name of the function.
Interactively, you are prompted for the bookmark and the function.
Returns the new bookmark (internal record).

Non-interactively, non-nil optional arg MSG-P means display a status
message.

\(fn BOOKMARK-NAME FUNCTION &optional MSG-P)" t nil)

(autoload 'bmkp-revert-bookmark-file "site-lisp/bookmark-plus/bookmark+-1" "\
Revert to the bookmarks in the current bookmark file.
This discards all modifications to bookmarks and the bookmark list
\(e.g. added/deleted bookmarks).
This has the same effect as using `C-u \\<bookmark-bmenu-mode-map>\\[bmkp-bmenu-refresh-menu-list]' in buffer `*Bookmark List*'.
Non-interactively, non-nil MSG-P means display a status message.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-switch-bookmark-file "site-lisp/bookmark-plus/bookmark+-1" "\
Switch to a different bookmark file, FILE.
Return FILE.  Interactively, you are prompted for FILE.
Replace all bookmarks in the current bookmark list with those from the
newly loaded FILE.  Bookmarks are subsequently saved to FILE.

Optional arg BATCHP is passed to `bookmark-load'.

\(fn FILE &optional BATCHP)" t nil)

(autoload 'bmkp-switch-to-last-bookmark-file "site-lisp/bookmark-plus/bookmark+-1" "\
Switch back to the last-used bookmark file.
Replace all currently existing bookmarks with those newly loaded from
the last-used file.  Swap the values of `bmkp-last-bookmark-file' and
`bmkp-current-bookmark-file'.

Optional arg BATCHP is passed to `bookmark-load'.

\(fn &optional BATCHP)" t nil)

(autoload 'bmkp-switch-bookmark-file-create "site-lisp/bookmark-plus/bookmark+-1" "\
Switch to bookmark file FILE, creating it as empty if it does not exist.
Return FILE.  Interactively, you are prompted for FILE.
Replace all bookmarks in the current bookmark list with those from the
newly loaded FILE.  Bookmarks are subsequently saved to FILE.

If there is no file with the name you provide (FILE), then create a
new, empty bookmark file with that name and use that from now on.
This empties the bookmark list.  Interactively, you are required to
confirm this.

Non-nil BATCHP is passed to `bookmark-load'.

\(fn FILE &optional BATCHP)" t nil)

(autoload 'bmkp-empty-file "site-lisp/bookmark-plus/bookmark+-1" "\
Empty the bookmark file FILE, or create FILE (empty) if it does not exist.
In either case, FILE will become an empty bookmark file.  Return FILE.

NOTE: If FILE already exists and you confirm emptying it, no check is
      made that it is in fact a bookmark file before emptying it.
      It is simply replaced by an empty bookmark file and saved.

This does NOT also make FILE the current bookmark file.  To do that,
use `\\[bmkp-switch-bookmark-file-create]' (`bmkp-switch-bookmark-file-create').

\(fn FILE &optional CONFIRMP)" t nil)

(autoload 'bmkp-crosshairs-highlight "site-lisp/bookmark-plus/bookmark+-1" "\
Call `crosshairs-highlight', unless the region is active.
You can add this to hook `bookmark-after-jump-hook'.
You need library `crosshairs.el' to use this command.

\(fn)" t nil)

(autoload 'bmkp-choose-navlist-from-bookmark-list "site-lisp/bookmark-plus/bookmark+-1" "\
Choose a bookmark-list bookmark and set the bookmark navigation list.
The navigation-list variable, `bmkp-nav-alist', is set to the list of
bookmarks that would be displayed by `bookmark-bmenu-list' (`C-x r l')
for the chosen bookmark-list bookmark, sorted and filtered as
appropriate.

Instead of choosing a bookmark-list bookmark, you can choose the
pseudo-bookmark `CURRENT *Bookmark List*'.  The bookmarks used for the
navigation list are those that would be currently shown in the
`*Bookmark List*' (even if the list is not currently displayed).

\(fn BOOKMARK-NAME &optional ALIST)" t nil)

(autoload 'bmkp-choose-navlist-of-type "site-lisp/bookmark-plus/bookmark+-1" "\
Set the bookmark navigation list to the bookmarks of a type you choose.
The pseudo-type `any' sets the navigation list to all bookmarks.
This sets variable `bmkp-nav-alist'.

\(fn TYPE)" t nil)

(autoload 'bmkp-this-file/buffer-bmenu-list "site-lisp/bookmark-plus/bookmark+-1" "\
Show the bookmark list just for bookmarks for the current file/buffer.
If visiting a file, this is `bmkp-this-file-bmenu-list'.  Otherwise,
this is `bmkp-this-buffer-bmenu-list'.

\(fn)" t nil)

(autoload 'bmkp-this-file-bmenu-list "site-lisp/bookmark-plus/bookmark+-1" "\
Show the bookmark list just for bookmarks for the current file.
Set `bmkp-last-specific-file' to the current file name.
If the current buffer is not visiting a file, prompt for the file name.

\(fn)" t nil)

(autoload 'bmkp-this-buffer-bmenu-list "site-lisp/bookmark-plus/bookmark+-1" "\
Show the bookmark list just for bookmarks for the current buffer.
Set `bmkp-last-specific-buffer' to the current buffer name.

\(fn)" t nil)

(autoload 'bmkp-navlist-bmenu-list "site-lisp/bookmark-plus/bookmark+-1" "\
Show the bookmark list just for bookmarks from the navigation list.

\(fn)" t nil)

(autoload 'bmkp-unomit-all "site-lisp/bookmark-plus/bookmark+-1" "\
Remove all bookmarks from the list of omitted bookmarks.
After this, all bookmarks are available for display.
Non-interactively, non-nil optional arg MSG-P means display a status
message.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-list-all-tags "site-lisp/bookmark-plus/bookmark+-1" "\
List bookmark tags.
Show the list in the minibuffer or, if not enough space, in buffer
`*All Tags*'.  The tags are listed alphabetically, respecting option
`case-fold-search'.

With no prefix arg or with a plain prefix arg (`C-u'), the tags listed
are those defined by option `bmkp-tags-for-completion'.  Otherwise
\(i.e., with a numeric prefix arg), the tags listed are those from the
current list of bookmarks only.

With no prefix arg or with a negative prefix arg (e.g. `C--'), list
only the tag names.  With a non-negative prefix arg (e.g. `C-1' or
plain `C-u'), list the full alist of tags.

Note that when the full tags alist is shown, the same tag name appears
once for each of its different values.

Non-interactively, non-nil MSG-P means display a status message.

\(fn FULLP CURRENT-ONLY-P &optional MSG-P)" t nil)

(autoload 'bmkp-remove-all-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Remove all tags from BOOKMARK.
Non-interactively:
 - Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
   do not refresh/rebuild the bookmark-list display.
 - Non-nil optional arg MSG-P means show a message about the removal.

\(fn BOOKMARK &optional NO-UPDATE-P MSG-P)" t nil)

(autoload 'bmkp-add-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Add TAGS to BOOKMARK.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.
Completion for the bookmark name is strict.
Completion for tags is lax: you are not limited to existing tags.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

Non-interactively:
* TAGS is a list of strings.
* Non-nil MSG-P means display a message about the addition.
* Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
  do not refresh/rebuild the bookmark-list display.

The absolute value of the return value is the number of tags added.
If BOOKMARK was untagged before the operation, then the return value
is negative.

\(fn BOOKMARK TAGS &optional NO-UPDATE-P MSG-P)" t nil)

(autoload 'bmkp-set-tag-value-for-navlist "site-lisp/bookmark-plus/bookmark+-1" "\
Set the value of TAG to VALUE, for each bookmark in the navlist.
If any of the bookmarks has no tag named TAG, then add one with VALUE.

\(fn TAG VALUE)" t nil)

(autoload 'bmkp-set-tag-value "site-lisp/bookmark-plus/bookmark+-1" "\
For BOOKMARK's TAG, set the value to VALUE.
If BOOKMARK has no tag named TAG, then add one with value VALUE.
Non-interactively:
* Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
* do not refresh/rebuild the bookmark-list display.
* Non-nil MSG-P means display a message about the updated value.

\(fn BOOKMARK TAG VALUE &optional NO-UPDATE-P MSG-P)" t nil)

(autoload 'bmkp-remove-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Remove TAGS from BOOKMARK.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

Non-interactively:
* TAGS is a list of strings.  The corresponding tags are removed.
* Non-nil MSG-P means display status messages.
* Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
  do not refresh/rebuild the bookmark-list display.

The absolute value of the return value is the number of tags removed.
If BOOKMARK is untagged after the operation, then the return value
is negative.

\(fn BOOKMARK TAGS &optional NO-UPDATE-P MSG-P)" t nil)

(autoload 'bmkp-remove-tags-from-all "site-lisp/bookmark-plus/bookmark+-1" "\
Remove TAGS from all bookmarks.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter each tag.
This affects all bookmarks, even those not showing in bookmark list.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

Non-interactively:
* TAGS is a list of strings.  The corresponding tags are removed.
* Non-nil optional arg MSG-P means show a message about the deletion.

\(fn TAGS &optional MSG-P)" t nil)

(autoload 'bmkp-rename-tag "site-lisp/bookmark-plus/bookmark+-1" "\
Rename TAG to NEWNAME in all bookmarks, even those not showing.
Non-interactively, non-nil MSG-P means display a message about the
deletion.

\(fn TAG NEWNAME &optional MSG-P)" t nil)

(autoload 'bmkp-copy-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Copy tags from BOOKMARK, so you can paste them to another bookmark.
Note that you can copy from a BOOKMARK that has no tags or has an
empty tags list.  In that case, the copied-tags list is empty, so if
you paste it as a replacement then the recipient bookmark will end up
with no tags.

Non-interactively, non-nil MSG-P means display a message about the
number of tags copied.

\(fn BOOKMARK &optional MSG-P)" t nil)

(autoload 'bmkp-paste-add-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Add tags to BOOKMARK that were previously copied from another bookmark.
Return the number of tags added.
The tags are copied from `bmkp-copied-tags'.
Non-interactively:
* Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
  do not refresh/rebuild the bookmark-list display.
* Non-nil MSG-P means display a message about the addition.

\(fn BOOKMARK &optional NO-UPDATE-P MSG-P)" t nil)

(autoload 'bmkp-paste-replace-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Replace tags for BOOKMARK with those copied from another bookmark.
Return the number of tags for BOOKMARK.
The tags are copied from `bmkp-copied-tags'.
Any previously existing tags for BOOKMARK are lost.
Non-interactively:
* Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
  do not refresh/rebuild the bookmark-list display.
* Non-nil MSG-P means display a message about the addition.

\(fn BOOKMARK &optional NO-UPDATE-P MSG-P)" t nil)

(autoload 'bmkp-url-target-set "site-lisp/bookmark-plus/bookmark+-1" "\
Set a bookmark for a URL.  Return the bookmark.
Interactively you are prompted for the URL.  Completion is available.
Use `M-n' to pick up the url at point as the default.

You are also prompted for the bookmark name.  But with a prefix arg,
you are prompted only for a bookmark-name prefix.  In that case, the
bookmark name is the prefix followed by the URL.

When entering a bookmark name you can use completion against existing
names.  This completion is lax, so you can easily edit an existing
name.  See `bookmark-set' for particular keys available during this
input.

Non-interactively:
* Non-nil PREFIX-ONLY-P means NAME/PREFIX is a bookmark-name prefix.
* NAME/PREFIX is the bookmark name or its prefix (the suffix = URL).
* Non-nil MSG-P means display a status message.

\(fn URL &optional PREFIX-ONLY-P NAME/PREFIX MSG-P)" t nil)

(autoload 'bmkp-file-target-set "site-lisp/bookmark-plus/bookmark+-1" "\
Set a bookmark for FILE.  Return the bookmark.
The bookmarked position is the beginning of the file.
Interactively you are prompted for FILE.  Completion is available.
You can use `M-n' to pick up the file name at point, or if none then
the visited file.

You are also prompted for the bookmark name.  But with a prefix arg,
you are prompted only for a bookmark-name prefix.  In that case, the
bookmark name is the prefix followed by the non-directory part of
FILE.

When entering a bookmark name you can use completion against existing
names.  This completion is lax, so you can easily edit an existing
name.  See `bookmark-set' for particular keys available during this
input.

Non-interactively:
 - Non-nil optional arg PREFIX-ONLY-P means prompt for a name prefix.
 - Optional arg NAME/PREFIX is the name or name prefix string.
 - Optional arg NO-OVERWRITE is passed to `bookmark-store': non-nil
   means do not overwrite an existing bookmark that has the same name.
 - Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
   do not refresh/rebuild the bookmark-list display.
 - Non-nil optional arg MSG-P means show a warning message if file
   does not exist.

\(fn FILE &optional PREFIX-ONLY-P NAME/PREFIX NO-OVERWRITE NO-UPDATE-P MSG-P)" t nil)

(defalias 'bmkp-bookmark-a-file 'bmkp-autofile-set)

(autoload 'bmkp-autofile-set "site-lisp/bookmark-plus/bookmark+-1" "\
Set a bookmark for FILE, autonaming the bookmark for the file.
Return the bookmark.
Interactively, you are prompted for FILE.  You can use `M-n' to pick
up the file name at point or the visited file.

The bookmark name is the non-directory part of FILE, but with a prefix
arg you are also prompted for a PREFIX string to prepend to the
bookmark name.  The bookmarked position is the beginning of the file.

Note that if you provide PREFIX then the bookmark will not satisfy
`bmkp-autofile-bookmark-p' unless you provide the same PREFIX to that
predicate.

The bookmark's file name is FILE if absolute.  If relative then it is
FILE expanded in DIR, if non-nil, or in the current directory
\(`default-directory').

If a bookmark with the same name already exists for the same file name
then do nothing.

Otherwise, create a new bookmark for the file, even if a bookmark with
the same name already exists.  This means that you can have more than
one autofile bookmark with the same bookmark name and the same
relative file name (non-directory part), but with different absolute
file names.

Non-interactively:
 - Non-nil NO-UPDATE-P means do not update `bmkp-tags-alist' and
   do not refresh/rebuild the bookmark-list display.
 - Non-nil optional arg MSG-P means display status messages.

\(fn FILE &optional DIR PREFIX NO-UPDATE-P MSG-P)" t nil)

(defalias 'bmkp-tag-a-file 'bmkp-autofile-add-tags)

(autoload 'bmkp-autofile-add-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Add TAGS to the autofile bookmark for FILE.
Return the number of tags added.

If there is no autofile bookmark for FILE, create one.
Interactively, you are prompted for FILE and then TAGS.
When prompted for FILE you can use `M-n' to pick up the file name at
point, or if none then the visited file.

With a non-negative prefix argument, you are prompted for a file-name
prefix, as in `bmkp-autofile-set'.

When prompted for tags, hit `RET' to enter each tag, then hit `RET'
again after the last tag.  You can use completion to enter each tag.
Completion is lax: you are not limited to existing tags.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a non-positive prefix argument if you want to refresh them.

Non-interactively:
 - TAGS is a list of strings.
 - DIR, PREFIX, and NO-UPDATE-P are as for `bmkp-autofile-set'.
 - Non-nil MSG-P means display a message about the addition.

\(fn FILE TAGS &optional DIR PREFIX NO-UPDATE-P MSG-P)" t nil)

(defalias 'bmkp-untag-a-file 'bmkp-autofile-remove-tags)

(autoload 'bmkp-autofile-remove-tags "site-lisp/bookmark-plus/bookmark+-1" "\
Remove TAGS from autofile bookmark for FILE.
Return the number of tags removed.

Interactively, you are prompted for TAGS and then FILE.
With Emacs 22 and later, only files with at least one of the given
tags are candidates.

When prompted for FILE you can use `M-n' to pick up the file name at
point, or if none then the visited file.

With a non-negative prefix argument, you are prompted for a file-name
prefix, as in `bmkp-autofile-set'.


When prompted for tags, hit `RET' to enter each tag to be removed,
then hit `RET' again after the last tag.  You can use completion to
enter each tag.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a non-positive prefix argument if you want to refresh them.

Non-interactively:
 - TAGS is a list of strings.
 - DIR, PREFIX, and NO-UPDATE-P are as for `bmkp-autofile-set'.
 - Non-nil MSG-P means display a message about the removal.

\(fn FILE TAGS &optional DIR PREFIX NO-UPDATE-P MSG-P)" t nil)

(autoload 'bmkp-purge-notags-autofiles "site-lisp/bookmark-plus/bookmark+-1" "\
Delete all autofile bookmarks that have no tags.
With a prefix arg, you are prompted for a PREFIX for the bookmark name.
Non-interactively, non-nil MSG-P means display a status message.

\(fn &optional PREFIX MSG-P)" t nil)

(autoload 'bmkp-describe-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Describe BOOKMARK.
With a prefix argument, show the internal definition of the bookmark.
BOOKMARK is a bookmark name or a bookmark record.
If it is a record then it need not belong to `bookmark-alist'.

Starting with Emacs 22, if the file is an image file then:
* Show a thumbnail of the image as well.
* If you have command-line tool `exiftool' installed and in your
  `$PATH' or `exec-path', then show EXIF data (metadata) about the
  image.  See standard Emacs library `image-dired.el' for more
  information about `exiftool'

\(fn BOOKMARK &optional DEFN)" t nil)

(autoload 'bmkp-describe-bookmark-internals "site-lisp/bookmark-plus/bookmark+-1" "\
Show the internal definition of the bookmark BOOKMARK.
BOOKMARK is a bookmark name or a bookmark record.
If it is a record then it need not belong to `bookmark-alist'.

\(fn BOOKMARK)" t nil)

(autoload 'bmkp-list-defuns-in-commands-file "site-lisp/bookmark-plus/bookmark+-1" "\
List the functions defined in `bmkp-bmenu-commands-file'.
Typically, these are all commands.

\(fn)" t nil)

(autoload 'bmkp-set-bookmark-file-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Create a bookmark that loads bookmark-file FILE when \"jumped\" to.
You are prompted for the names of the bookmark file and the bookmark.
When entering the bookmark name you can use completion against
existing names.  This completion is lax, so you can easily edit an
existing name.  See `bookmark-set' for particular keys available
during this input.

Non-interactively, non-nil MSG-P means display a status message.

\(fn FILE &optional MSG-P)" t nil)

(autoload 'bmkp-bookmark-file-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark-file bookmark, which means load its bookmark file.
With a prefix argument, switch to the new bookmark file.
Otherwise, load it to supplement the current bookmark list.

\(fn BOOKMARK-NAME &optional SWITCHP NO-MSG)" t nil)

(autoload 'bmkp-set-desktop-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Save the desktop as a bookmark.
You are prompted for the desktop-file location and the bookmark name.
The default value for the desktop-file location is the current value
of `desktop-file'.  As always, you can use `M-n' to retrieve it.

If you also use library Icicles, then the desktop files of all
existing desktop bookmarks are available during the desktop file-name
completion as proxy candidates.  To see them, use `C-M-_' to turn on
the display of proxy candidates.

\(fn DESKTOP-FILE)" t nil)

(autoload 'bmkp-desktop-change-dir "site-lisp/bookmark-plus/bookmark+-1" "\
Change to desktop saved in DESKTOP-FILE.
Kill the desktop as specified by variables `desktop-save-mode' and
 `desktop-save' (starting with Emacs 22).
Clear the desktop and load DESKTOP-FILE DIRNAME.

\(fn DESKTOP-FILE)" t nil)

(autoload 'bmkp-desktop-read "site-lisp/bookmark-plus/bookmark+-1" "\
Load desktop-file FILE, then run `desktop-after-read-hook'.
Return t if FILE was loaded, nil otherwise.

\(fn FILE)" t nil)

(autoload 'bmkp-desktop-delete "site-lisp/bookmark-plus/bookmark+-1" "\
Delete desktop bookmark BOOKMARK-NAME, and delete its desktop file.
Release the lock file in that desktop's directory.
\(This means that if you currently have locked a different desktop
in the same directory, then you will need to relock it.)

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-set-variable-list-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Save a list of variables as a bookmark.
Interactively, read the variables to save, using
`bmkp-read-variables-completing'.

\(fn VARIABLES)" t nil)

(autoload 'bmkp-dired-subdirs "site-lisp/bookmark-plus/bookmark+-1" "\
Alist of inserted subdirectories, without their positions (markers).
This is like `dired-subdir-alist' but without the top-level dir and
without subdir positions (markers).

\(fn)" t nil)

(autoload 'bmkp-jump-to-type "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark of a given type.  You are prompted for the type.
Otherwise, this is the same as `bookmark-jump' - see that, in
particular, for info about using a prefix argument.

When prompted for the type, you can use completion against the known
bookmark types (see `bmkp-types-alist').

Completion is lax, so you can also enter the name of a bookmark
`handler' or `file-handler' function, without completion.  Bookmarks
with that property value are then the jump candidates.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-jump-to-type-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-jump-to-type', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-autonamed-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an autonamed bookmark.
This is a specialization of `bookmark-jump'.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-autonamed-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-autonamed-jump', but in another window.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-autonamed-this-buffer-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an autonamed bookmark in the current buffer.
This is a specialization of `bookmark-jump'.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-autonamed-this-buffer-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-autonamed-this-buffer-jump', but in another window.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-bookmark-list-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark-list bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-desktop-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a desktop bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-dired-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a Dired bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-dired-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-dired-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-dired-this-dir-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a Dired bookmark for the `default-directory'.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-dired-this-dir-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-dired-this-dir-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-file-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file or directory bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-file-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-file-this-dir-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark for a file or subdir in the `default-directory'.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-file-this-dir-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-this-dir-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-gnus-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a Gnus bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-gnus-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-gnus-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-image-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an image-file bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-image-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-image-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-info-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an Info bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-info-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-info-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-local-file-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a local file or directory bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-local-file-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-local-file-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-man-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a `man'-page bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-man-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-man-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-non-file-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a non-file (buffer) bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-non-file-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-non-file-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-region-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a region bookmark.  Select the region.
This is a specialization of `bookmark-jump', but without a prefix arg.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-region-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-region-jump', but in another window.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-remote-file-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a remote file or directory bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-remote-file-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-remote-file-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-specific-buffers-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark for a buffer in list BUFFERS.
Interactively, read buffer names and bookmark name, with completion.

This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BUFFERS BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-specific-buffers-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-specific-buffers-jump', but in another window.

\(fn BUFFERS BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-specific-files-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark for a file in list FILES.
Interactively, read file names and bookmark name, with completion.

This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn FILES BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-specific-files-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-specific-files-jump', but in another window.

\(fn FILES BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-temporary-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a temporary bookmark.
This is a specialization of `bookmark-jump', but without a prefix arg.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-temporary-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-temporary-jump', but in another window.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-this-buffer-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark for the current buffer.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-this-buffer-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-this-buffer-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-variable-list-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a variable-list bookmark.
This is a specialization of `bookmark-jump'.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-url-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a URL bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-url-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-url-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-w32-browser-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark whose handler applies `w32-browser' to its file.
This is a specialization of `bookmark-jump'.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-w3m-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a W3M bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-w3m-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-w3m-jump', but in another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-all-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a BOOKMARK that has all of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.
If you specify no tags, then every bookmark that has some tags is a
candidate.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-all-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-all-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-all-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a BOOKMARK that has each tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-all-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-all-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-some-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a BOOKMARK that has at least one of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-some-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-some-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-some-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a BOOKMARK that has a tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-some-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-some-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-all-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file or directory BOOKMARK that has all of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.
If you specify no tags, then every bookmark that has some tags is a
candidate.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-all-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-all-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-all-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file or directory BOOKMARK that has each tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-all-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-all-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-some-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file or directory BOOKMARK that has at least one of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-some-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-some-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-some-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file or directory BOOKMARK that has a tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-some-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-some-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-all-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file BOOKMARK in this dir that has all of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.
If you specify no tags, then every bookmark that has some tags is a
candidate.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-all-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-this-dir-all-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-all-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file BOOKMARK in this dir that has each tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-all-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-this-dir-all-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-some-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file BOOKMARK in this dir that has at least one of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-some-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-this-dir-some-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-some-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a file BOOKMARK in this dir that has a tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-file-this-dir-some-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-file-this-dir-some-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-autofile-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an autofile bookmark.
This is a specialization of `bookmark-jump'.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-autofile-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-autofile-jump' but in another window.

\(fn BOOKMARK-NAME)" t nil)

(autoload 'bmkp-autofile-all-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an autofile BOOKMARK in this dir that has all of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.
If you specify no tags, then every bookmark that has some tags is a
candidate.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-autofile-all-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-autofile-all-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-autofile-all-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an autofile BOOKMARK in this dir that has each tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-autofile-all-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-autofile-all-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-autofile-some-tags-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an autofile BOOKMARK in this dir that has at least one of the TAGS.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter the bookmark name and each tag.

By default, the tag choices for completion are NOT refreshed, to save
time.  Use a prefix argument if you want to refresh them.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-autofile-some-tags-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-autofile-some-tags-jump', but in another window.

\(fn TAGS BOOKMARK)" t nil)

(autoload 'bmkp-autofile-some-tags-regexp-jump "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to an autofile BOOKMARK in this dir that has a tag matching REGEXP.
You are prompted for the REGEXP.
Then you are prompted for the BOOKMARK (with completion).

\(fn REGEXP BOOKMARK)" t nil)

(autoload 'bmkp-autofile-some-tags-regexp-jump-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
`bmkp-autofile-some-tags-regexp-jump', but in another window.

\(fn REGEXP BOOKMARK)" t nil)

(when (> emacs-major-version 21) (defun bmkp-find-file-all-tags-regexp-other-window (regexp &optional file) "`bmkp-find-file-all-tags-regexp', but in another window." (interactive (list (read-string "Regexp for tags: "))) (lexical-let* ((rg regexp) (use-file-dialog nil) (pred #'(lambda (ff) (let* ((bk (bmkp-get-autofile-bookmark ff)) (btgs (and bk (bmkp-get-tags bk)))) (and btgs (bmkp-every #'(lambda (tag) (string-match rg (bmkp-tag-name tag))) btgs))))) (icicle-unpropertize-completion-result-flag t) (icicle-must-pass-after-match-predicate pred) (fil (or (and file (funcall pred file) file) (read-file-name "Find file: " nil nil t nil (and (or (not (boundp 'icicle-mode)) (not icicle-mode)) pred)))) (bmk (bmkp-get-autofile-bookmark fil))) (bookmark-jump-other-window bmk))))

(when (> emacs-major-version 21) (defun bmkp-find-file-some-tags (tags &optional file) "Visit a file or directory that has at least one of the TAGS.\nYou are prompted first for the tags.  Hit `RET' to enter each tag,\nthen hit `RET' again after the last tag.  You can use completion to\nenter each tag.  This completion is lax: you are not limited to\nexisting tags.\n\nYou are then prompted for the file name.  This is read using\n`read-file-name', so you can browse up and down the file hierarchy.\nThe completion candidates are file names, not bookmark names.\nHowever, only files that are bookmarked as autofiles are candidates.\n\nBy default, the tag choices for completion are NOT refreshed, to save\ntime.  Use a prefix argument if you want to refresh them." (interactive (list (bmkp-read-tags-completing nil nil current-prefix-arg))) (lexical-let* ((tgs tags) (use-file-dialog nil) (pred #'(lambda (ff) (lexical-let* ((bk (bmkp-get-autofile-bookmark ff)) (btgs (and bk (bmkp-get-tags bk)))) (and btgs (bmkp-some #'(lambda (tag) (bmkp-has-tag-p bk tag)) tgs))))) (icicle-unpropertize-completion-result-flag t) (icicle-must-pass-after-match-predicate pred) (fil (or (and file (funcall pred file) file) (read-file-name "Find file: " nil nil t nil (and (or (not (boundp 'icicle-mode)) (not icicle-mode)) pred)))) (bmk (bmkp-get-autofile-bookmark fil))) (bookmark-jump bmk))))

(when (> emacs-major-version 21) (defun bmkp-find-file-some-tags-other-window (tags &optional file) "`bmkp-find-file-some-tags', but in another window." (interactive (list (bmkp-read-tags-completing nil nil current-prefix-arg))) (lexical-let* ((tgs tags) (use-file-dialog nil) (pred #'(lambda (ff) (lexical-let* ((bk (bmkp-get-autofile-bookmark ff)) (btgs (and bk (bmkp-get-tags bk)))) (and btgs (bmkp-some #'(lambda (tag) (bmkp-has-tag-p bk tag)) tgs))))) (icicle-unpropertize-completion-result-flag t) (icicle-must-pass-after-match-predicate pred) (fil (or (and file (funcall pred file) file) (read-file-name "Find file: " nil nil t nil (and (or (not (boundp 'icicle-mode)) (not icicle-mode)) pred)))) (bmk (bmkp-get-autofile-bookmark fil))) (bookmark-jump-other-window bmk))))

(when (> emacs-major-version 21) (defun bmkp-find-file-some-tags-regexp (regexp &optional file) "Visit a file or directory that has a tag matching REGEXP.\nYou are prompted for the REGEXP." (interactive (list (read-string "Regexp for tags: "))) (lexical-let* ((rg regexp) (use-file-dialog nil) (pred #'(lambda (ff) (let* ((bk (bmkp-get-autofile-bookmark ff)) (btgs (and bk (bmkp-get-tags bk)))) (and btgs (bmkp-some #'(lambda (tag) (string-match rg (bmkp-tag-name tag))) btgs))))) (icicle-unpropertize-completion-result-flag t) (icicle-must-pass-after-match-predicate pred) (fil (or (and file (funcall pred file) file) (read-file-name "Find file: " nil nil t nil (and (or (not (boundp 'icicle-mode)) (not icicle-mode)) pred)))) (bmk (bmkp-get-autofile-bookmark fil))) (bookmark-jump bmk))))

(when (> emacs-major-version 21) (defun bmkp-find-file-some-tags-regexp-other-window (regexp &optional file) "`bmkp-find-file-some-tags-regexp', but in another window." (interactive (list (read-string "Regexp for tags: "))) (lexical-let* ((rg regexp) (use-file-dialog nil) (pred #'(lambda (ff) (let* ((bk (bmkp-get-autofile-bookmark ff)) (btgs (and bk (bmkp-get-tags bk)))) (and btgs (bmkp-some #'(lambda (tag) (string-match rg (bmkp-tag-name tag))) btgs))))) (icicle-unpropertize-completion-result-flag t) (icicle-must-pass-after-match-predicate pred) (fil (or (and file (funcall pred file) file) (read-file-name "Find file: " nil nil t nil (and (or (not (boundp 'icicle-mode)) (not icicle-mode)) pred)))) (bmk (bmkp-get-autofile-bookmark fil))) (bookmark-jump-other-window bmk))))

(autoload 'bmkp-jump-in-navlist "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to a bookmark, choosing from those in the navigation list.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-jump-in-navlist-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
Same as `bmkp-jump-in-navlist', but use another window.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-cycle "site-lisp/bookmark-plus/bookmark+-1" "\
Cycle through bookmarks in the navlist by INCREMENT (default: 1).
Positive INCREMENT cycles forward.  Negative INCREMENT cycles backward.
Interactively, the prefix arg determines INCREMENT:
 Plain `C-u': 1
 otherwise: the numeric prefix arg value

Plain `C-u' also means start over at first bookmark.

You can set the navigation list using commands
 `bmkp-choose-navlist-from-bookmark-list' and
 `bmkp-choose-navlist-of-type'.

You can cycle among bookmarks in the current buffer using
 `bmkp-cycle-this-buffer' and
 `bmkp-cycle-this-buffer-other-window.'

In Lisp code:
 Non-nil OTHER-WINDOW means jump to the bookmark in another window.
 Non-nil STARTOVERP means reset `bmkp-current-nav-bookmark' to the
 first bookmark in the navlist.

\(fn INCREMENT &optional OTHER-WINDOW STARTOVERP)" t nil)

(autoload 'bmkp-cycle-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
Same as `bmkp-cycle' but uses another window.

\(fn INCREMENT &optional STARTOVERP)" t nil)

(autoload 'bmkp-cycle-this-file/buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Cycle through bookmarks for this file/buffer by INCREMENT (default: 1).
If visiting a file, this is `bmkp-cycle-this-file'.
Otherwise, this is `bmkp-cycle-this-buffer'.

\(fn INCREMENT &optional OTHER-WINDOW STARTOVERP)" t nil)

(autoload 'bmkp-cycle-this-file/buffer-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
Same as `bmkp-cycle-this-file/buffer' but use other window.

\(fn INCREMENT &optional STARTOVERP)" t nil)

(autoload 'bmkp-cycle-this-file "site-lisp/bookmark-plus/bookmark+-1" "\
Cycle through bookmarks for this file by INCREMENT (default: 1).
Positive INCREMENT cycles forward.  Negative INCREMENT cycles backward.
Interactively, the prefix arg determines INCREMENT:
 Plain `C-u': 1
 otherwise: the numeric prefix arg value

Plain `C-u' also means start over at first bookmark.

You can cycle among bookmarks beyond the current file using
`bmkp-cycle' and `bmkp-cycle-other-window.'

You can set your preferred sort order for this-file bookmarks by
customizing option `bmkp-this-file/buffer-cycle-sort-comparer'.

To change the sort order without customizing, you can use `\\[bmkp-this-file-bmenu-list]' to
show the `*Bookmark List*' with only this file's bookmarks, sort
them there, and use `\\[bmkp-choose-navlist-from-bookmark-list]', choosing `CURRENT *Bookmark List*' as
the navigation list.

Then you can cycle the bookmarks using `bmkp-cycle'
\(`\\[bmkp-next-bookmark-repeat]' etc.), instead of `bmkp-cycle-this-file'.

In Lisp code:
 Non-nil OTHER-WINDOW means jump to the bookmark in another window.
 Non-nil STARTOVERP means reset `bmkp-current-nav-bookmark' to the
 first bookmark in the navlist.

\(fn INCREMENT &optional OTHER-WINDOW STARTOVERP)" t nil)

(autoload 'bmkp-cycle-this-file-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
Same as `bmkp-cycle-this-file' but use other window.

\(fn INCREMENT &optional STARTOVERP)" t nil)

(autoload 'bmkp-cycle-this-buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Cycle through bookmarks in this buffer by INCREMENT (default: 1).
Positive INCREMENT cycles forward.  Negative INCREMENT cycles backward.
Interactively, the prefix arg determines INCREMENT:
 Plain `C-u': 1
 otherwise: the numeric prefix arg value

Plain `C-u' also means start over at first bookmark.

You can cycle among bookmarks beyond the current buffer using
`bmkp-cycle' and `bmkp-cycle-other-window.'

You can set your preferred sort order for this-buffer bookmarks by
customizing option `bmkp-this-file/buffer-cycle-sort-comparer'.

To change the sort order without customizing, you can use `\\[bmkp-this-buffer-bmenu-list]' to
show the `*Bookmark List*' with only this buffer's bookmarks, sort
them there, and use `\\[bmkp-choose-navlist-from-bookmark-list]', choosing `CURRENT *Bookmark List*' as
the navigation list.

Then you can cycle the bookmarks using `bmkp-cycle'
\(`\\[bmkp-next-bookmark-repeat]' etc.), instead of `bmkp-cycle-this-buffer'.

In Lisp code:
 Non-nil OTHER-WINDOW means jump to the bookmark in another window.
 Non-nil STARTOVERP means reset `bmkp-current-nav-bookmark' to the
 first bookmark in the navlist.

\(fn INCREMENT &optional OTHER-WINDOW STARTOVERP)" t nil)

(autoload 'bmkp-cycle-this-buffer-other-window "site-lisp/bookmark-plus/bookmark+-1" "\
Same as `bmkp-cycle-this-buffer' but use other window.

\(fn INCREMENT &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth next bookmark in the bookmark navigation list.
N defaults to 1, meaning the next bookmark.
Plain `C-u' means start over at first bookmark.
See also `bmkp-cycle'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-previous-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth previous bookmark in the bookmark navigation list.
See `bmkp-next-bookmark'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-bookmark-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-next bookmark in the bookmark navigation list.
This is a repeatable version of `bmkp-next-bookmark'.
N defaults to 1, meaning the next bookmark.
Plain `C-u' means start over at the first bookmark (and no repeat).

\(fn ARG)" t nil)

(autoload 'bmkp-previous-bookmark-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-previous bookmark in the bookmark navigation list.
See `bmkp-next-bookmark-repeat'.

\(fn ARG)" t nil)

(autoload 'bmkp-next-bookmark-this-file/buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-next bookmark for the current file/buffer.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one.
See also `bmkp-cycle-this-file/buffer'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-previous-bookmark-this-file/buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-previous bookmark for the current file/buffer.
See `bmkp-next-bookmark-this-file/buffer'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-bookmark-this-file/buffer-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth next bookmark for the current file/buffer.
This is a repeatable version of `bmkp-next-bookmark-this-file/buffer'.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one (and no repeat).

\(fn ARG)" t nil)

(autoload 'bmkp-previous-bookmark-this-file/buffer-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth previous bookmark for the current file/buffer.
See `bmkp-next-bookmark-this-file/buffer-repeat'.

\(fn ARG)" t nil)

(autoload 'bmkp-next-bookmark-this-file "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-next bookmark for the current file.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one.
See also `bmkp-cycle-this-file'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-previous-bookmark-this-file "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-previous bookmark for the current file.
See `bmkp-next-bookmark-this-file'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-bookmark-this-file-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth next bookmark for the current file.
This is a repeatable version of `bmkp-next-bookmark-this-file'.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one (and no repeat).

\(fn ARG)" t nil)

(autoload 'bmkp-previous-bookmark-this-file-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth previous bookmark for the current file.
See `bmkp-next-bookmark-this-file-repeat'.

\(fn ARG)" t nil)

(autoload 'bmkp-next-bookmark-this-buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-next bookmark in the current buffer.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one.
See also `bmkp-cycle-this-buffer'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-previous-bookmark-this-buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth-previous bookmark in the current buffer.
See `bmkp-next-bookmark-this-buffer'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-bookmark-this-buffer-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth next bookmark in the current buffer.
This is a repeatable version of `bmkp-next-bookmark-this-buffer'.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one (and no repeat).

\(fn ARG)" t nil)

(autoload 'bmkp-previous-bookmark-this-buffer-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Jump to the Nth previous bookmark in the current buffer.
See `bmkp-next-bookmark-this-buffer-repeat'.

\(fn ARG)" t nil)

(autoload 'bmkp-next-bookmark-w32 "site-lisp/bookmark-plus/bookmark+-1" "\
Windows `Open' the Nth next bookmark in the bookmark navigation list.
MS Windows only.  Invokes the program associated with the file type.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one.
See also `bmkp-cycle'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-previous-bookmark-w32 "site-lisp/bookmark-plus/bookmark+-1" "\
Windows `Open' the Nth previous bookmark in the bookmark navlist.
See `bmkp-next-bookmark-w32'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-bookmark-w32-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Windows `Open' the Nth next bookmark in the bookmark navigation list.
This is a repeatable version of `bmkp-next-bookmark'.
N defaults to 1, meaning the next bookmark.
Plain `C-u' means start over at the first one (and no repeat).

\(fn ARG)" t nil)

(autoload 'bmkp-previous-bookmark-w32-repeat "site-lisp/bookmark-plus/bookmark+-1" "\
Windows `Open' the Nth previous bookmark in the bookmark navlist.
See `bmkp-next-bookmark-w32-repeat'.

\(fn ARG)" t nil)

(autoload 'bmkp-toggle-autonamed-bookmark-set/delete "site-lisp/bookmark-plus/bookmark+-1" "\
If there is an autonamed bookmark at point, delete it, else create one.
The bookmark created has no region.  Its name is formatted according
to option `bmkp-autoname-bookmark-function'.

With a prefix arg, delete *ALL* autonamed bookmarks for this buffer.

Non-interactively, act at POSITION, not point.  If nil, act at point.

\(fn &optional POSITION ALLP)" t nil)

(autoload 'bmkp-set-autonamed-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Set an autonamed bookmark at point.
The bookmark created has no region.  Its name is formatted according
to option `bmkp-autoname-bookmark-function'.
Non-interactively:
 - Act at POSITION, not point.  If nil, act at point.
 - Non-nil optional arg MSG-P means display a status message.

\(fn &optional POSITION MSG-P)" t nil)

(autoload 'bmkp-set-autonamed-bookmark-at-line "site-lisp/bookmark-plus/bookmark+-1" "\
Set an autonamed bookmark at the beginning of the given line NUMBER.
If NUMBER is nil, use the current line.

\(fn &optional NUMBER)" t nil)

(autoload 'bmkp-set-autonamed-regexp-buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Set autonamed bookmarks at matches for REGEXP in the buffer.
Non-interactively, non-nil MSG-P means display a status message.

\(fn REGEXP &optional MSG-P)" t nil)

(autoload 'bmkp-set-autonamed-regexp-region "site-lisp/bookmark-plus/bookmark+-1" "\
Set autonamed bookmarks at matches for REGEXP in the region.
Non-interactively, non-nil MSG-P means display a status message.

\(fn REGEXP BEG END &optional MSG-P)" t nil)

(autoload 'bmkp-delete-all-autonamed-for-this-buffer "site-lisp/bookmark-plus/bookmark+-1" "\
Delete all autonamed bookmarks for the current buffer.
Interactively, or with non-nil arg MSG-P, require confirmation.
To be deleted, a bookmark name must be an autonamed bookmark whose
buffer part names the current buffer.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-toggle-autotemp-on-set "site-lisp/bookmark-plus/bookmark+-1" "\
Toggle automatically making any bookmark temporary whenever it is set.
Non-interactively, non-nil MSG-P means display a status message.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-toggle-temporary-bookmark "site-lisp/bookmark-plus/bookmark+-1" "\
Toggle whether BOOKMARK is temporary (not saved to disk).
Return the full updated bookmark.
BOOKMARK is a bookmark name or a bookmark record.
Non-interactively, non-nil MSG-P means display a status message.

\(fn BOOKMARK &optional MSG-P)" t nil)

(autoload 'bmkp-make-bookmark-temporary "site-lisp/bookmark-plus/bookmark+-1" "\
Make BOOKMARK temporary (not saved to disk).
Return the full updated bookmark.
BOOKMARK is a bookmark name or a bookmark record.
Non-interactively, non-nil MSG-P means display a status message.

\(fn BOOKMARK &optional MSG-P)" t nil)

(autoload 'bmkp-make-bookmark-savable "site-lisp/bookmark-plus/bookmark+-1" "\
Make BOOKMARK savable to disk (not temporary).
Return the full updated bookmark.
BOOKMARK is a bookmark name or a bookmark record.
Non-interactively, non-nil MSG-P means display a status message.

\(fn BOOKMARK &optional MSG-P)" t nil)

(autoload 'bmkp-delete-all-temporary-bookmarks "site-lisp/bookmark-plus/bookmark+-1" "\
Delete all temporary bookmarks, after confirmation.
These are bookmarks that are `bmkp-temporary-bookmark-p'.  You can
make a bookmark temporary using `bmkp-make-bookmark-temporary' or
`bmkp-toggle-temporary-bookmark'.
Non-interactively, non-nil MSG-P means display a status message.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-delete-bookmarks "site-lisp/bookmark-plus/bookmark+-1" "\
Delete some bookmarks at point or all bookmarks in the buffer.
With no prefix argument, delete some bookmarks at point.
If there is more than one, require confirmation for each.

With a prefix argument, delete *ALL* bookmarks in the current buffer.

Non-interactively:
* Delete at POSITION, not point.  If nil, delete at point.
* Non-nil optional arg ALLP means delete all bookmarks in the buffer.
* ALIST is the alist of bookmarks.
  If nil, use the bookmarks in the current buffer.
* Non-nil MSG-P means display informative messages.

\(fn &optional POSITION ALLP ALIST MSG-P)" t nil)

;;;***

;;;### (autoloads (bmkp-bmenu-mouse-3-menu bmkp-bmenu-describe-marked
;;;;;;  bmkp-bmenu-describe-this-bookmark bmkp-bmenu-describe-this+move-up
;;;;;;  bmkp-bmenu-describe-this+move-down bmkp-reverse-multi-sort-order
;;;;;;  bmkp-reverse-sort-order bmkp-bmenu-change-sort-order bmkp-bmenu-change-sort-order-repeat
;;;;;;  bmkp-bmenu-quit bmkp-bmenu-edit-marked bmkp-bmenu-edit-bookmark-record
;;;;;;  bmkp-bmenu-edit-tags bmkp-bmenu-edit-bookmark-name-and-file
;;;;;;  bmkp-define-tags-sort-command bmkp-bmenu-define-full-snapshot-command
;;;;;;  bmkp-bmenu-define-command bmkp-bmenu-define-jump-marked-command
;;;;;;  bmkp-bmenu-mode-status-help bmkp-bmenu-w32-open-select bmkp-bmenu-w32-open-with-mouse
;;;;;;  bmkp-bmenu-w32-open bmkp-bmenu-show-or-edit-annotation bmkp-bmenu-paste-replace-tags-for-marked
;;;;;;  bmkp-bmenu-paste-add-tags-to-marked bmkp-bmenu-paste-replace-tags
;;;;;;  bmkp-bmenu-paste-add-tags bmkp-bmenu-copy-tags bmkp-bmenu-unmark-bookmarks-tagged-not-all
;;;;;;  bmkp-bmenu-unmark-bookmarks-tagged-some bmkp-bmenu-unmark-bookmarks-tagged-none
;;;;;;  bmkp-bmenu-unmark-bookmarks-tagged-all bmkp-bmenu-unmark-bookmarks-tagged-regexp
;;;;;;  bmkp-bmenu-mark-bookmarks-tagged-not-all bmkp-bmenu-mark-bookmarks-tagged-some
;;;;;;  bmkp-bmenu-mark-bookmarks-tagged-none bmkp-bmenu-mark-bookmarks-tagged-all
;;;;;;  bmkp-bmenu-mark-bookmarks-tagged-regexp bmkp-bmenu-remove-tags-from-marked
;;;;;;  bmkp-bmenu-add-tags-to-marked bmkp-bmenu-remove-tags bmkp-bmenu-set-tag-value-for-marked
;;;;;;  bmkp-bmenu-set-tag-value bmkp-bmenu-add-tags bmkp-bmenu-remove-all-tags
;;;;;;  bmkp-bmenu-show-only-tagged bmkp-bmenu-query-replace-marked-bookmarks-regexp
;;;;;;  bmkp-bmenu-search-marked-bookmarks-regexp bmkp-bmenu-show-only-omitted
;;;;;;  bmkp-bmenu-unomit-marked bmkp-bmenu-omit-marked bmkp-bmenu-omit/unomit-marked
;;;;;;  bmkp-bmenu-omit bmkp-bmenu-make-sequence-from-marked bmkp-bmenu-load-marked-bookmark-file-bookmarks
;;;;;;  bmkp-bmenu-delete-marked bmkp-bmenu-dired-marked bmkp-bmenu-toggle-temporary
;;;;;;  bmkp-bmenu-toggle-marked-temporary/savable bmkp-bmenu-toggle-marks
;;;;;;  bmkp-bmenu-mark-bookmarks-satisfying bmkp-bmenu-mark-w3m-bookmarks
;;;;;;  bmkp-bmenu-mark-url-bookmarks bmkp-bmenu-mark-variable-list-bookmarks
;;;;;;  bmkp-bmenu-mark-temporary-bookmarks bmkp-bmenu-mark-specific-file-bookmarks
;;;;;;  bmkp-bmenu-mark-specific-buffer-bookmarks bmkp-bmenu-mark-region-bookmarks
;;;;;;  bmkp-bmenu-mark-orphaned-local-file-bookmarks bmkp-bmenu-mark-non-file-bookmarks
;;;;;;  bmkp-bmenu-mark-man-bookmarks bmkp-bmenu-mark-info-bookmarks
;;;;;;  bmkp-bmenu-mark-image-bookmarks bmkp-bmenu-mark-gnus-bookmarks
;;;;;;  bmkp-bmenu-mark-file-bookmarks bmkp-bmenu-mark-dired-bookmarks
;;;;;;  bmkp-bmenu-mark-desktop-bookmarks bmkp-bmenu-mark-bookmark-file-bookmarks
;;;;;;  bmkp-bmenu-mark-autonamed-bookmarks bmkp-bmenu-mark-autofile-bookmarks
;;;;;;  bmkp-bmenu-regexp-mark bmkp-bmenu-unmark-all bmkp-bmenu-mark-all
;;;;;;  bmkp-bmenu-toggle-show-only-marked bmkp-bmenu-toggle-show-only-unmarked
;;;;;;  bmkp-bmenu-filter-tags-incrementally bmkp-bmenu-filter-annotation-incrementally
;;;;;;  bmkp-bmenu-filter-file-name-incrementally bmkp-bmenu-filter-bookmark-name-incrementally
;;;;;;  bmkp-bmenu-refresh-menu-list bmkp-bmenu-show-all bmkp-bmenu-show-only-w3m-urls
;;;;;;  bmkp-bmenu-show-only-urls bmkp-bmenu-show-only-specific-file
;;;;;;  bmkp-bmenu-show-only-specific-buffer bmkp-bmenu-show-only-variable-lists
;;;;;;  bmkp-bmenu-show-only-temporary bmkp-bmenu-show-only-regions
;;;;;;  bmkp-bmenu-show-only-man-pages bmkp-bmenu-show-only-info-nodes
;;;;;;  bmkp-bmenu-show-only-image-files bmkp-bmenu-show-only-gnus
;;;;;;  bmkp-bmenu-show-only-non-files bmkp-bmenu-show-only-orphaned-local-files
;;;;;;  bmkp-bmenu-show-only-files bmkp-bmenu-show-only-dired bmkp-bmenu-show-only-desktops
;;;;;;  bmkp-bmenu-show-only-bookmark-files bmkp-bmenu-show-only-autonamed
;;;;;;  bmkp-bmenu-show-only-autofiles bookmark-bmenu-rename bookmark-bmenu-execute-deletions
;;;;;;  bookmark-bmenu-show-annotation bookmark-bmenu-other-window-with-mouse
;;;;;;  bookmark-bmenu-switch-other-window bookmark-bmenu-other-window
;;;;;;  bookmark-bmenu-this-window bookmark-bmenu-2-window bookmark-bmenu-1-window
;;;;;;  bookmark-bmenu-list bookmark-bmenu-delete-backwards bookmark-bmenu-delete
;;;;;;  bookmark-bmenu-unmark bookmark-bmenu-mark bmkp-bmenu-image-bookmark-icon-file
;;;;;;  bmkp-bmenu-state-file bmkp-bmenu-commands-file bmkp-bmenu-omitted-bookmarks)
;;;;;;  "site-lisp/bookmark-plus/bookmark+-bmu" "site-lisp/bookmark-plus/bookmark+-bmu.el"
;;;;;;  (20488 45649))
;;; Generated autoloads from site-lisp/bookmark-plus/bookmark+-bmu.el

(defvar bmkp-bmenu-omitted-bookmarks nil "\
*List of names of omitted bookmarks.
They are generally not available for display in the bookmark list.
You can, however, use \\<bookmark-bmenu-mode-map>`\\[bmkp-bmenu-show-only-omitted]' to see them.
You can then mark some of them and use `\\[bmkp-bmenu-omit/unomit-marked]'
 to make those that are marked available again for the bookmark list.")

(custom-autoload 'bmkp-bmenu-omitted-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" t)

(defvar bmkp-bmenu-commands-file (convert-standard-filename "~/.emacs-bmk-bmenu-commands.el") "\
*File for saving user-defined bookmark-list commands.
This must be an absolute file name (possibly containing `~') or nil
\(it is not expanded).

You can use `\\[bmkp-list-defuns-in-commands-file]' to list the
commands defined in the file and how many times each is defined.

NOTE: Each time you define a command using \\<bookmark-bmenu-mode-map>`\\[bmkp-bmenu-define-command]', `\\[bmkp-bmenu-define-full-snapshot-command]', `\\[bmkp-bmenu-define-jump-marked-command], or `\\[bmkp-define-tags-sort-command]',
it is saved in the file.  The new definition is simply appended to the
file - old definitions of the same command are not overwritten.  So
you might want to clean up the file occasionally, to remove any old,
unused definitions.  This is especially advisable if you used `\\[bmkp-bmenu-define-full-snapshot-command]',
because such command definitions can be very large.")

(custom-autoload 'bmkp-bmenu-commands-file "site-lisp/bookmark-plus/bookmark+-bmu" t)

(defvar bmkp-bmenu-state-file (convert-standard-filename "~/.emacs-bmk-bmenu-state.el") "\
*File for saving `*Bookmark List*' state when you quit bookmark list.
This must be an absolute file name (possibly containing `~') or nil
\(it is not expanded).

The state is also saved when you quit Emacs, even if you don't quit
the bookmark list first (using \\<bookmark-bmenu-mode-map>`\\[bmkp-bmenu-quit]').

Set this to nil if you do not want to restore the bookmark list as it
was the last time you used it.")

(custom-autoload 'bmkp-bmenu-state-file "site-lisp/bookmark-plus/bookmark+-bmu" t)

(defvar bmkp-bmenu-image-bookmark-icon-file (and (fboundp 'display-images-p) (display-images-p) (let ((bmk-img (convert-standard-filename "~/.emacs-bmk-bmenu-image-file-icon.png")) (emacs-img (convert-standard-filename (concat data-directory "images/gnus/exit-gnus.xpm")))) (or (and (file-readable-p bmk-img) bmk-img) (and (file-readable-p emacs-img) emacs-img)))) "\
*Iconic image file to show next to image-file bookmarks.
If nil, show no image.  Otherwise, this is an absolute file name,
possibly containing `~', (the value is not expanded).

Use any image file that Emacs can display, but you probably want to
use a small, iconic image - say 16x16 pixels.

The default image, which you are sure to have in any Emacs version
that supports images, is 24x24 pixels.  That wastes vertical space, so
you probably want to use something smaller.

If you don't have another image that you prefer, try this one (16x16):
http://www.emacswiki.org/emacs/BookmarkPlusImageFileDefaultIcon")

(custom-autoload 'bmkp-bmenu-image-bookmark-icon-file "site-lisp/bookmark-plus/bookmark+-bmu" t)

(autoload 'bookmark-bmenu-mark "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark the bookmark on this line, using mark `>'.
Add its name to `bmkp-bmenu-marked-bookmarks', after propertizing it
with the full bookmark as `bmkp-full-record'.

If the bookmark was unmarked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P means display a status message.

\(fn &optional NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bookmark-bmenu-unmark "site-lisp/bookmark-plus/bookmark+-bmu" "\
Unmark the bookmark on this line, then move down to the next.
With a prefix argument, move up instead.

If the bookmark was marked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* Non-nil optional arg BACKUP (prefix arg) means move up.
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P means display a status message.

\(fn &optional BACKUP NO-RE-SORT-P MSG-P)" t nil)

(defalias 'bmkp-bmenu-flag-for-deletion 'bookmark-bmenu-delete)

(autoload 'bookmark-bmenu-delete "site-lisp/bookmark-plus/bookmark+-bmu" "\
Flag this bookmark for deletion, using mark `D'.
Use `\\<bookmark-bmenu-mode-map>\\[bookmark-bmenu-execute-deletions]' to carry out the deletions.

\(fn)" t nil)

(defalias 'bmkp-bmenu-flag-for-deletion-backwards 'bookmark-bmenu-delete-backwards)

(autoload 'bookmark-bmenu-delete-backwards "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmark on this line to be deleted, then move up one line.
To carry out the deletions that you've marked, use \\<bookmark-bmenu-mode-map>\\[bookmark-bmenu-execute-deletions].

\(fn)" t nil)

(defalias 'list-bookmarks 'bookmark-bmenu-list)

(autoload 'bookmark-bmenu-list "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display a list of existing bookmarks, in buffer `*Bookmark List*'.
The leftmost column of a bookmark entry shows `D' if the bookmark is
 flagged for deletion, or `>' if it is marked normally.
The second column shows `t' if the bookmark has tags.
The third  column shows `a' if the bookmark has an annotation.

The following faces are used for the list entries.
Use `customize-face' if you want to change the appearance.

 `bmkp-bad-bookmark', `bmkp-bookmark-list', `bmkp-buffer',
 `bmkp-desktop', `bmkp-file-handler', `bmkp-function', `bmkp-gnus',
 `bmkp-info', `bmkp-local-directory',
 `bmkp-local-file-without-region', `bmkp-local-file-with-region',
 `bmkp-man', `bmkp-non-file', `bmkp-remote-file', `bmkp-sequence',
 `bmkp-su-or-sudo', `bmkp-url', `bmkp-variable-list'.

If option `bmkp-bmenu-state-file' is non-nil then the state of the
displayed bookmark-list is saved when you quit it, and it is restored
when you next use this command.  That saved state is not restored,
however, if it represents a different file from the current bookmark
file.

If you call this interactively when buffer `*Bookmark List*' exists,
that buffer is refreshed to show all current bookmarks, and any
markings are removed.  If you instead want to show the buffer in its
latest state then just do that: use `C-x b' or similar.  If you want
to refresh the displayed buffer, to show the latest state, reflecting
any additions, deletions, renamings, and so on, use \\<bookmark-bmenu-mode-map>`\\[bmkp-bmenu-refresh-menu-list]'.


Non-interactively:

 - Non-nil optional argument FILTEREDP means the bookmark list has
   been filtered, which means:

   * Use `bmkp-bmenu-title' not the default menu-list title.
   * Do not reset `bmkp-latest-bookmark-alist' to `bookmark-alist'.

 - Non-nil optional arg MSG-P means display progress messages.

In Lisp code, non-nil optional argument FILTEREDP means the bookmark
list has been filtered, which means:
 * Use `bmkp-bmenu-title' not the default menu-list title.
 * Do not reset `bmkp-latest-bookmark-alist' to `bookmark-alist'.

\(fn &optional FILTEREDP MSG-P)" t nil)

(autoload 'bookmark-bmenu-1-window "site-lisp/bookmark-plus/bookmark+-bmu" "\
Select this line's bookmark, alone, in full frame.
See `bookmark-jump' for info about the prefix arg.

\(fn &optional USE-REGION-P)" t nil)

(autoload 'bookmark-bmenu-2-window "site-lisp/bookmark-plus/bookmark+-bmu" "\
Select this line's bookmark, with previous buffer in second window.
See `bookmark-jump' for info about the prefix arg.

\(fn &optional USE-REGION-P)" t nil)

(autoload 'bookmark-bmenu-this-window "site-lisp/bookmark-plus/bookmark+-bmu" "\
Select this line's bookmark in this window.
See `bookmark-jump' for info about the prefix arg.

\(fn &optional USE-REGION-P)" t nil)

(autoload 'bookmark-bmenu-other-window "site-lisp/bookmark-plus/bookmark+-bmu" "\
Select this line's bookmark in other window.  Show `*Bookmark List*' still.
See `bookmark-jump' for info about the prefix arg.

\(fn &optional USE-REGION-P)" t nil)

(autoload 'bookmark-bmenu-switch-other-window "site-lisp/bookmark-plus/bookmark+-bmu" "\
Make the other window select this line's bookmark.
The current window remains selected.
See `bookmark-jump' for info about the prefix arg.

\(fn &optional USE-REGION-P)" t nil)

(autoload 'bookmark-bmenu-other-window-with-mouse "site-lisp/bookmark-plus/bookmark+-bmu" "\
Select clicked bookmark in other window.  Show `*Bookmark List*' still.

\(fn EVENT &optional USE-REGION-P)" t nil)

(autoload 'bookmark-bmenu-show-annotation "site-lisp/bookmark-plus/bookmark+-bmu" "\
Show the annotation for the current bookmark in another window.

\(fn MSG-P)" t nil)

(autoload 'bookmark-bmenu-execute-deletions "site-lisp/bookmark-plus/bookmark+-bmu" "\
Delete (visible) bookmarks flagged `D'.
With a prefix argument, delete the bookmarks marked `>' instead, after
confirmation.

\(fn &optional MARKEDP)" t nil)

(autoload 'bookmark-bmenu-rename "site-lisp/bookmark-plus/bookmark+-bmu" "\
Rename bookmark on current line.  Prompts for a new name.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-autofiles "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the autofile bookmarks.
This means bookmarks whose names are the same as their (non-directory)
file names.  But with a prefix arg you are prompted for a prefix that
each bookmark name must have.

\(fn &optional ARG)" t nil)

(autoload 'bmkp-bmenu-show-only-autonamed "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the autonamed bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-bookmark-files "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the bookmark-file bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-desktops "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the desktop bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-dired "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the Dired bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-files "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display a list of file and directory bookmarks (only).
With a prefix argument, do not include remote files or directories.

\(fn ARG)" t nil)

(autoload 'bmkp-bmenu-show-only-orphaned-local-files "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display a list of orphaned local file and directory bookmarks (only).
With a prefix argument, include remote orphans as well.

\(fn ARG)" t nil)

(autoload 'bmkp-bmenu-show-only-non-files "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the non-file bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-gnus "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the Gnus bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-image-files "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the image-file bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-info-nodes "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the Info bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-man-pages "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the `man' page bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-regions "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the bookmarks that record a region.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-temporary "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the temporary bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-variable-lists "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the variable-list bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-specific-buffer "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the bookmarks for BUFFER.
Interactively, read the BUFFER name.
If BUFFER is non-nil, set `bmkp-last-specific-buffer' to it.

\(fn &optional BUFFER)" t nil)

(autoload 'bmkp-bmenu-show-only-specific-file "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the bookmarks for FILE, an absolute file name.
Interactively, read the FILE name.
If FILE is non-nil, set `bmkp-last-specific-file' to it.

\(fn &optional FILE)" t nil)

(autoload 'bmkp-bmenu-show-only-urls "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the URL bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-w3m-urls "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the W3M URL bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-all "site-lisp/bookmark-plus/bookmark+-bmu" "\
Show all bookmarks known to the bookmark list (aka \"menu list\").
Omitted bookmarks are not shown, however.
Also, this does not revert the bookmark list, to bring it up to date.
To revert the list, use `\\<bookmark-bmenu-mode-map>\\[bmkp-bmenu-refresh-menu-list]'.

\(fn)" t nil)

(autoload 'bmkp-bmenu-refresh-menu-list "site-lisp/bookmark-plus/bookmark+-bmu" "\
Refresh (revert) the bookmark list display (aka \"menu list\").
This brings the displayed list up to date with respect to the current
bookmark list.  It does not change the filtering or sorting of the
displayed list.

With a prefix argument and upon confirmation, refresh the bookmark
list and its display from the current bookmark file.  IOW, it reloads
the file, overwriting the current bookmark list.  This also removes
any markings and omissions.

You can use command `bmkp-toggle-bookmark-set-refreshes' to toggle
whether setting a bookmark in any way should automatically refresh the
list.

From Lisp, non-nil optional arg MSG-P means show progress messages.

\(fn &optional ARG MSG-P)" t nil)

(autoload 'bmkp-bmenu-filter-bookmark-name-incrementally "site-lisp/bookmark-plus/bookmark+-bmu" "\
Incrementally filter bookmarks by bookmark name using a regexp.

\(fn)" t nil)

(autoload 'bmkp-bmenu-filter-file-name-incrementally "site-lisp/bookmark-plus/bookmark+-bmu" "\
Incrementally filter bookmarks by file name using a regexp.

\(fn)" t nil)

(autoload 'bmkp-bmenu-filter-annotation-incrementally "site-lisp/bookmark-plus/bookmark+-bmu" "\
Incrementally filter bookmarks by their annotations using a regexp.

\(fn)" t nil)

(autoload 'bmkp-bmenu-filter-tags-incrementally "site-lisp/bookmark-plus/bookmark+-bmu" "\
Incrementally filter bookmarks by tags using a regexp.

\(fn)" t nil)

(autoload 'bmkp-bmenu-toggle-show-only-unmarked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Hide all marked bookmarks.  Repeat to toggle, showing all.

\(fn)" t nil)

(autoload 'bmkp-bmenu-toggle-show-only-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Hide all unmarked bookmarks.  Repeat to toggle, showing all.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-all "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark all bookmarks, using mark `>'.
If any bookmark was unmarked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P meands display a status message.

\(fn &optional NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bmkp-bmenu-unmark-all "site-lisp/bookmark-plus/bookmark+-bmu" "\
Remove a mark from each bookmark.
Hit the mark character (`>' or `D') to remove those marks,
 or hit `RET' to remove all marks (both `>' and `D').
With a prefix arg, you are queried to unmark each marked bookmark.
Use `\\[help-command]' during querying for help.

If any bookmark was marked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* MARK is the mark character or a carriage-return character (`?').
* Non-nil ARG (prefix arg) means query.
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P meands display a status message.

\(fn MARK &optional ARG NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bmkp-bmenu-regexp-mark "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmarks that match REGEXP.
The entire bookmark line is tested: bookmark name and possibly file name.
Note too that if file names are not shown currently then the bookmark
name is padded at the right with spaces.

If any bookmark was unmarked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P means display a status message.

\(fn REGEXP &optional NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bmkp-bmenu-mark-autofile-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark autofile bookmarks: those whose names are the same as their files.
With a prefix arg you are prompted for a prefix that each bookmark
name must have.

\(fn &optional ARG)" t nil)

(autoload 'bmkp-bmenu-mark-autonamed-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark autonamed bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-bookmark-file-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmark-file bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-desktop-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark desktop bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-dired-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark Dired bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-file-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark file bookmarks.
With a prefix argument, do not mark remote files or directories.

\(fn ARG)" t nil)

(autoload 'bmkp-bmenu-mark-gnus-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark Gnus bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-image-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark image-file bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-info-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark Info bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-man-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark `man' page bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-non-file-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark non-file bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-orphaned-local-file-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark orphaned local-file bookmarks (their recorded files are not readable).
With a prefix argument, mark also remote orphaned files or directories.

\(fn ARG)" t nil)

(autoload 'bmkp-bmenu-mark-region-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmarks that record a region.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-specific-buffer-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmarks for BUFFER.
Interactively, read the name of the buffer.
If BUFFER is non-nil, set `bmkp-last-specific-buffer' to it.

\(fn &optional BUFFER)" t nil)

(autoload 'bmkp-bmenu-mark-specific-file-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmarks for FILE, an absolute file name.
Interactively, read the file name.
If FILE is non-nil, set `bmkp-last-specific-file' to it.

\(fn &optional FILE)" t nil)

(autoload 'bmkp-bmenu-mark-temporary-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark temporary bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-variable-list-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark variable-list bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-url-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark URL bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-w3m-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark W3M (URL) bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mark-bookmarks-satisfying "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmarks that satisfy predicate PRED.
If you use this interactively, you are responsible for entering a
symbol that names a unnary predicate.  The function you provide is not
checked - it is simply applied to each bookmark to test it.

If any bookmark was unmarked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P means display a status message.

\(fn PRED &optional NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bmkp-bmenu-toggle-marks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Toggle marks: Unmark all marked bookmarks; mark all unmarked bookmarks.
This affects only the `>' mark, not the `D' flag.

Interactively or with nil optional arg NO-RE-SORT-P, if the current
sort order is marked first or last (`s >'), then re-sort.

Non-interactively, non-nil optional arg MSG-P means display a status
message.

\(fn &optional BACKUP NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bmkp-bmenu-toggle-marked-temporary/savable "site-lisp/bookmark-plus/bookmark+-bmu" "\
Toggle the temporary/savable status of each marked bookmark.
If none are marked, toggle status of the bookmark of the current line.

\(fn)" t nil)

(autoload 'bmkp-bmenu-toggle-temporary "site-lisp/bookmark-plus/bookmark+-bmu" "\
Toggle whether bookmark of current line is temporary (not saved to disk).

\(fn)" t nil)

(autoload 'bmkp-bmenu-dired-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Dired in another window for the marked file and directory bookmarks.

Absolute file names are used for the entries in the Dired buffer.
The only entries are for the marked files and directories.  These can
be located anywhere.  (In Emacs versions prior to release 23.2, remote
bookmarks are ignored, because of Emacs bug #5478.)

You are prompted for the Dired buffer name.  The `default-directory'
of the buffer is the same as that of buffer `*Bookmark List*'.

\(fn DIRBUFNAME)" t nil)

(autoload 'bmkp-bmenu-delete-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Delete all (visible) bookmarks that are marked `>', after confirmation.

\(fn)" t nil)

(autoload 'bmkp-bmenu-load-marked-bookmark-file-bookmarks "site-lisp/bookmark-plus/bookmark+-bmu" "\
Load the bookmark-file bookmarks that are marked, in display order.
Non bookmark-file bookmarks that are marked are ignored.
You can sort the bookmark-list display to change the load order.

NOTE: Automatically saving the current bookmark list is turned OFF
before loading, and it remains turned off until you explicitly turn it
back on.  Bookmark+ does not assume that you want to automatically
save all of the newly loaded bookmarks in the same bookmark file.  If
you do, just use \\<bookmark-bmenu-mode-map>`\\[bmkp-toggle-saving-bookmark-file]' to turn saving back on.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-make-sequence-from-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Create or update a sequence bookmark from the visible marked bookmarks.
The bookmarks that are currently marked are recorded as a sequence, in
their current order in buffer `*Bookmark List*'.
When you \"jump\" to the sequence bookmark, the bookmarks in the
sequence are processed in order.

By default, omit the marked bookmarks, after creating the sequence.
With a prefix arg, do not omit them.

If a bookmark with the specified name already exists, it is
overwritten.  If a sequence bookmark with the name already exists,
then you are prompted whether to add the marked bookmarks to the
beginning of the existing sequence (or simply replace it).

Note that another existing sequence bookmark can be marked, and thus
included in the sequence bookmark created or updated.  That is, you
can include other sequences within a sequence bookmark.

Returns the bookmark (internal record) created or updated.

\(fn BOOKMARK-NAME &optional DONT-OMIT-P)" t nil)

(autoload 'bmkp-bmenu-omit "site-lisp/bookmark-plus/bookmark+-bmu" "\
Omit this bookmark.

\(fn)" t nil)

(autoload 'bmkp-bmenu-omit/unomit-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Omit all marked bookmarks or, if showing only omitted ones, unomit.

\(fn)" t nil)

(autoload 'bmkp-bmenu-omit-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Omit all marked bookmarks.
They will henceforth be invisible to the bookmark list.
You can, however, use \\<bookmark-bmenu-mode-map>`\\[bmkp-bmenu-show-only-omitted]' to see them.
You can then mark some of them and use `\\[bmkp-bmenu-omit/unomit-marked]' to make those marked
 available again for the bookmark list.

\(fn)" t nil)

(autoload 'bmkp-bmenu-unomit-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Remove all marked bookmarks from the list of omitted bookmarks.
They will henceforth be available for display in the bookmark list.
\(In order to see and then mark omitted bookmarks you must use \\<bookmark-bmenu-mode-map>`\\[bmkp-bmenu-show-only-omitted]'.)

\(fn)" t nil)

(autoload 'bmkp-bmenu-show-only-omitted "site-lisp/bookmark-plus/bookmark+-bmu" "\
Show only the omitted bookmarks.
You can then mark some of them and use `bmkp-bmenu-unomit-marked' to
 make those that are marked available again for the bookmark list.

\(fn)" t nil)

(autoload 'bmkp-bmenu-search-marked-bookmarks-regexp "site-lisp/bookmark-plus/bookmark+-bmu" "\
Search the marked file bookmarks, in their current order, for REGEXP.
Use `\\[tags-loop-continue]' to advance among the search hits.
Marked directory and non-file bookmarks are ignored.

\(fn REGEXP)" t nil)

(autoload 'bmkp-bmenu-query-replace-marked-bookmarks-regexp "site-lisp/bookmark-plus/bookmark+-bmu" "\
`query-replace-regexp' FROM with TO, for all marked file bookmarks.
DELIMITED (prefix arg) means replace only word-delimited matches.
If you exit (`\\[keyboard-quit]', `RET' or `q'), you can use `\\[tags-loop-continue]' to resume where
you left off.

\(fn FROM TO &optional DELIMITED)" t nil)

(autoload 'bmkp-bmenu-show-only-tagged "site-lisp/bookmark-plus/bookmark+-bmu" "\
Display (only) the bookmarks that have tags.

\(fn)" t nil)

(autoload 'bmkp-bmenu-remove-all-tags "site-lisp/bookmark-plus/bookmark+-bmu" "\
Remove all tags from this bookmark.
Interactively, you are required to confirm.

\(fn &optional MUST-CONFIRM-P)" t nil)

(autoload 'bmkp-bmenu-add-tags "site-lisp/bookmark-plus/bookmark+-bmu" "\
Add some tags to this bookmark.

\(fn)" t nil)

(autoload 'bmkp-bmenu-set-tag-value "site-lisp/bookmark-plus/bookmark+-bmu" "\
Set the value of one of this bookmark's tags.

\(fn)" t nil)

(autoload 'bmkp-bmenu-set-tag-value-for-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Set the value of TAG to VALUE, for each of the marked bookmarks.
If any of the bookmarks has no tag named TAG, then add one with VALUE.

\(fn TAG VALUE &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-remove-tags "site-lisp/bookmark-plus/bookmark+-bmu" "\
Remove some tags from this bookmark.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-add-tags-to-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Add TAGS to each of the marked bookmarks.
TAGS is a list of strings.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter each tag, but you are not limited to
choosing existing tags.

\(fn TAGS &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-remove-tags-from-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Remove TAGS from each of the marked bookmarks.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter each tag.

\(fn TAGS &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-mark-bookmarks-tagged-regexp "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark bookmarks any of whose tags match REGEXP.
With a prefix arg, mark all that are tagged but have no matching tags.

If any bookmark was unmarked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* Non-nil NOTP: see prefix arg, above.
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P means display a status message.

\(fn REGEXP &optional NOTP NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bmkp-bmenu-mark-bookmarks-tagged-all "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark all visible bookmarks that are tagged with *each* tag in TAGS.
As a special case, if TAGS is empty, then mark the bookmarks that have
any tags at all (i.e., at least one tag).

With a prefix arg, mark all that are *not* tagged with *any* TAGS.

\(fn TAGS &optional NONEP MSG-P)" t nil)

(autoload 'bmkp-bmenu-mark-bookmarks-tagged-none "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark all visible bookmarks that are not tagged with *any* tag in TAGS.
As a special case, if TAGS is empty, then mark the bookmarks that have
no tags at all.

With a prefix arg, mark all that are tagged with *each* tag in TAGS.

\(fn TAGS &optional ALLP MSG-P)" t nil)

(autoload 'bmkp-bmenu-mark-bookmarks-tagged-some "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark all visible bookmarks that are tagged with *some* tag in TAGS.
As a special case, if TAGS is empty, then mark the bookmarks that have
any tags at all.

With a prefix arg, mark all that are *not* tagged with *all* TAGS.

Hit `RET' to enter each tag, then hit `RET' again after the last tag.
You can use completion to enter each tag.

\(fn TAGS &optional SOMENOTP MSG-P)" t nil)

(autoload 'bmkp-bmenu-mark-bookmarks-tagged-not-all "site-lisp/bookmark-plus/bookmark+-bmu" "\
Mark all visible bookmarks that are *not* tagged with *all* TAGS.
As a special case, if TAGS is empty, then mark the bookmarks that have
no tags at all.

With a prefix arg, mark all that are tagged with *some* tag in TAGS.

\(fn TAGS &optional SOMEP MSG-P)" t nil)

(autoload 'bmkp-bmenu-unmark-bookmarks-tagged-regexp "site-lisp/bookmark-plus/bookmark+-bmu" "\
Unmark bookmarks any of whose tags match REGEXP.
With a prefix arg, mark all that are tagged but have no matching tags.

If any bookmark was marked before, and if the sort order is marked
first or last (`s >'), then re-sort.

Non-interactively:
* Non-nil NOTP: see prefix arg, above.
* Non-nil optional arg NO-RE-SORT-P inhibits re-sorting.
* Non-nil optional arg MSG-P means display a status message.

\(fn REGEXP &optional NOTP NO-RE-SORT-P MSG-P)" t nil)

(autoload 'bmkp-bmenu-unmark-bookmarks-tagged-all "site-lisp/bookmark-plus/bookmark+-bmu" "\
Unmark all visible bookmarks that are tagged with *each* tag in TAGS.
As a special case, if TAGS is empty, then unmark the bookmarks that have
any tags at all.

With a prefix arg, unmark all that are *not* tagged with *any* TAGS.

\(fn TAGS &optional NONEP MSG-P)" t nil)

(autoload 'bmkp-bmenu-unmark-bookmarks-tagged-none "site-lisp/bookmark-plus/bookmark+-bmu" "\
Unmark all visible bookmarks that are *not* tagged with *any* TAGS.
As a special case, if TAGS is empty, then unmark the bookmarks that have
no tags at all.

With a prefix arg, unmark all that are tagged with *each* tag in TAGS.

\(fn TAGS &optional ALLP MSG-P)" t nil)

(autoload 'bmkp-bmenu-unmark-bookmarks-tagged-some "site-lisp/bookmark-plus/bookmark+-bmu" "\
Unmark all visible bookmarks that are tagged with *some* tag in TAGS.
As a special case, if TAGS is empty, then unmark the bookmarks that have
any tags at all.

With a prefix arg, unmark all that are *not* tagged with *all* TAGS.

\(fn TAGS &optional SOMENOTP MSG-P)" t nil)

(autoload 'bmkp-bmenu-unmark-bookmarks-tagged-not-all "site-lisp/bookmark-plus/bookmark+-bmu" "\
Unmark all visible bookmarks that are *not* tagged with *all* TAGS.
As a special case, if TAGS is empty, then unmark the bookmarks that have
no tags at all.

With a prefix arg, unmark all that are tagged with *some* TAGS.

\(fn TAGS &optional SOMEP MSG-P)" t nil)

(autoload 'bmkp-bmenu-copy-tags "site-lisp/bookmark-plus/bookmark+-bmu" "\
Copy tags from this bookmark, so you can paste them to another bookmark.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-paste-add-tags "site-lisp/bookmark-plus/bookmark+-bmu" "\
Add tags to this bookmark that were copied from another bookmark.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-paste-replace-tags "site-lisp/bookmark-plus/bookmark+-bmu" "\
Replace tags for this bookmark with those copied from another bookmark.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-paste-add-tags-to-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Add tags that were copied from another bookmark to the marked bookmarks.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-paste-replace-tags-for-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Replace tags for the marked bookmarks with tags copied previously.

\(fn &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-show-or-edit-annotation "site-lisp/bookmark-plus/bookmark+-bmu" "\
Show annotation for current bookmark in another window.  `C-u': Edit.
With no prefix arg, show the annotation.  With a prefix arg, edit it.

\(fn EDITP MSG-P)" t nil)

(autoload 'bmkp-bmenu-w32-open "site-lisp/bookmark-plus/bookmark+-bmu" "\
Use `w32-browser' to open this bookmark.

\(fn)" t nil)

(autoload 'bmkp-bmenu-w32-open-with-mouse "site-lisp/bookmark-plus/bookmark+-bmu" "\
Use `w32-browser' to open the bookmark clicked.

\(fn EVENT)" t nil)

(autoload 'bmkp-bmenu-w32-open-select "site-lisp/bookmark-plus/bookmark+-bmu" "\
Use `w32-browser' to open this bookmark and all marked bookmarks.

\(fn)" t nil)

(autoload 'bmkp-bmenu-mode-status-help "site-lisp/bookmark-plus/bookmark+-bmu" "\
`describe-mode' + current status of `*Bookmark List*' + face legend.

\(fn)" t nil)

(autoload 'bmkp-bmenu-define-jump-marked-command "site-lisp/bookmark-plus/bookmark+-bmu" "\
Define a command to jump to a bookmark that is one of those now marked.
The bookmarks marked now will be those that are completion candidates
for the command (but omitted bookmarks are excluded).
Save the command definition in `bmkp-bmenu-commands-file'.

\(fn)" t nil)

(autoload 'bmkp-bmenu-define-command "site-lisp/bookmark-plus/bookmark+-bmu" "\
Define a command to use the current sort order, filter, and omit list.
Prompt for the command name.  Save the command definition in
`bmkp-bmenu-commands-file'.

The current sort order, filter function, omit list, and title for
buffer `*Bookmark List*' are encapsulated as part of the command.
Use the command at any time to restore them.

\(fn)" t nil)

(autoload 'bmkp-bmenu-define-full-snapshot-command "site-lisp/bookmark-plus/bookmark+-bmu" "\
Define a command to restore the current bookmark-list state.
Prompt for the command name.  Save the command definition in
`bmkp-bmenu-commands-file'.

Be aware that the command definition can be quite large, since it
copies the current bookmark list and accessory lists (hidden
bookmarks, marked bookmarks, etc.).  For a lighter weight command, use
`bmkp-bmenu-define-full-snapshot-command' instead.  That records only
the omit list and the sort & filter information.

\(fn)" t nil)

(autoload 'bmkp-define-tags-sort-command "site-lisp/bookmark-plus/bookmark+-bmu" "\
Define a command to sort bookmarks in the bookmark list by tags.
Hit `RET' to enter each tag, then hit `RET' again after the last tag.

The new command sorts first by the first tag in TAGS, then by the
second, and so on.

Besides sorting for these specific tags, any bookmark that has a tag
sorts before one that has no tags.  Otherwise, sorting is by bookmark
name, alphabetically.

The name of the new command is `bmkp-bmenu-sort-' followed by the
specified tags, in order, separated by hyphens (`-').  E.g., for TAGS
\(\"alpha\" \"beta\"), the name is `bmkp-bmenu-sort-alpha-beta'.

\(fn TAGS &optional MSG-P)" t nil)

(autoload 'bmkp-bmenu-edit-bookmark-name-and-file "site-lisp/bookmark-plus/bookmark+-bmu" "\
Edit the bookmark under the cursor: its name and file name.
With a prefix argument, edit the complete bookmark record (the
internal, Lisp form).

\(fn &optional INTERNALP)" t nil)

(autoload 'bmkp-bmenu-edit-tags "site-lisp/bookmark-plus/bookmark+-bmu" "\
Edit the tags of the bookmark under the cursor.
The edited value must be a list each of whose elements is either a
string or a cons whose key is a string.

\(fn)" t nil)

(autoload 'bmkp-bmenu-edit-bookmark-record "site-lisp/bookmark-plus/bookmark+-bmu" "\
Edit the full record (the Lisp sexp) for the bookmark under the cursor.
When you finish editing, use `\\[bmkp-edit-bookmark-record-send]'.
The current bookmark list is then updated to reflect your edits.

\(fn)" t nil)

(autoload 'bmkp-bmenu-edit-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Edit the full records (the Lisp sexps) of the marked bookmarks.
When you finish editing, use `\\[bmkp-edit-bookmark-records-send]'.
The current bookmark list is then updated to reflect your edits.

\(fn)" t nil)

(autoload 'bmkp-bmenu-quit "site-lisp/bookmark-plus/bookmark+-bmu" "\
Quit the bookmark list (aka \"menu list\").
If `bmkp-bmenu-state-file' is non-nil, then save the state, to be
restored the next time the bookmark list is shown.  Otherwise, reset
the internal lists that record menu-list markings.

\(fn)" t nil)

(autoload 'bmkp-bmenu-change-sort-order-repeat "site-lisp/bookmark-plus/bookmark+-bmu" "\
Cycle to the next sort order.
With a prefix arg, reverse current sort order.
This is a repeatable version of `bmkp-bmenu-change-sort-order'.

\(fn ARG)" t nil)

(autoload 'bmkp-bmenu-change-sort-order "site-lisp/bookmark-plus/bookmark+-bmu" "\
Cycle to the next sort order.
With a prefix arg, reverse the current sort order.

\(fn &optional ARG)" t nil)

(autoload 'bmkp-reverse-sort-order "site-lisp/bookmark-plus/bookmark+-bmu" "\
Reverse the current bookmark sort order.
If you combine this with \\<bookmark-bmenu-mode-map>`\\[bmkp-reverse-multi-sort-order]', then see the doc for that command.

\(fn)" t nil)

(autoload 'bmkp-reverse-multi-sort-order "site-lisp/bookmark-plus/bookmark+-bmu" "\
Reverse the application of multi-sorting predicates.
These are the PRED predicates described for option
`bmkp-sort-comparer'.

This reverses the order in which the predicates are tried, and it
also complements the truth value returned by each predicate.

For example, if the list of multi-sorting predicates is (p1 p2 p3),
then the predicates are tried in the order: p3, p2, p1.  And if a
predicate returns true, `(t)', then the effect is as if it returned
false, `(nil)', and vice versa.

The use of multi-sorting predicates tends to group bookmarks, with the
first predicate corresponding to the first bookmark group etc.

The effect of \\<bookmark-bmenu-mode-map>`\\[bmkp-reverse-multi-sort-order]' is roughly as follows:

 - without also `\\[bmkp-reverse-sort-order]', it reverses the bookmark order in each group

 - combined with `\\[bmkp-reverse-sort-order]', it reverses the order of the bookmark
   groups, but not the bookmarks within a group

This is a rough description.  The actual behavior can be complex,
because of how each predicate is defined.  If this description helps
you, fine.  If not, just experiment and see what happens. ;-)

Remember that ordinary `\\[bmkp-reverse-sort-order]' reversal on its own is straightforward.
If you find `\\[bmkp-reverse-multi-sort-order]' confusing or not helpful, then do not use it.

\(fn)" t nil)

(autoload 'bmkp-bmenu-describe-this+move-down "site-lisp/bookmark-plus/bookmark+-bmu" "\
Describe bookmark of current line, then move down to the next bookmark.
With a prefix argument, show the internal definition of the bookmark.

\(fn &optional DEFN)" t nil)

(autoload 'bmkp-bmenu-describe-this+move-up "site-lisp/bookmark-plus/bookmark+-bmu" "\
Describe bookmark of current line, then move down to the next bookmark.
With a prefix argument, show the internal definition of the bookmark.

\(fn &optional DEFN)" t nil)

(autoload 'bmkp-bmenu-describe-this-bookmark "site-lisp/bookmark-plus/bookmark+-bmu" "\
Describe bookmark of current line.
With a prefix argument, show the internal definition of the bookmark.

\(fn &optional DEFN)" t nil)

(autoload 'bmkp-bmenu-describe-marked "site-lisp/bookmark-plus/bookmark+-bmu" "\
Describe the marked bookmarks.
With a prefix argument, show the internal definitions.

\(fn &optional DEFN)" t nil)

(autoload 'bmkp-bmenu-mouse-3-menu "site-lisp/bookmark-plus/bookmark+-bmu" "\
Pop-up menu on `mouse-3' for a bookmark listed in `*Bookmark List*'.

\(fn EVENT)" t nil)

;;;***

;;;### (autoloads (bmkp-previous-lighted-this-buffer-repeat bmkp-next-lighted-this-buffer-repeat
;;;;;;  bmkp-previous-lighted-this-buffer bmkp-next-lighted-this-buffer
;;;;;;  bmkp-cycle-lighted-this-buffer-other-window bmkp-cycle-lighted-this-buffer
;;;;;;  bmkp-light-non-autonamed-this-buffer bmkp-light-autonamed-this-buffer
;;;;;;  bmkp-light-bookmarks-in-region bmkp-light-this-buffer bmkp-light-navlist-bookmarks
;;;;;;  bmkp-light-bookmarks bmkp-light-bookmark-this-buffer bmkp-light-bookmark
;;;;;;  bmkp-set-lighting-for-this-buffer bmkp-set-lighting-for-buffer
;;;;;;  bmkp-set-lighting-for-bookmark bmkp-unlight-this-buffer bmkp-unlight-non-autonamed-this-buffer
;;;;;;  bmkp-unlight-autonamed-this-buffer bmkp-unlight-bookmarks
;;;;;;  bmkp-unlight-bookmark-this-buffer bmkp-unlight-bookmark-here
;;;;;;  bmkp-unlight-bookmark bmkp-lighted-jump-other-window bmkp-lighted-jump
;;;;;;  bmkp-bookmarks-lighted-at-point bmkp-bmenu-set-lighting-for-marked
;;;;;;  bmkp-bmenu-set-lighting bmkp-bmenu-unlight-marked bmkp-bmenu-unlight
;;;;;;  bmkp-bmenu-light-marked bmkp-bmenu-light bmkp-bmenu-show-only-lighted
;;;;;;  bmkp-light-threshold bmkp-light-style-non-autonamed bmkp-light-style-autonamed
;;;;;;  bmkp-light-priorities bmkp-auto-light-when-set bmkp-auto-light-when-jump
;;;;;;  bmkp-auto-light-relocate-when-jump-flag) "site-lisp/bookmark-plus/bookmark+-lit"
;;;;;;  "site-lisp/bookmark-plus/bookmark+-lit.el" (20488 45649))
;;; Generated autoloads from site-lisp/bookmark-plus/bookmark+-lit.el

(defvar bmkp-auto-light-relocate-when-jump-flag t "\
*Non-nil means highlight the relocated, instead of the recorded, position.
This has an effect only when the highlighting style for the bookmark
is `point'.")

(custom-autoload 'bmkp-auto-light-relocate-when-jump-flag "site-lisp/bookmark-plus/bookmark+-lit" t)

(defvar bmkp-auto-light-when-jump nil "\
*Which bookmarks to automatically highlight when jumped to.
NOTE: The values that specify highlighting in the current buffer
highlight bookmarks in the buffer that is current after jumping.  If
the bookmark does not really have an associated buffer, for example a
bookmark with a handler such as `w32-browser' that just invokes a
separate, non-Emacs program, then the current buffer after jumping
will be the buffer before jumping.")

(custom-autoload 'bmkp-auto-light-when-jump "site-lisp/bookmark-plus/bookmark+-lit" t)

(defvar bmkp-auto-light-when-set nil "\
*Which bookmarks to automatically highlight when set.")

(custom-autoload 'bmkp-auto-light-when-set "site-lisp/bookmark-plus/bookmark+-lit" t)

(defvar bmkp-light-priorities '((bmkp-autonamed-overlays . 160) (bmkp-non-autonamed-overlays . 150)) "\
*Priorities of bookmark highlighting overlay types.
As an idea, `ediff' uses 100+, `isearch' uses 1001.")

(custom-autoload 'bmkp-light-priorities "site-lisp/bookmark-plus/bookmark+-lit" t)

(defvar bmkp-light-style-autonamed (if (not (fboundp 'fringe-columns)) 'line 'line+lfringe) "\
*Default highlight style for autonamed bookmarks.")

(custom-autoload 'bmkp-light-style-autonamed "site-lisp/bookmark-plus/bookmark+-lit" t)

(defvar bmkp-light-style-non-autonamed (if (not (fboundp 'fringe-columns)) 'line 'line+rfringe) "\
*Default highlight style for non-autonamed bookmarks.")

(custom-autoload 'bmkp-light-style-non-autonamed "site-lisp/bookmark-plus/bookmark+-lit" t)

(defvar bmkp-light-threshold 100000 "\
*Maximum number of bookmarks to highlight.")

(custom-autoload 'bmkp-light-threshold "site-lisp/bookmark-plus/bookmark+-lit" t)

(autoload 'bmkp-bmenu-show-only-lighted "site-lisp/bookmark-plus/bookmark+-lit" "\
Display a list of highlighted bookmarks (only).

\(fn)" t nil)

(autoload 'bmkp-bmenu-light "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight the location of this line's bookmark.

\(fn)" t nil)

(autoload 'bmkp-bmenu-light-marked "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight the marked bookmarks.

\(fn &optional PARG MSGP)" t nil)

(autoload 'bmkp-bmenu-unlight "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight the location of this line's bookmark.

\(fn)" t nil)

(autoload 'bmkp-bmenu-unlight-marked "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight the marked bookmarks.

\(fn &optional PARG MSGP)" t nil)

(autoload 'bmkp-bmenu-set-lighting "site-lisp/bookmark-plus/bookmark+-lit" "\
Set the `lighting' property for this line's bookmark.
You are prompted for the highlight style, face, and condition (when).

\(fn STYLE FACE WHEN &optional MSGP)" t nil)

(autoload 'bmkp-bmenu-set-lighting-for-marked "site-lisp/bookmark-plus/bookmark+-lit" "\
Set the `lighting' property for the marked bookmarks.
You are prompted for the highlight style, face, and condition (when).

\(fn STYLE FACE WHEN &optional MSGP)" t nil)

(autoload 'bmkp-bookmarks-lighted-at-point "site-lisp/bookmark-plus/bookmark+-lit" "\
Return a list of the bookmarks highlighted at point.
Include only those in the current bookmark list (`bookmark-alist').
With no prefix arg, return the bookmark names.
With a prefix arg, return the full bookmark data.
Interactively, display the info.
Non-interactively:
 Use the bookmarks at optional arg POSITION (default: point).
 Optional arg FULLP means return full bookmark data.
 Optional arg MSGP means display the info.

\(fn &optional POSITION FULLP MSGP)" t nil)

(autoload 'bmkp-lighted-jump "site-lisp/bookmark-plus/bookmark+-lit" "\
Jump to a highlighted bookmark.
This is a specialization of `bookmark-jump' - see that, in particular
for info about using a prefix argument.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-lighted-jump-other-window "site-lisp/bookmark-plus/bookmark+-lit" "\
Jump to a highlighted bookmark in another window.
See `bmkp-lighted-jump'.

\(fn BOOKMARK-NAME &optional USE-REGION-P)" t nil)

(autoload 'bmkp-unlight-bookmark "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight BOOKMARK.
BOOKMARK is a bookmark name or a bookmark record.

\(fn BOOKMARK &optional NOERRORP MSGP)" t nil)

(autoload 'bmkp-unlight-bookmark-here "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight a bookmark at point or the same line (in that order).

\(fn &optional NOERRORP MSGP)" t nil)

(autoload 'bmkp-unlight-bookmark-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight a BOOKMARK in this buffer.
BOOKMARK is a bookmark name or a bookmark record.
With a prefix arg, choose from all bookmarks, not just those in this
buffer.

\(fn BOOKMARK &optional NOERRORP MSGP)" t nil)

(autoload 'bmkp-unlight-bookmarks "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight bookmarks.
A prefix argument determines which bookmarks to unhighlight:
 none    - Current buffer, all bookmarks.
 >= 0    - Current buffer, autonamed bookmarks only.
 < 0     - Current buffer, non-autonamed bookmarks only.
 C-u     - All buffers (all bookmarks).

\(fn &optional OVERLAYS-SYMBOLS THIS-BUFFER-P MSGP)" t nil)

(autoload 'bmkp-unlight-autonamed-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight autonamed bookmarks.
No prefix arg: unhighlight them only in the current buffer.
Prefix arg, unhighlight them everywhere.

\(fn &optional EVERYWHEREP)" t nil)

(autoload 'bmkp-unlight-non-autonamed-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight non-autonamed bookmarks.
No prefix arg: unhighlight them only in the current buffer.
Prefix arg, unhighlight them everywhere.

\(fn &optional EVERYWHEREP)" t nil)

(autoload 'bmkp-unlight-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Unhighlight all bookmarks in the current buffer.

\(fn)" t nil)

(autoload 'bmkp-set-lighting-for-bookmark "site-lisp/bookmark-plus/bookmark+-lit" "\
Set the `lighting' property for bookmark BOOKMARK-NAME.
You are prompted for the bookmark, highlight style, face, and condition.
With a prefix argument, do not highlight now.

Non-interactively:
STYLE, FACE, and WHEN are as for a bookmark's `lighting' property
 entries, or nil if no such entry.
Non-nil MSGP means display a highlighting progress message.
Non-nil LIGHT-NOW-P means apply the highlighting now.

\(fn BOOKMARK-NAME STYLE FACE WHEN &optional MSGP LIGHT-NOW-P)" t nil)

(autoload 'bmkp-set-lighting-for-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Set the `lighting' property for each of the bookmarks for BUFFER.
You are prompted for the highlight style, face, and condition (when).
With a prefix argument, do not highlight now.

Non-interactively:
STYLE, FACE, and WHEN are as for a bookmark's `lighting' property
 entries, or nil if no such entry.
Non-nil MSGP means display a highlighting progress message.
Non-nil LIGHT-NOW-P means apply the highlighting now.

\(fn BUFFER STYLE FACE WHEN &optional MSGP LIGHT-NOW-P)" t nil)

(autoload 'bmkp-set-lighting-for-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Set the `lighting' property for each of the bookmarks for this buffer.
You are prompted for the highlight style, face, and condition (when).
With a prefix argument, do not highlight now.

Non-interactively:
STYLE, FACE, and WHEN are as for a bookmark's `lighting' property
 entries, or nil if no such entry.
Non-nil MSGP means display a highlighting progress message.
Non-nil LIGHT-NOW-P means apply the highlighting now.

\(fn STYLE FACE WHEN &optional MSGP LIGHT-NOW-P)" t nil)

(autoload 'bmkp-light-bookmark "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight BOOKMARK.
With a prefix arg you are prompted for the style and/or face to use:
 Plain prefix arg (`C-u'): prompt for both style and face.
 Numeric non-negative arg: prompt for face.
 Numeric negative arg: prompt for style.

Non-interactively:
 BOOKMARK is a bookmark name or a bookmark record, or it is ignored.
 STYLE and FACE override the defaults.
 POINT-P non-nil means highlight point rather than the recorded
  bookmark `position.

\(fn BOOKMARK &optional STYLE FACE MSGP POINTP)" t nil)

(autoload 'bmkp-light-bookmark-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight a BOOKMARK in the current buffer.
With a prefix arg you are prompted for the style and/or face to use:
 Plain prefix arg (`C-u'): prompt for both style and face.
 Numeric non-negative arg: prompt for face.
 Numeric negative arg: prompt for style.
See `bmkp-light-boookmark' for argument descriptions.

\(fn BOOKMARK &optional STYLE FACE MSGP)" t nil)

(autoload 'bmkp-light-bookmarks "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight bookmarks.
A prefix argument determines which bookmarks to highlight:
 none    - Current buffer, all bookmarks.
 = 0     - Current buffer, highlighted bookmarks only (rehighlight).
 > 0     - Current buffer, autonamed bookmarks only.
 < 0     - Current buffer, non-autonamed bookmarks only.
 C-u     - All buffers (all bookmarks) - after confirmation.
 C-u C-u - Navlist (all bookmarks).

Non-interactively, ALIST is the alist of bookmarks to highlight.

\(fn &optional ALIST OVERLAYS-SYMBOLS MSGP)" t nil)

(autoload 'bmkp-light-navlist-bookmarks "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight bookmarks in the navigation list.
No prefix arg:   all bookmarks.
Prefix arg >= 0: autonamed bookmarks only.
Prefix arg < 0:  non-autonamed bookmarks only.

\(fn &optional OVERLAYS-SYMBOLS MSGP)" t nil)

(autoload 'bmkp-light-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight bookmarks in the current buffer.
No prefix arg:   all bookmarks.
Prefix arg >= 0: autonamed bookmarks only.
Prefix arg < 0:  non-autonamed bookmarks only.

\(fn &optional OVERLAYS-SYMBOLS MSGP)" t nil)

(autoload 'bmkp-light-bookmarks-in-region "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight bookmarks in the region.
No prefix arg:   all bookmarks.
Prefix arg >= 0: autonamed bookmarks only.
Prefix arg < 0:  non-autonamed bookmarks only.

\(fn START END &optional OVERLAYS-SYMBOLS MSGP)" t nil)

(autoload 'bmkp-light-autonamed-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight all autonamed bookmarks.

\(fn &optional MSGP)" t nil)

(autoload 'bmkp-light-non-autonamed-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Highlight all non-autonamed bookmarks.

\(fn &optional MSGP)" t nil)

(autoload 'bmkp-cycle-lighted-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Cycle through highlighted bookmarks in this buffer by INCREMENT.
Positive INCREMENT cycles forward.  Negative INCREMENT cycles backward.
Interactively, the prefix arg determines INCREMENT:
 Plain `C-u': 1
 otherwise: the numeric prefix arg value 

To change the sort order, you can filter the `*Bookmark List*' to show
only highlighted bookmarks for this buffer, sort the bookmarks there,
and use `\\[bmkp-choose-navlist-from-bookmark-list]', choosing `CURRENT *Bookmark List*' as the
navigation list.

Then you can cycle the bookmarks using `bookmark-cycle'
\(`\\[bmkp-next-bookmark-repeat]' etc.), instead of `bookmark-cycle-lighted-this-buffer'.

In Lisp code:
 Non-nil OTHER-WINDOW means jump to the bookmark in another window.
 Non-nil STARTOVERP means reset `bmkp-current-nav-bookmark' to the
 first bookmark in the navlist.

\(fn INCREMENT &optional OTHER-WINDOW STARTOVERP)" t nil)

(autoload 'bmkp-cycle-lighted-this-buffer-other-window "site-lisp/bookmark-plus/bookmark+-lit" "\
Same as `bmkp-cycle-lighted-this-buffer' but uses another window.

\(fn INCREMENT &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-lighted-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Jump to the Nth-next highlighted bookmark in the current buffer.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one.
See also `bmkp-cycle-lighted-this-buffer'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-previous-lighted-this-buffer "site-lisp/bookmark-plus/bookmark+-lit" "\
Jump to the Nth-previous highlighted bookmark in the current buffer.
See `bmkp-next-lighted-this-buffer'.

\(fn N &optional STARTOVERP)" t nil)

(autoload 'bmkp-next-lighted-this-buffer-repeat "site-lisp/bookmark-plus/bookmark+-lit" "\
Jump to the Nth next highlighted bookmark in the current buffer.
This is a repeatable version of `bmkp-next-bookmark-this-buffer'.
N defaults to 1, meaning the next one.
Plain `C-u' means start over at the first one (and no repeat).

\(fn ARG)" t nil)

(autoload 'bmkp-previous-lighted-this-buffer-repeat "site-lisp/bookmark-plus/bookmark+-lit" "\
Jump to the Nth previous highlighted bookmark in the current buffer.
See `bmkp-next-lighted-this-buffer-repeat'.

\(fn ARG)" t nil)

;;;***

;;;### (autoloads (bmkp-menu-bar-make-toggle bmkp-define-file-sort-predicate
;;;;;;  bmkp-define-sort-command bmkp-define-next+prev-cycle-commands
;;;;;;  bmkp-define-cycle-command bmkp-with-output-to-plain-temp-buffer)
;;;;;;  "site-lisp/bookmark-plus/bookmark+-mac" "site-lisp/bookmark-plus/bookmark+-mac.el"
;;;;;;  (20488 45649))
;;; Generated autoloads from site-lisp/bookmark-plus/bookmark+-mac.el

(autoload 'bmkp-with-output-to-plain-temp-buffer "site-lisp/bookmark-plus/bookmark+-mac" "\
Like `with-output-to-temp-buffer', but with no *Help* navigation stuff.

\(fn BUF &rest BODY)" nil (quote macro))

(autoload 'bmkp-define-cycle-command "site-lisp/bookmark-plus/bookmark+-mac" "\
Define a cycling command for bookmarks of type TYPE.
Non-nil OTHERP means define a command that cycles in another window.

\(fn TYPE &optional OTHERP)" nil (quote macro))

(autoload 'bmkp-define-next+prev-cycle-commands "site-lisp/bookmark-plus/bookmark+-mac" "\
Define `next' and `previous' commands for bookmarks of type TYPE.

\(fn TYPE)" nil (quote macro))

(autoload 'bmkp-define-sort-command "site-lisp/bookmark-plus/bookmark+-mac" "\
Define a command to sort bookmarks in the bookmark list by SORT-ORDER.
SORT-ORDER is a short string or symbol describing the sorting method.
Examples: \"by last access time\", \"by bookmark name\".

The new command is named by replacing any spaces in SORT-ORDER with
hyphens (`-') and then adding the prefix `bmkp-bmenu-sort-'.  Example:
`bmkp-bmenu-sort-by-bookmark-name', for SORT-ORDER `by bookmark name'.

COMPARER compares two bookmarks, returning non-nil if and only if the
first bookmark sorts before the second.  It must be acceptable as a
value of `bmkp-sort-comparer'.  That is, it is either nil, a
predicate, or a list ((PRED...) FINAL-PRED).  See the doc for
`bmkp-sort-comparer'.

DOC-STRING is the doc string of the new command.

\(fn SORT-ORDER COMPARER DOC-STRING)" nil (quote macro))

(autoload 'bmkp-define-file-sort-predicate "site-lisp/bookmark-plus/bookmark+-mac" "\
Define a predicate for sorting bookmarks by file attribute ATT-NB.
See function `file-attributes' for the meanings of the various file
attribute numbers.

String attribute values sort alphabetically; numerical values sort
numerically; nil sorts before t.

For ATT-NB 0 (file type), a file sorts before a symlink, which sorts
before a directory.

For ATT-NB 2 or 3 (uid, gid), a numerical value sorts before a string
value.

A bookmark that has file attributes sorts before a bookmark that does
not.  A file bookmark sorts before a non-file bookmark.  Only local
files are tested for attributes - remote-file bookmarks are treated
here like non-file bookmarks.

\(fn ATT-NB)" nil (quote macro))

(autoload 'bmkp-menu-bar-make-toggle "site-lisp/bookmark-plus/bookmark+-mac" "\
Return a valid `menu-bar-make-toggle' call in Emacs 20 or later.
NAME is the name of the toggle command to define.
VARIABLE is the variable to set.
DOC is the menu-item name.
MESSAGE is the toggle message, minus status.
HELP is `:help' string.
BODY is the function body to use.  If present, it is responsible for
setting the variable and displaying a status message (not MESSAGE).

\(fn NAME VARIABLE DOC MESSAGE HELP &rest BODY)" nil (quote macro))

;;;***

;;;### (autoloads (boxquote-unbox boxquote-unbox-region boxquote-fill-paragraph
;;;;;;  boxquote-kill boxquote-narrow-to-boxquote-content boxquote-narrow-to-boxquote
;;;;;;  boxquote-text boxquote-where-is boxquote-shell-command boxquote-describe-key
;;;;;;  boxquote-describe-variable boxquote-describe-function boxquote-boxquote
;;;;;;  boxquote-paragraph boxquote-defun boxquote-yank boxquote-kill-ring-save
;;;;;;  boxquote-insert-buffer boxquote-insert-file boxquote-buffer
;;;;;;  boxquote-region boxquote-title) "site-lisp/boxquote/boxquote"
;;;;;;  "site-lisp/boxquote/boxquote.el" (20488 45650))
;;; Generated autoloads from site-lisp/boxquote/boxquote.el

(autoload 'boxquote-title "site-lisp/boxquote/boxquote" "\
Set the title of the current boxquote to TITLE.

If TITLE is an empty string the title is removed. Note that the title will
be formatted using `boxquote-title-format'.

\(fn TITLE)" t nil)

(autoload 'boxquote-region "site-lisp/boxquote/boxquote" "\
Draw a box around the left hand side of a region bounding START and END.

\(fn START END)" t nil)

(autoload 'boxquote-buffer "site-lisp/boxquote/boxquote" "\
Apply `boxquote-region' to a whole buffer.

\(fn)" t nil)

(autoload 'boxquote-insert-file "site-lisp/boxquote/boxquote" "\
Insert the contents of a file, boxed with `boxquote-region'.

If `boxquote-title-files' is non-nil the boxquote will be given a title that
is the result of applying `boxquote-file-title-function' to FILENAME.

\(fn FILENAME)" t nil)

(autoload 'boxquote-insert-buffer "site-lisp/boxquote/boxquote" "\
Insert the contents of a buffer, boxes with `boxquote-region'.

If `boxquote-title-buffers' is non-nil the boxquote will be given a title that
is the result of applying `boxquote-buffer-title-function' to BUFFER.

\(fn BUFFER)" t nil)

(autoload 'boxquote-kill-ring-save "site-lisp/boxquote/boxquote" "\
Like `kill-ring-save' but remembers a title if possible.

The title is acquired by calling `boxquote-kill-ring-save-title'. The title
will be used by `boxquote-yank'.

\(fn)" t nil)

(autoload 'boxquote-yank "site-lisp/boxquote/boxquote" "\
Do a `yank' and box it in with `boxquote-region'.

If the yanked entry was placed on the kill ring with
`boxquote-kill-ring-save' the resulting boxquote will be titled with
whatever `boxquote-kill-ring-save-title' returned at the time.

\(fn)" t nil)

(autoload 'boxquote-defun "site-lisp/boxquote/boxquote" "\
Apply `boxquote-region' the current defun.

\(fn)" t nil)

(autoload 'boxquote-paragraph "site-lisp/boxquote/boxquote" "\
Apply `boxquote-region' to the current paragraph.

\(fn)" t nil)

(autoload 'boxquote-boxquote "site-lisp/boxquote/boxquote" "\
Apply `boxquote-region' to the current boxquote.

\(fn)" t nil)

(autoload 'boxquote-describe-function "site-lisp/boxquote/boxquote" "\
Call `describe-function' and boxquote the output into the current buffer.

\(fn)" t nil)

(autoload 'boxquote-describe-variable "site-lisp/boxquote/boxquote" "\
Call `describe-variable' and boxquote the output into the current buffer.

\(fn)" t nil)

(autoload 'boxquote-describe-key "site-lisp/boxquote/boxquote" "\
Call `describe-key' and boxquote the output into the current buffer.

If the call to this command is prefixed with \\[universal-argument] you will also be
prompted for a buffer. The key defintion used will be taken from that buffer.

\(fn KEY)" t nil)

(autoload 'boxquote-shell-command "site-lisp/boxquote/boxquote" "\
Call `shell-command' with COMMAND and boxquote the output.

\(fn COMMAND)" t nil)

(autoload 'boxquote-where-is "site-lisp/boxquote/boxquote" "\
Call `where-is' with DEFINITION and boxquote the result.

\(fn DEFINITION)" t nil)

(autoload 'boxquote-text "site-lisp/boxquote/boxquote" "\
Insert TEXT, boxquoted.

\(fn TEXT)" t nil)

(autoload 'boxquote-narrow-to-boxquote "site-lisp/boxquote/boxquote" "\
Narrow the buffer to the current boxquote.

\(fn)" t nil)

(autoload 'boxquote-narrow-to-boxquote-content "site-lisp/boxquote/boxquote" "\
Narrow the buffer to the content of the current boxquote.

\(fn)" t nil)

(autoload 'boxquote-kill "site-lisp/boxquote/boxquote" "\
Kill the boxquote and its contents.

\(fn)" t nil)

(autoload 'boxquote-fill-paragraph "site-lisp/boxquote/boxquote" "\
Perform a `fill-paragraph' inside a boxquote.

\(fn ARG)" t nil)

(autoload 'boxquote-unbox-region "site-lisp/boxquote/boxquote" "\
Remove a box created with `boxquote-region'.

\(fn START END)" t nil)

(autoload 'boxquote-unbox "site-lisp/boxquote/boxquote" "\
Remove the boxquote that contains `point'.

\(fn)" t nil)

;;;***

;;;### (autoloads (browse-kill-ring browse-kill-ring-default-keybindings)
;;;;;;  "site-lisp/browse-kill-ring" "site-lisp/browse-kill-ring.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/browse-kill-ring.el

(autoload 'browse-kill-ring-default-keybindings "site-lisp/browse-kill-ring" "\
Set up M-y (`yank-pop') so that it can invoke `browse-kill-ring'.
Normally, if M-y was not preceeded by C-y, then it has no useful
behavior.  This function sets things up so that M-y will invoke
`browse-kill-ring'.

\(fn)" t nil)

(autoload 'browse-kill-ring "site-lisp/browse-kill-ring" "\
Display items in the `kill-ring' in another buffer.

\(fn)" t nil)

;;;***

;;;### (autoloads (browse-kill-ring-copy-to-other-ring toggle-browse-kill-ring-display-style
;;;;;;  browse-kill-ring-switch-to-other-kill-ring browse-kill-ring
;;;;;;  browse-kill-ring-edit-finish browse-kill-ring-edit browse-kill-ring-default-keybindings
;;;;;;  browse-kill-ring-forward browse-kill-ring-append-insert-and-move
;;;;;;  browse-kill-ring-prepend-insert-and-move browse-kill-ring-insert-and-move
;;;;;;  browse-kill-ring-delete browse-kill-ring-alternative-push-function
;;;;;;  browse-kill-ring-alternative-ring browse-kill-ring-alternative-yank-commands
;;;;;;  browse-kill-ring-yank-commands) "site-lisp/browse-kill-ring+"
;;;;;;  "site-lisp/browse-kill-ring+.el" (20488 45440))
;;; Generated autoloads from site-lisp/browse-kill-ring+.el

(defvar browse-kill-ring-yank-commands (if (boundp 'secondary-selection-yank-commands) secondary-selection-yank-commands '(yank icicle-yank-maybe-completing)) "\
*Commands that yank.
Used by `yank-pop' to tell whether the previous command was a yank command.
Used only if `browse-kill-ring-default-keybindings' has been called,
so `yank-pop' is advised.")

(custom-autoload 'browse-kill-ring-yank-commands "site-lisp/browse-kill-ring+" t)

(defvar browse-kill-ring-alternative-yank-commands (and (boundp 'secondary-selection-yank-secondary-commands) secondary-selection-yank-secondary-commands) "\
*Commands that yank using the alternative selection ring.
Used by `browse-kill-ring-setup' to tell whether the previous command
yanked from `browse-kill-ring-alternative-ring'.")

(custom-autoload 'browse-kill-ring-alternative-yank-commands "site-lisp/browse-kill-ring+" t)

(defvar browse-kill-ring-alternative-ring (and (boundp 'secondary-selection-ring) 'secondary-selection-ring) "\
*Selection ring to use as an alternative to `kill-ring'.
A value of nil means there is no alternative selection ring; that is,
`kill-ring' is used always.")

(custom-autoload 'browse-kill-ring-alternative-ring "site-lisp/browse-kill-ring+" t)

(defvar browse-kill-ring-alternative-push-function (and (boundp 'secondary-selection-ring) 'add-secondary-to-ring) "\
*Function that adds item to the front of alternative selection ring.
This is analogous to `kill-new' for the alternative ring.
It must accept the same same arguments as `kill-new'.")

(custom-autoload 'browse-kill-ring-alternative-push-function "site-lisp/browse-kill-ring+" t)

(autoload 'browse-kill-ring-delete "site-lisp/browse-kill-ring+" "\
Remove all occurrences of selection at point from current selection ring.

\(fn)" t nil)

(autoload 'browse-kill-ring-insert-and-move "site-lisp/browse-kill-ring+" "\
Like `browse-kill-ring-insert', but move selection to front of ring.
Insert the selection at point unless optional arg
APPEND/PREPEND is:
 `append'  - insert at eob, not at point
 `prepend' - insert at bob, not at point

\(fn &optional QUIT APPEND/PREPEND)" t nil)

(autoload 'browse-kill-ring-prepend-insert-and-move "site-lisp/browse-kill-ring+" "\
`browse-kill-ring-prepend-insert', but move selection to front of ring.

\(fn &optional QUIT)" t nil)

(autoload 'browse-kill-ring-append-insert-and-move "site-lisp/browse-kill-ring+" "\
`browse-kill-ring-append-insert', but move selection to front of ring.

\(fn &optional QUIT)" t nil)

(autoload 'browse-kill-ring-forward "site-lisp/browse-kill-ring+" "\
Move forward by ARG selection-ring entries.

\(fn &optional ARG)" t nil)

(autoload 'browse-kill-ring-default-keybindings "site-lisp/browse-kill-ring+" "\
Set up `M-y' so that it can invoke `browse-kill-ring'.
See also option `browse-kill-ring-yank-commands'.

\(fn)" t nil)

(autoload 'browse-kill-ring-edit "site-lisp/browse-kill-ring+" "\
Edit the current selection ring entry at point.

\(fn)" t nil)

(autoload 'browse-kill-ring-edit-finish "site-lisp/browse-kill-ring+" "\
Commit the changes to the current selection ring.

\(fn)" t nil)

(autoload 'browse-kill-ring "site-lisp/browse-kill-ring+" "\
Browse the current selection ring.
With a prefix arg, browse the alternative selection ring instead.

\(If `browse-kill-ring-alternative-ring' is nil, then a prefix arg has
no effect.)

\(fn &optional OTHER-RING-P)" t nil)

(autoload 'browse-kill-ring-switch-to-other-kill-ring "site-lisp/browse-kill-ring+" "\
Browse the other selection ring.
If the current ring is `kill-ring' then browse the alternative ring
\(e.g. `secondary-selection-ring'), and vice versa.  The alternative
ring is the value of `browse-kill-ring-alternative-ring'.

\(fn)" t nil)

(autoload 'toggle-browse-kill-ring-display-style "site-lisp/browse-kill-ring+" "\
Toggle browse-kill-ring-display-style between `separated' and `one-line'.

\(fn)" t nil)

(autoload 'browse-kill-ring-copy-to-other-ring "site-lisp/browse-kill-ring+" "\
Copy the selection at point from current selection ring to other ring.
With a prefix arg, move it instead of copying it.
If the other ring is also displayed, then its displayed is updated.

\(fn &optional MOVEP)" t nil)

;;;***

;;;### (autoloads nil "site-lisp/bytecomp-simplify" "site-lisp/bytecomp-simplify.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/bytecomp-simplify.el
 (eval-after-load "bytecomp" '(require 'bytecomp-simplify))

;;;***

;;;### (autoloads (turn-on-cldoc-mode cldoc-mode cldoc-minor-mode-string
;;;;;;  cldoc-mode) "site-lisp/cldoc" "site-lisp/cldoc.el" (20488
;;;;;;  45440))
;;; Generated autoloads from site-lisp/cldoc.el

(defvar cldoc-mode nil "\
*If non-nil, show the defined parameters for the elisp function near point.

For the emacs lisp function at the beginning of the sexp which point is
within, show the defined parameters for the function in the echo area.
This information is extracted directly from the function or macro if it is
in pure lisp.  If the emacs function is a subr, the parameters are obtained
from the documentation string if possible.

If point is over a documented variable, print that variable's docstring
instead.

This variable is buffer-local.")

(custom-autoload 'cldoc-mode "site-lisp/cldoc" t)

(defvar cldoc-minor-mode-string " Cldoc" "\
*String to display in mode line when Cldoc Mode is enabled.")

(custom-autoload 'cldoc-minor-mode-string "site-lisp/cldoc" t)

(cond ((fboundp 'add-minor-mode) (add-minor-mode 'cldoc-mode 'cldoc-minor-mode-string)) ((assq 'cldoc-mode (default-value 'minor-mode-alist))) (t (setq-default minor-mode-alist (append (default-value 'minor-mode-alist) '((cldoc-mode cldoc-minor-mode-string))))))

(autoload 'cldoc-mode "site-lisp/cldoc" "\
*Enable or disable cldoc mode.
See documentation for the variable of the same name for more details.

If called interactively with no prefix argument, toggle current condition
of the mode.
If called with a positive or negative prefix argument, enable or disable
the mode, respectively.

\(fn &optional PREFIX)" t nil)

(autoload 'turn-on-cldoc-mode "site-lisp/cldoc" "\
Unequivocally turn on cldoc-mode (see variable documentation).

\(fn)" t nil)

;;;***

;;;### (autoloads (col-highlight-flash col-highlight-set-interval
;;;;;;  col-highlight-toggle-when-idle column-highlight-mode col-highlight-overlay-priority
;;;;;;  col-highlight-period col-highlight-vline-face-flag column-highlight)
;;;;;;  "site-lisp/col-highlight" "site-lisp/col-highlight.el" (20488
;;;;;;  45440))
;;; Generated autoloads from site-lisp/col-highlight.el

(let ((loads (get 'column-highlight 'custom-loads))) (if (member '"site-lisp/col-highlight" loads) nil (put 'column-highlight 'custom-loads (cons '"site-lisp/col-highlight" loads))))

(defvar col-highlight-vline-face-flag t "\
*Non-nil means `column-highlight-mode' uses `col-highlight-face'.
nil means that it uses `vline-face'.")

(custom-autoload 'col-highlight-vline-face-flag "site-lisp/col-highlight" t)

(defvar col-highlight-period 1 "\
*Number of seconds to highlight the current column.")

(custom-autoload 'col-highlight-period "site-lisp/col-highlight" t)

(defvar col-highlight-overlay-priority 300 "\
*Priority to use for overlays in `vline-overlay-table'.
A higher priority can make the vline highlighting appear on top of
other overlays that might exist.")

(custom-autoload 'col-highlight-overlay-priority "site-lisp/col-highlight" t)

(defface col-highlight '((t (:background "SlateGray3"))) "\
*Face for current-column highlighting by `column-highlight-mode'.
Not used if `col-highlight-vline-face-flag' is nil." :group (quote column-highlight) :group (quote faces))

(defvar column-highlight-mode nil "\
Non-nil if Column-Highlight mode is enabled.
See the command `column-highlight-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `column-highlight-mode'.")

(custom-autoload 'column-highlight-mode "site-lisp/col-highlight" nil)

(autoload 'column-highlight-mode "site-lisp/col-highlight" "\
Toggle highlighting the current column.
With ARG, turn column highlighting on if and only if ARG is positive.

Column-Highlight mode uses the functions
`col-highlight-unhighlight' and `col-highlight-highlight'
on `pre-command-hook' and `post-command-hook'.

\(fn &optional ARG)" t nil)

(defalias 'toggle-highlight-column-when-idle 'col-highlight-toggle-when-idle)

(autoload 'col-highlight-toggle-when-idle "site-lisp/col-highlight" "\
Turn on or off highlighting the current column when Emacs is idle.
With prefix argument, turn on if ARG > 0; else turn off.

\(fn &optional ARG)" t nil)

(autoload 'col-highlight-set-interval "site-lisp/col-highlight" "\
Set the delay before highlighting current column when Emacs is idle.
Whenever Emacs has been idle for N seconds, the current column is
highlighted using the face that is the value of variable
`col-highlight-face'.

To turn on or off automatically highlighting the current column
when Emacs is idle, use `\\[toggle-highlight-column-when-idle].

\(fn N)" t nil)

(defalias 'flash-column-highlight 'col-highlight-flash)

(autoload 'col-highlight-flash "site-lisp/col-highlight" "\
Highlight the current column for `col-highlight-period' seconds.
With a prefix ARG, highlight for that many seconds.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (command-log-mode) "site-lisp/command-log-mode/command-log-mode"
;;;;;;  "site-lisp/command-log-mode/command-log-mode.el" (20488 45651))
;;; Generated autoloads from site-lisp/command-log-mode/command-log-mode.el

(autoload 'command-log-mode "site-lisp/command-log-mode/command-log-mode" "\
Toggle keyboard command logging.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (crosshairs-unhighlight crosshairs-highlight crosshairs
;;;;;;  crosshairs-flash crosshairs-toggle-when-idle crosshairs-mode
;;;;;;  crosshairs) "site-lisp/crosshairs" "site-lisp/crosshairs.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/crosshairs.el

(let ((loads (get 'crosshairs 'custom-loads))) (if (member '"site-lisp/crosshairs" loads) nil (put 'crosshairs 'custom-loads (cons '"site-lisp/crosshairs" loads))))

(defvar crosshairs-mode nil "\
Non-nil if Crosshairs mode is enabled.
See the command `crosshairs-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `crosshairs-mode'.")

(custom-autoload 'crosshairs-mode "site-lisp/crosshairs" nil)

(autoload 'crosshairs-mode "site-lisp/crosshairs" "\
Toggle highlighting the current line and column.
With ARG, turn highlighting on if and only if ARG is positive.

\(fn &optional ARG)" t nil)

(defalias 'toggle-crosshairs-when-idle 'crosshairs-toggle-when-idle)

(autoload 'crosshairs-toggle-when-idle "site-lisp/crosshairs" "\
Toggle highlighting the current line and column when Emacs is idle.
With prefix argument, turn on if ARG > 0; else turn off.
You can use commands `col-highlight-set-interval' and
`hl-line-when-idle-interval' to change the idle times.

\(fn &optional ARG)" t nil)

(defalias 'flash-crosshairs 'crosshairs-flash)

(autoload 'crosshairs-flash "site-lisp/crosshairs" "\
Highlight the current line and column temporarily.
Highlight the line for `hl-line-flash-show-period' and the column for
`column-show-period' seconds.  With prefix argument SECONDS, highlight
both for SECONDS seconds.

\(fn &optional SECONDS)" t nil)

(autoload 'crosshairs "site-lisp/crosshairs" "\
Highlight current position with crosshairs.
With no prefix arg, highlighting turns off at the next command.
With a prefix arg, highlighting stays on until you toggle it off using
`crosshairs-mode'.

\(fn &optional MODALP)" t nil)

(autoload 'crosshairs-highlight "site-lisp/crosshairs" "\
Echo current position and highlight it with crosshairs.
If optional arg MODE is `line-only', then highlight only the line.
If optional arg MODE is `col-only', then highlight only the column.
 Interactively:
  A non-negative prefix argument uses MODE `line-only'.
  A negative prefix argument uses MODE `col-only'.

Optional arg NOMSG non-nil means show no message.

If the current buffer is not the same as the value of `orig-buff',
then indicate the buffer, as well as the position.  Variable
`orig-buff' is not bound here; if you want to take advantage of this
feature in your code, then bind it.

Return current position as a marker.

\(fn &optional MODE NOMSG)" t nil)

(autoload 'crosshairs-unhighlight "site-lisp/crosshairs" "\
Turn off crosshairs highlighting of current position.
Optional arg nil means do nothing if this event is a frame switch.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (css-mode) "site-lisp/css-mode" "site-lisp/css-mode.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/css-mode.el

(autoload 'css-mode "site-lisp/css-mode" "\
Major mode for editing CSS files

\(fn)" t nil)

;;;***

;;;### (autoloads (curchg-change-cursor-when-idle-interval curchg-toggle-cursor-type-when-idle
;;;;;;  curchg-set-cursor-type curchg-overwrite/read-only-cursor-type
;;;;;;  curchg-input-method-cursor-color curchg-idle-cursor-type
;;;;;;  curchg-default-cursor-type curchg-default-cursor-color curchg-change-cursor-on-overwrite/read-only-flag
;;;;;;  curchg-change-cursor-on-input-method-flag) "site-lisp/cursor-chg"
;;;;;;  "site-lisp/cursor-chg.el" (20488 45440))
;;; Generated autoloads from site-lisp/cursor-chg.el

(defvar curchg-change-cursor-on-input-method-flag t "\
*Non-nil means to use a different cursor when using an input method.")

(custom-autoload 'curchg-change-cursor-on-input-method-flag "site-lisp/cursor-chg" t)

(defvar curchg-change-cursor-on-overwrite/read-only-flag t "\
*Non-nil means use a different cursor for overwrite mode or read-only.")

(custom-autoload 'curchg-change-cursor-on-overwrite/read-only-flag "site-lisp/cursor-chg" t)

(defvar curchg-default-cursor-color (or (cdr (assq 'cursor-color default-frame-alist)) "Red") "\
*Default text cursor color for non-special frames.")

(custom-autoload 'curchg-default-cursor-color "site-lisp/cursor-chg" t)

(defvar curchg-default-cursor-type 'bar "\
*Default text cursor type.")

(custom-autoload 'curchg-default-cursor-type "site-lisp/cursor-chg" t)

(defvar curchg-idle-cursor-type 'box "\
*Text cursor type when Emacs is idle.")

(custom-autoload 'curchg-idle-cursor-type "site-lisp/cursor-chg" t)

(defvar curchg-input-method-cursor-color "Orange" "\
*Default cursor color if using an input method.
This has no effect if `curchg-change-cursor-on-input-method-flag' is nil.")

(custom-autoload 'curchg-input-method-cursor-color "site-lisp/cursor-chg" t)

(defvar curchg-overwrite/read-only-cursor-type 'box "\
*Default text cursor type for overwrite mode or read-only buffer.
This applies only to non-special frames.  This has no effect if
`curchg-change-cursor-on-overwrite/read-only-flag' is nil.")

(custom-autoload 'curchg-overwrite/read-only-cursor-type "site-lisp/cursor-chg" t)

(autoload 'curchg-set-cursor-type "site-lisp/cursor-chg" "\
Set the cursor type of the selected frame to CURSOR-TYPE.
When called interactively, prompt for the type to use.
To get the frame's current cursor type, use `frame-parameters'.

\(fn CURSOR-TYPE)" t nil)

(defalias 'toggle-cursor-type-when-idle 'curchg-toggle-cursor-type-when-idle)

(autoload 'curchg-toggle-cursor-type-when-idle "site-lisp/cursor-chg" "\
Turn on or off automatically changing cursor type when Emacs is idle.
When on, use `curchg-idle-cursor-type' whenever Emacs is idle.
With prefix argument, turn on if ARG > 0; else turn off.

\(fn &optional ARG)" t nil)

(autoload 'curchg-change-cursor-when-idle-interval "site-lisp/cursor-chg" "\
Set wait until automatically change cursor type when Emacs is idle.
Whenever Emacs is idle for this many seconds, the cursor type will
change to `curchg-idle-cursor-type'.

To turn on or off automatically changing the cursor type when idle,
use `\\[toggle-cursor-type-when-idle].

\(fn SECS)" t nil)

;;;***

;;;### (autoloads (debbugs-gnu debbugs-gnu-search) "site-lisp/debbugs/debbugs-gnu"
;;;;;;  "site-lisp/debbugs/debbugs-gnu.el" (20488 45652))
;;; Generated autoloads from site-lisp/debbugs/debbugs-gnu.el

(autoload 'debbugs-gnu-search "site-lisp/debbugs/debbugs-gnu" "\
Search for Emacs bugs interactively.
Search arguments are requested interactively.  The \"search
phrase\" is used for full text search in the bugs database.
Further key-value pairs are requested until an empty key is
returned.  If a key cannot be queried by a SOAP request, it is
marked as \"client-side filter\".

\(fn)" t nil)

(autoload 'debbugs-gnu "site-lisp/debbugs/debbugs-gnu" "\
List all outstanding Emacs bugs.

\(fn SEVERITIES &optional PACKAGES ARCHIVEDP SUPPRESS)" t nil)

;;;***

;;;### (autoloads (deft deft-new-file) "site-lisp/deft/deft" "site-lisp/deft/deft.el"
;;;;;;  (20488 45653))
;;; Generated autoloads from site-lisp/deft/deft.el

(autoload 'deft-new-file "site-lisp/deft/deft" "\
Create a new file quickly, with an automatically generated filename
or the filter string if non-nil and deft-use-filename-as-title is set.
If the filter string is non-nil and title is not from filename,
use it as the title.

\(fn)" t nil)

(autoload 'deft "site-lisp/deft/deft" "\
Switch to *Deft* buffer and load files.

\(fn)" t nil)

;;;***

;;;### (autoloads nil "site-lisp/diff-mode-" "site-lisp/diff-mode-.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/diff-mode-.el

(defface diff-file1-hunk-header '((((background dark)) (:foreground "Yellow" :background "#3E3E00003E3E")) (t (:foreground "Blue" :background "DarkSeaGreen1"))) "\
Face used to highlight a diff hunk for the first `diff' argument." :group (quote diff-mode))

(defface diff-file2-hunk-header '((((background dark)) (:foreground "Cyan" :background "#111117175555")) (t (:foreground "Red" :background "PaleGoldenrod"))) "\
Face used to highlight a diff hunk for the second `diff' argument." :group (quote diff-mode))

(defface diff-indicator-changed '((((background dark)) (:foreground "#111117175555" :background "Yellow")) (t (:foreground "PaleGoldenrod" :background "MediumBlue"))) "\
*Face used to highlight the line-start indicator of a modified line." :group (quote diff-mode))

(defface diff-indicator-added '((((background dark)) (:foreground "#111117175555" :background "#FFFF9B9BFFFF")) (t (:foreground "PaleGoldenrod" :background "DarkGreen"))) "\
*Face used to highlight the line-start indicator of an inserted line." :group (quote diff-mode))

(defface diff-indicator-removed '((((background dark)) (:foreground "#111117175555" :background "#7474FFFF7474")) (t (:foreground "PaleGoldenrod" :background "DarkMagenta"))) "\
*Face used to highlight the line-start indicator of a removed line." :group (quote diff-mode))

;;;***

;;;### (autoloads (diminished-modes diminish-undo diminish) "site-lisp/diminish"
;;;;;;  "site-lisp/diminish.el" (20488 45440))
;;; Generated autoloads from site-lisp/diminish.el

(autoload 'diminish "site-lisp/diminish" "\
Diminish mode-line display of minor mode MODE to TO-WHAT (default \"\").

Interactively, enter (with completion) the name of any minor mode, followed
on the next line by what you want it diminished to (default empty string).
The response to neither prompt should be quoted.  However, in Lisp code,
both args must be quoted, the first as a symbol, the second as a string,
as in (diminish 'jiggle-mode \" Jgl\").

The mode-line displays of minor modes usually begin with a space, so
the modes' names appear as separate words on the mode line.  However, if
you're having problems with a cramped mode line, you may choose to use single
letters for some modes, without leading spaces.  Capitalizing them works
best; if you then diminish some mode to \"X\" but have abbrev-mode enabled as
well, you'll get a display like \"AbbrevX\".  This function prepends a space
to TO-WHAT if it's > 1 char long & doesn't already begin with a space.

\(fn MODE &optional TO-WHAT)" t nil)

(autoload 'diminish-undo "site-lisp/diminish" "\
Restore mode-line display of diminished mode MODE to its minor-mode value.
Do nothing if the arg is a minor mode that hasn't been diminished.

Interactively, enter (with completion) the name of any diminished mode (a
mode that was formerly a minor mode on which you invoked M-x diminish).
To restore all diminished modes to minor status, answer `diminished-modes'.
The response to the prompt shouldn't be quoted.  However, in Lisp code,
the arg must be quoted as a symbol, as in (diminish-undo 'diminished-modes).

\(fn MODE)" t nil)

(autoload 'diminished-modes "site-lisp/diminish" "\
Echo all active diminished or minor modes as if they were minor.
The display goes in the echo area; if it's too long even for that,
you can see the whole thing in the *Messages* buffer.
This doesn't change the status of any modes; it just lets you see
what diminished modes would be on the mode-line if they were still minor.

\(fn)" t nil)

;;;***

;;;### (autoloads (dired-do-sync-pool dired-do-sync dired-sync-version)
;;;;;;  "site-lisp/dired-sync/dired-sync" "site-lisp/dired-sync/dired-sync.el"
;;;;;;  (20488 45654))
;;; Generated autoloads from site-lisp/dired-sync/dired-sync.el

(autoload 'dired-sync-version "site-lisp/dired-sync/dired-sync" "\
Print version number of dired-sync in minibuffer or current
buffer.

\(fn ARG)" t nil)

(autoload 'dired-do-sync "site-lisp/dired-sync/dired-sync" "\
Synchronize 2 directories using commands defined in
`dired-sync-commands'.

\(fn &optional SOURCE DESTINATION)" t nil)

(autoload 'dired-do-sync-pool "site-lisp/dired-sync/dired-sync" "\
Sync pools defined in `dired-sync-pools'.

If POOL is not defined, user would be prompted for one.

If DST-LIMIT is passed to the function, it would override the
destination for the synchronization.

If called interactively using `universal-argument' (C-u)
synchronization DST-LIMIT would be prompted in addition to POOL.

If DST-LIMIT is `dired-sync-pool-all' all defined destination
would be synchronized.

\(fn &optional POOL DST-LIMIT)" t nil)

;;;***

;;;### (autoloads (edit-variable) "site-lisp/edit-var" "site-lisp/edit-var.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/edit-var.el

(autoload 'edit-variable "site-lisp/edit-var" "\
Edit the value of VARIABLE.

\(fn VARIABLE)" t nil)

;;;***

;;;### (autoloads (el-get-checksum el-get-make-recipes el-get-cd
;;;;;;  el-get-self-update el-get-update-all el-get-version) "site-lisp/el-get/el-get"
;;;;;;  "site-lisp/el-get/el-get.el" (20488 45693))
;;; Generated autoloads from site-lisp/el-get/el-get.el

(autoload 'el-get-version "site-lisp/el-get/el-get" "\
Message the current el-get version

\(fn)" t nil)

(autoload 'el-get-update-all "site-lisp/el-get/el-get" "\
Performs update of all installed packages.

\(fn &optional NO-PROMPT)" t nil)

(autoload 'el-get-self-update "site-lisp/el-get/el-get" "\
Update el-get itself.  The standard recipe takes care of reloading the code.

\(fn)" t nil)

(autoload 'el-get-cd "site-lisp/el-get/el-get" "\
Open dired in the package directory.

\(fn PACKAGE)" t nil)

(autoload 'el-get-make-recipes "site-lisp/el-get/el-get" "\
Loop over `el-get-sources' and write a recipe file for each
entry which is not a symbol and is not already a known recipe.

\(fn &optional DIR)" t nil)

(autoload 'el-get-checksum "site-lisp/el-get/el-get" "\
Compute the checksum of the given package, and put it in the kill-ring

\(fn PACKAGE &optional PACKAGE-STATUS-ALIST)" t nil)

;;;***

;;;### (autoloads (el-get-list-packages) "site-lisp/el-get/el-get-list-packages"
;;;;;;  "site-lisp/el-get/el-get-list-packages.el" (20488 45693))
;;; Generated autoloads from site-lisp/el-get/el-get-list-packages.el

(autoload 'el-get-list-packages "site-lisp/el-get/el-get-list-packages" "\
Display a list of packages.

\(fn)" t nil)

;;;***

;;;### (autoloads (elisp-depend-insert-comment elisp-depend-insert-require
;;;;;;  elisp-depend-print-dependencies elisp-depend-directory-list
;;;;;;  elisp-depend) "site-lisp/elisp-depend/elisp-depend" "site-lisp/elisp-depend/elisp-depend.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/elisp-depend/elisp-depend.el

(let ((loads (get 'elisp-depend 'custom-loads))) (if (member '"site-lisp/elisp-depend/elisp-depend" loads) nil (put 'elisp-depend 'custom-loads (cons '"site-lisp/elisp-depend/elisp-depend" loads))))

(defvar elisp-depend-directory-list '("/usr/share/emacs/") "\
List of directories that search should ignore.")

(custom-autoload 'elisp-depend-directory-list "site-lisp/elisp-depend/elisp-depend" t)

(autoload 'elisp-depend-print-dependencies "site-lisp/elisp-depend/elisp-depend" "\
Print library dependencies of the current buffer.
With prefix argument, don't include built-in libraries.
Every library that has a parent directory in
`elisp-depend-directory-list' is considered built-in.

\(fn &optional BUILT-IN)" t nil)

(autoload 'elisp-depend-insert-require "site-lisp/elisp-depend/elisp-depend" "\
Insert a block of (require sym) or 'autoload statements into an elisp file.

\(fn)" t nil)

(autoload 'elisp-depend-insert-comment "site-lisp/elisp-depend/elisp-depend" "\
Insert a block of `sym' statements into an elisp file.

\(fn)" t nil)

;;;***

;;;### (autoloads (elisp-slime-nav-find-elisp-thing-at-point elisp-slime-nav-mode)
;;;;;;  "site-lisp/elisp-slime-nav/elisp-slime-nav" "site-lisp/elisp-slime-nav/elisp-slime-nav.el"
;;;;;;  (20488 45695))
;;; Generated autoloads from site-lisp/elisp-slime-nav/elisp-slime-nav.el

(autoload 'elisp-slime-nav-mode "site-lisp/elisp-slime-nav/elisp-slime-nav" "\
Enable Slime-style navigation of elisp symbols using M-. and M-,

\(fn &optional ARG)" t nil)

(autoload 'elisp-slime-nav-find-elisp-thing-at-point "site-lisp/elisp-slime-nav/elisp-slime-nav" "\
Jump to the elisp thing at point, be it a function,variable, library or face.

With a prefix arg, prompt for the symbol to jump to.

Argument SYM-NAME thing to find.

\(fn SYM-NAME)" t nil)

;;;***

;;;### (autoloads (elnode-do-init elnode-init elnode-init-port elnode-wikiserver
;;;;;;  elnode-webserver elnode--webserver-handler-proc elnode-hostpath-default-table
;;;;;;  elnode-start) "site-lisp/elnode/elnode" "site-lisp/elnode/elnode.el"
;;;;;;  (20488 45697))
;;; Generated autoloads from site-lisp/elnode/elnode.el

(autoload 'elnode-start "site-lisp/elnode/elnode" "\
Start a server using REQUEST-HANDLER.

REQUEST-HANDLER will handle requests on PORT on HOST (which is
'localhost' by default).

REQUEST-HANDLER is a function which is called with the request.
The function is called with one argument, which is the
http-connection.

You can use functions such as `elnode-http-start' and
`elnode-http-send-body' to send the http response.

Example:

  (defun nic-server (httpcon)
    (elnode-http-start httpcon 200 '((\"Content-Type: text/html\")))
    (elnode-http-return httpcon \"<html><b>BIG!</b></html>\")
  )
  (elnode-start 'nic-server)

Now visit http://127.0.0.1:8000

If PORT is non-nil, then run server on PORT, otherwise default to
8000.

If HOST is non-nil, then run the server on the specified local IP
address, otherwise use localhost.  A few names are predefined:

  \"localhost\" is 127.0.0.1
  \"*\" is 0.0.0.0

Additionally, you may specifiy an IP address, e.g \"1.2.3.4\"

Note that although HOST may be specified, elnode does not
disambiguate on running servers by HOST.  So you cannot start two
elnode servers on the same port on different hosts.

\(fn REQUEST-HANDLER &key PORT (host \"localhost\") (defer-mode :managed))" t nil)

(defvar elnode-hostpath-default-table '(("[^/]+/wiki/\\(.*\\)" . elnode-wikiserver) ("[^/]+/\\(.*\\)" . elnode-webserver)) "\
Defines mappings for `elnode-hostpath-default-handler'.

This is the default mapping table for Elnode, out of the box. If
you customize this then elnode will serve these hostpath mappings
by just loading Elnode.

By default the table maps everything to
`elnode-webserver'. Unless you're happy with the default you
should probably get rid of the everything path because it will
interfere with any other mappings you add.")

(custom-autoload 'elnode-hostpath-default-table "site-lisp/elnode/elnode" t)

(autoload 'elnode--webserver-handler-proc "site-lisp/elnode/elnode" "\
Actual webserver implementation.

Do webserving to HTTPCON from the DOCROOT using the MIME-TYPES
for meta information.

This is not a real handler (because it takes more than the
HTTPCON) but it is called directly by the real webserver
handlers.

\(fn HTTPCON DOCROOT MIME-TYPES)" nil nil)

(autoload 'elnode-webserver "site-lisp/elnode/elnode" "\
A simple webserver that serves documents out of `elnode-webserver-docroot'.

This is just an example of an elnode webserver, but it may be all
that is needed most of the time.

See `elnode-webserver-handler-maker' for more possibilities for
making webserver functions.

HTTPCON is the HTTP connection to the user agent.

\(fn HTTPCON)" nil nil)

(autoload 'elnode-wikiserver "site-lisp/elnode/elnode" "\
Serve Wiki pages from `elnode-wikiserver-wikiroot'.

HTTPCON is the request.

The Wiki server is only available if the `creole' package is
provided. Otherwise it will just error.

\(fn HTTPCON)" nil nil)

(defvar elnode-init-port 8000 "\
The port that `elnode-init' starts the default server on.")

(custom-autoload 'elnode-init-port "site-lisp/elnode/elnode" t)

(autoload 'elnode-init "site-lisp/elnode/elnode" "\
Bootstraps the elnode environment when the Lisp is loaded.

It's useful to have elnode start automatically... on Lisp
load.  If the variable `elnode-init-port' is set then this
function will launch a server on it.

The server is started with `elnode-hostpath-default-handler' as
the handler and listening on `elnode-init-host'

\(fn)" t nil)

(defvar elnode-do-init 't "\
Should elnode start a server on load?

The server that is started is controlled by more elnode
customizations.

`elnode-hostpath-default-table' defines the mappings from
hostpath regexs to handler functions. By default elnode ships
with this customization setup to serve the document root defined
in `elnode-webserver-docroot', which by default is ~/public_html.")

(custom-autoload 'elnode-do-init "site-lisp/elnode/elnode" t)

(defvar elnode--inited nil "\
Records when elnode is initialized.
This is autoloading mechanics, see the eval-after-load for doing init.")

(eval-after-load 'elnode (if (and elnode-do-init (not elnode--inited)) (progn (elnode-init) (setq elnode--inited nil))))

;;;***

;;;### (autoloads (anything-quickrun quickrun) "site-lisp/emacs-quickrun/quickrun"
;;;;;;  "site-lisp/emacs-quickrun/quickrun.el" (20488 45700))
;;; Generated autoloads from site-lisp/emacs-quickrun/quickrun.el

(autoload 'quickrun "site-lisp/emacs-quickrun/quickrun" "\
Run commands quickly for current buffer

\(fn &optional START END)" t nil)

(autoload 'anything-quickrun "site-lisp/emacs-quickrun/quickrun" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (bookmark-w3m-bookmark-jump) "site-lisp/emacs-w3m/bookmark-w3m"
;;;;;;  "site-lisp/emacs-w3m/bookmark-w3m.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/bookmark-w3m.el

(autoload 'bookmark-w3m-bookmark-jump "site-lisp/emacs-w3m/bookmark-w3m" "\
Default bookmark handler for w3m buffers.

\(fn BOOKMARK)" nil nil)

;;;***

;;;### (autoloads (mime-w3m-preview-text/html) "site-lisp/emacs-w3m/mime-w3m"
;;;;;;  "site-lisp/emacs-w3m/mime-w3m.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/mime-w3m.el

(autoload 'mime-w3m-preview-text/html "site-lisp/emacs-w3m/mime-w3m" "\


\(fn ENTITY SITUATION)" nil nil)

;;;***

;;;### (autoloads (octet-mime-setup mime-view-octet mime-preview-octet
;;;;;;  octet-find-file octet-buffer) "site-lisp/emacs-w3m/octet"
;;;;;;  "site-lisp/emacs-w3m/octet.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/octet.el

(autoload 'octet-buffer "site-lisp/emacs-w3m/octet" "\
View octet-stream content according to `octet-type-filter-alist'.
Optional NAME is the filename.
If optional CONTENT-TYPE is specified, it is used for type guess.

\(fn &optional NAME CONTENT-TYPE)" t nil)

(autoload 'octet-find-file "site-lisp/emacs-w3m/octet" "\
Find FILE with octet-stream decoding.

\(fn FILE)" t nil)

(autoload 'mime-preview-octet "site-lisp/emacs-w3m/octet" "\
A method for mime-view to preview octet message.

\(fn ENTITY SITUATION)" nil nil)

(autoload 'mime-view-octet "site-lisp/emacs-w3m/octet" "\
A method for mime-view to display octet message.

\(fn ENTITY SITUATION)" nil nil)

(autoload 'octet-mime-setup "site-lisp/emacs-w3m/octet" "\
Octet setting for MIME module.

\(fn)" nil nil)

;;;***

;;;### (autoloads (w3m-buffer w3m-region w3m-find-file w3m-browse-url
;;;;;;  w3m w3m-gohome w3m-goto-url-new-session w3m-goto-url w3m-download
;;;;;;  w3m-retrieve) "site-lisp/emacs-w3m/w3m" "site-lisp/emacs-w3m/w3m.el"
;;;;;;  (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m.el

(autoload 'w3m-retrieve "site-lisp/emacs-w3m/w3m" "\
Retrieve web contents pointed to by URL.
It will put the retrieved contents into the current buffer.

If HANDLER is nil, this function will retrieve web contents, return
the content type of the retrieved data, and then come to an end.  This
behavior is what is called a synchronous operation.  You have to
specify HANDLER in order to make this function show its real ability,
which is called an asynchronous operation.

If HANDLER is a function, this function will come to an end in no time.
In this case, contents will be retrieved by the asynchronous process
after a while.  And after finishing retrieving contents successfully,
HANDLER will be called on the buffer where this function starts.  The
content type of the retrieved data will be passed to HANDLER as a
string argument.

NO-UNCOMPRESS specifies whether this function should not uncompress contents.
NO-CACHE specifies whether this function should not use cached contents.
POST-DATA and REFERER will be sent to the web server with a request.

\(fn URL &optional NO-UNCOMPRESS NO-CACHE POST-DATA REFERER HANDLER)" nil nil)

(autoload 'w3m-download "site-lisp/emacs-w3m/w3m" "\
Download contents of URL to a file named FILENAME.
NO-CHACHE (which the prefix argument gives when called interactively)
specifies not using the cached data.

\(fn URL &optional FILENAME NO-CACHE HANDLER POST-DATA)" t nil)

(autoload 'w3m-goto-url "site-lisp/emacs-w3m/w3m" "\
Visit World Wide Web pages.  This is the primitive function of `w3m'.
If the second argument RELOAD is non-nil, reload a content of URL.
Except that if it is 'redisplay, re-display the page without reloading.
The third argument CHARSET specifies a charset to be used for decoding
a content.
The fourth argument POST-DATA should be a string or a cons cell.  If
it is a string, it makes this function request a body as if the
content-type is \"x-www-form-urlencoded\".  If it is a cons cell, the
car of a cell is used as the content-type and the cdr of a cell is
used as the body.
If the fifth argument REFERER is specified, it is used for a Referer:
field for this request.
The remaining HANDLER, ELEMENT[1], and NO-POPUP are for the
internal operations of emacs-w3m.
You can also use \"quicksearch\" url schemes such as \"gg:emacs\" which
would search for the term \"emacs\" with the Google search engine.  See
the `w3m-search' function and the variable `w3m-uri-replace-alist'.

\[1] A note for the developers: ELEMENT is a history element which has
already been registered in the `w3m-history-flat' variable.  It is
corresponding to URL to be retrieved at this time, not for the url of
the current page.

\(fn URL &optional RELOAD CHARSET POST-DATA REFERER HANDLER ELEMENT NO-POPUP)" t nil)

(autoload 'w3m-goto-url-new-session "site-lisp/emacs-w3m/w3m" "\
Visit World Wide Web pages in a new session.
If you invoke this command in the emacs-w3m buffer, the new session
will be created by copying the current session.  Otherwise, the new
session will start afresh.

\(fn URL &optional RELOAD CHARSET POST-DATA REFERER)" t nil)

(autoload 'w3m-gohome "site-lisp/emacs-w3m/w3m" "\
Go to the Home page.

\(fn)" t nil)

(autoload 'w3m "site-lisp/emacs-w3m/w3m" "\
Visit World Wide Web pages using the external w3m command.

When you invoke this command interactively for the first time, it will
visit a page which is pointed to by a string like url around the
cursor position or the home page specified by the `w3m-home-page'
variable, but you will be prompted for a URL if `w3m-quick-start' is
nil (default t) or `w3m-home-page' is nil.

The variables `w3m-pop-up-windows' and `w3m-pop-up-frames' control
whether this command should pop to a window or a frame up for the
session.

When emacs-w3m sessions have already been opened, this command will
pop to the existing window or frame up, but if `w3m-quick-start' is
nil, (default t), you will be prompted for a URL (which defaults to
`popup' meaning to pop to an existing emacs-w3m buffer up).

In addition, if the prefix argument is given or you enter the empty
string for the prompt, it will visit the home page specified by the
`w3m-home-page' variable or the \"about:\" page.

You can also run this command in the batch mode as follows:

  emacs -f w3m http://emacs-w3m.namazu.org/ &

In that case, or if this command is called non-interactively, the
variables `w3m-pop-up-windows' and `w3m-pop-up-frames' will be ignored
\(treated as nil) and it will run emacs-w3m at the current (or the
initial) window.

If the optional NEW-SESSION is non-nil, this function makes a new
emacs-w3m buffer.  Besides that, it also makes a new emacs-w3m buffer
if `w3m-make-new-session' is non-nil and a user specifies a url string.

The optional INTERACTIVE-P is for the internal use; it is mainly used
to check whether Emacs 22 or later calls this function as an
interactive command in the batch mode.

\(fn &optional URL NEW-SESSION INTERACTIVE-P)" t nil)

(autoload 'w3m-browse-url "site-lisp/emacs-w3m/w3m" "\
Ask emacs-w3m to browse URL.
NEW-SESSION specifies whether to create a new emacs-w3m session.  URL
defaults to the string looking like a url around the cursor position.
Pop to a window or a frame up according to `w3m-pop-up-windows' and
`w3m-pop-up-frames'.

\(fn URL &optional NEW-SESSION)" t nil)

(autoload 'w3m-find-file "site-lisp/emacs-w3m/w3m" "\
Function used to open FILE whose name is expressed in ordinary format.
The file name will be converted into the file: scheme.

\(fn FILE)" t nil)

(autoload 'w3m-region "site-lisp/emacs-w3m/w3m" "\
Render the region of the current buffer between START and END.
URL specifies the address where the contents come from.  It can be
omitted or nil when the address is not identified.  CHARSET is used
for decoding the contents.  If it is nil, this function attempts to
parse the meta tag to extract the charset.

\(fn START END &optional URL CHARSET)" t nil)

(autoload 'w3m-buffer "site-lisp/emacs-w3m/w3m" "\
Render the current buffer.
See `w3m-region' for the optional arguments.

\(fn &optional URL CHARSET)" t nil)

;;;***

;;;### (autoloads (w3m-antenna w3m-about-antenna) "site-lisp/emacs-w3m/w3m-antenna"
;;;;;;  "site-lisp/emacs-w3m/w3m-antenna.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-antenna.el

(autoload 'w3m-about-antenna "site-lisp/emacs-w3m/w3m-antenna" "\


\(fn URL &optional NO-DECODE NO-CACHE POST-DATA REFERER HANDLER)" nil nil)

(autoload 'w3m-antenna "site-lisp/emacs-w3m/w3m-antenna" "\
Report changes of WEB sites, which is specified in `w3m-antenna-sites'.

\(fn &optional NO-CACHE)" t nil)

;;;***

;;;### (autoloads (w3m-setup-bookmark-menu w3m-about-bookmark w3m-bookmark-view-new-session
;;;;;;  w3m-bookmark-view w3m-bookmark-add-current-url-group w3m-bookmark-add-all-urls
;;;;;;  w3m-bookmark-add-current-url w3m-bookmark-add-this-url) "site-lisp/emacs-w3m/w3m-bookmark"
;;;;;;  "site-lisp/emacs-w3m/w3m-bookmark.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-bookmark.el

(autoload 'w3m-bookmark-add-this-url "site-lisp/emacs-w3m/w3m-bookmark" "\
Add link under cursor to bookmark.

\(fn)" t nil)

(autoload 'w3m-bookmark-add-current-url "site-lisp/emacs-w3m/w3m-bookmark" "\
Add a url of the current page to the bookmark.
With prefix, ask for a new url instead of the present one.

\(fn &optional ARG)" t nil)

(autoload 'w3m-bookmark-add-all-urls "site-lisp/emacs-w3m/w3m-bookmark" "\
Add urls of all pages being visited to the bookmark.

\(fn)" t nil)

(autoload 'w3m-bookmark-add-current-url-group "site-lisp/emacs-w3m/w3m-bookmark" "\
Add link of the group of current urls to the bookmark.

\(fn)" t nil)

(autoload 'w3m-bookmark-view "site-lisp/emacs-w3m/w3m-bookmark" "\
Display the bookmark.

\(fn &optional RELOAD)" t nil)

(autoload 'w3m-bookmark-view-new-session "site-lisp/emacs-w3m/w3m-bookmark" "\
Display the bookmark on a new session.

\(fn &optional RELOAD)" t nil)

(autoload 'w3m-about-bookmark "site-lisp/emacs-w3m/w3m-bookmark" "\


\(fn &rest ARGS)" nil nil)

(autoload 'w3m-setup-bookmark-menu "site-lisp/emacs-w3m/w3m-bookmark" "\
Setup w3m bookmark items in menubar.

\(fn)" nil nil)

;;;***

;;;### (autoloads (w3m-about-cookie w3m-cookie w3m-cookie-get w3m-cookie-set
;;;;;;  w3m-cookie-shutdown) "site-lisp/emacs-w3m/w3m-cookie" "site-lisp/emacs-w3m/w3m-cookie.el"
;;;;;;  (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-cookie.el

(autoload 'w3m-cookie-shutdown "site-lisp/emacs-w3m/w3m-cookie" "\
Save cookies, and reset cookies' data.

\(fn)" t nil)

(autoload 'w3m-cookie-set "site-lisp/emacs-w3m/w3m-cookie" "\
Register cookies which correspond to URL.
BEG and END should be an HTTP response header region on current buffer.

\(fn URL BEG END)" nil nil)

(autoload 'w3m-cookie-get "site-lisp/emacs-w3m/w3m-cookie" "\
Get a cookie field string which corresponds to the URL.

\(fn URL)" nil nil)

(autoload 'w3m-cookie "site-lisp/emacs-w3m/w3m-cookie" "\
Display cookies and enable you to manage them.

\(fn &optional NO-CACHE)" t nil)

(autoload 'w3m-about-cookie "site-lisp/emacs-w3m/w3m-cookie" "\
Make the html contents to display and to enable you to manage cookies.

\(fn URL &optional NO-DECODE NO-CACHE POST-DATA &rest ARGS)" nil nil)

;;;***

;;;### (autoloads (w3m-dtree w3m-about-dtree) "site-lisp/emacs-w3m/w3m-dtree"
;;;;;;  "site-lisp/emacs-w3m/w3m-dtree.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-dtree.el

(autoload 'w3m-about-dtree "site-lisp/emacs-w3m/w3m-dtree" "\


\(fn URL &optional NODECODE ALLFILES &rest ARGS)" nil nil)

(autoload 'w3m-dtree "site-lisp/emacs-w3m/w3m-dtree" "\
Display directory tree on local file system.
If called with 'prefix argument', display all directorys and files.

\(fn ALLFILES PATH)" t nil)

;;;***

;;;### (autoloads (w3m-fb-mode) "site-lisp/emacs-w3m/w3m-fb" "site-lisp/emacs-w3m/w3m-fb.el"
;;;;;;  (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-fb.el

(defvar w3m-fb-mode nil "\
Non-nil if W3m-Fb mode is enabled.
See the command `w3m-fb-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `w3m-fb-mode'.")

(custom-autoload 'w3m-fb-mode "site-lisp/emacs-w3m/w3m-fb" nil)

(autoload 'w3m-fb-mode "site-lisp/emacs-w3m/w3m-fb" "\
Toggle W3M Frame Buffer mode.
This allows frame-local lists of buffers (tabs).

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (w3m-filter) "site-lisp/emacs-w3m/w3m-filter" "site-lisp/emacs-w3m/w3m-filter.el"
;;;;;;  (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-filter.el

(autoload 'w3m-filter "site-lisp/emacs-w3m/w3m-filter" "\
Apply filtering rule of URL against a content in this buffer.

\(fn URL)" nil nil)

;;;***

;;;### (autoloads (w3m-fontify-forms) "site-lisp/emacs-w3m/w3m-form"
;;;;;;  "site-lisp/emacs-w3m/w3m-form.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-form.el

(autoload 'w3m-fontify-forms "site-lisp/emacs-w3m/w3m-form" "\
Process half-dumped data and fontify forms in this buffer.

\(fn)" nil nil)

;;;***

;;;### (autoloads (w3m-linknum-bookmark-add-this-url w3m-linknum-download-this-url
;;;;;;  w3m-linknum-print-this-url w3m-linknum-edit-this-url w3m-linknum-external-view-this-url
;;;;;;  w3m-linknum-save-image w3m-linknum-view-image w3m-linknum-toggle-inline-image
;;;;;;  w3m-linknum-follow w3m-go-to-linknum w3m-link-numbering-mode)
;;;;;;  "site-lisp/emacs-w3m/w3m-lnum" "site-lisp/emacs-w3m/w3m-lnum.el"
;;;;;;  (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-lnum.el

(autoload 'w3m-link-numbering-mode "site-lisp/emacs-w3m/w3m-lnum" "\
Minor mode to extend point commands by using Conkeror style number selection.
With prefix ARG 0 disable battery included point functions, otherwise
enable them.  With no prefix ARG - toggle.

\(fn &optional ARG)" t nil)

(autoload 'w3m-go-to-linknum "site-lisp/emacs-w3m/w3m-lnum" "\
Turn on link, image and form numbers and ask for one to go to.
With prefix ARG don't highlight current link.
0 corresponds to location url.

\(fn ARG)" t nil)

(autoload 'w3m-linknum-follow "site-lisp/emacs-w3m/w3m-lnum" "\
Turn on link numbers, ask for one and execute appropriate action on it.
When link - visit it, when button - press, when input - activate it,
when image - toggle it.
With prefix ARG visit link in new session or don't move over
field/button/image on activation/push/toggle.
With `-' ARG, for link image - go to it and toggle it.
With -4 ARG, for link image - toggle it.
With double prefix ARG, prompt for url to visit.
With triple prefix ARG, prompt for url to visit in new session.

\(fn ARG)" t nil)

(autoload 'w3m-linknum-toggle-inline-image "site-lisp/emacs-w3m/w3m-lnum" "\
If image at point, toggle it.
Otherwise turn on link numbers and toggle selected image.
With prefix ARG open url under image in new session.
If no such url, move over image and toggle it.

\(fn &optional ARG)" t nil)

(autoload 'w3m-linknum-view-image "site-lisp/emacs-w3m/w3m-lnum" "\
Display the image under point in the external viewer.
If no image at poing, turn on image numbers and display selected.
The viewer is defined in `w3m-content-type-alist' for every type of an
image.

\(fn)" t nil)

(autoload 'w3m-linknum-save-image "site-lisp/emacs-w3m/w3m-lnum" "\
Save the image under point to a file.
If no image at poing, turn on image numbers and save selected.
The default name will be the original name of the image.

\(fn)" t nil)

(autoload 'w3m-linknum-external-view-this-url "site-lisp/emacs-w3m/w3m-lnum" "\
Launch the external browser and display the link at point.
If no link at point, turn on link numbers and open selected externally.

\(fn)" t nil)

(autoload 'w3m-linknum-edit-this-url "site-lisp/emacs-w3m/w3m-lnum" "\
Edit the page linked from the anchor under the cursor.
If no such, turn on link numbers and edit selected.

\(fn)" t nil)

(autoload 'w3m-linknum-print-this-url "site-lisp/emacs-w3m/w3m-lnum" "\
Display the url under point in the echo area and put it into `kill-ring'.
If no url under point, activate numbering and select one.

\(fn)" t nil)

(autoload 'w3m-linknum-download-this-url "site-lisp/emacs-w3m/w3m-lnum" "\
Download the file or the page pointed to by the link under point.
If no point, activate numbering and select andchor to download.

\(fn)" t nil)

(autoload 'w3m-linknum-bookmark-add-this-url "site-lisp/emacs-w3m/w3m-lnum" "\
Add link under cursor to bookmark.
If no link under point, activate numbering and ask for one.

\(fn)" t nil)

;;;***

;;;### (autoloads (w3m-namazu w3m-about-namazu) "site-lisp/emacs-w3m/w3m-namazu"
;;;;;;  "site-lisp/emacs-w3m/w3m-namazu.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-namazu.el

(autoload 'w3m-about-namazu "site-lisp/emacs-w3m/w3m-namazu" "\


\(fn URL &optional NO-DECODE NO-CACHE &rest ARGS)" nil nil)

(autoload 'w3m-namazu "site-lisp/emacs-w3m/w3m-namazu" "\
Search indexed files with Namazu.

\(fn INDEX QUERY &optional RELOAD)" t nil)

;;;***

;;;### (autoloads (w3m-perldoc w3m-about-perldoc) "site-lisp/emacs-w3m/w3m-perldoc"
;;;;;;  "site-lisp/emacs-w3m/w3m-perldoc.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-perldoc.el

(autoload 'w3m-about-perldoc "site-lisp/emacs-w3m/w3m-perldoc" "\


\(fn URL &optional NO-DECODE NO-CACHE &rest ARGS)" nil nil)

(autoload 'w3m-perldoc "site-lisp/emacs-w3m/w3m-perldoc" "\
View Perl documents.

\(fn DOCNAME)" t nil)

;;;***

;;;### (autoloads (w3m-search-uri-replace w3m-search-new-session
;;;;;;  w3m-search) "site-lisp/emacs-w3m/w3m-search" "site-lisp/emacs-w3m/w3m-search.el"
;;;;;;  (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-search.el

(autoload 'w3m-search "site-lisp/emacs-w3m/w3m-search" "\
Search QUERY using SEARCH-ENGINE.
When called interactively with a prefix argument, you can choose one of
the search engines defined in `w3m-search-engine-alist'.  Otherwise use
`w3m-search-default-engine'.
If Transient Mark mode, use the region as an initial string of query
and deactivate the mark.

\(fn SEARCH-ENGINE QUERY)" t nil)

(autoload 'w3m-search-new-session "site-lisp/emacs-w3m/w3m-search" "\
Like `w3m-search', but do the search in a new session.

\(fn SEARCH-ENGINE QUERY)" t nil)

(autoload 'w3m-search-uri-replace "site-lisp/emacs-w3m/w3m-search" "\
Generate query string for ENGINE from URI matched by last search.

\(fn URI ENGINE)" nil nil)

;;;***

;;;### (autoloads (w3m-session-last-crashed-session w3m-session-last-autosave-session
;;;;;;  w3m-setup-session-menu w3m-session-select w3m-session-crash-recovery-remove
;;;;;;  w3m-session-save) "site-lisp/emacs-w3m/w3m-session" "site-lisp/emacs-w3m/w3m-session.el"
;;;;;;  (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-session.el

(autoload 'w3m-session-save "site-lisp/emacs-w3m/w3m-session" "\
Save list of displayed session.

\(fn)" t nil)

(autoload 'w3m-session-crash-recovery-remove "site-lisp/emacs-w3m/w3m-session" "\
Remove crash recovery session set.

\(fn)" nil nil)

(autoload 'w3m-session-select "site-lisp/emacs-w3m/w3m-session" "\
Select session from session list.

\(fn)" t nil)

(autoload 'w3m-setup-session-menu "site-lisp/emacs-w3m/w3m-session" "\
Setup w3m session items in menubar.

\(fn)" nil nil)

(autoload 'w3m-session-last-autosave-session "site-lisp/emacs-w3m/w3m-session" "\


\(fn)" nil nil)

(autoload 'w3m-session-last-crashed-session "site-lisp/emacs-w3m/w3m-session" "\


\(fn)" nil nil)

;;;***

;;;### (autoloads (w3m-replace-symbol) "site-lisp/emacs-w3m/w3m-symbol"
;;;;;;  "site-lisp/emacs-w3m/w3m-symbol.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-symbol.el

(autoload 'w3m-replace-symbol "site-lisp/emacs-w3m/w3m-symbol" "\


\(fn)" nil nil)

;;;***

;;;### (autoloads (w3m-about-weather w3m-weather) "site-lisp/emacs-w3m/w3m-weather"
;;;;;;  "site-lisp/emacs-w3m/w3m-weather.el" (20488 45713))
;;; Generated autoloads from site-lisp/emacs-w3m/w3m-weather.el

(autoload 'w3m-weather "site-lisp/emacs-w3m/w3m-weather" "\
Display weather report.

\(fn AREA)" t nil)

(autoload 'w3m-about-weather "site-lisp/emacs-w3m/w3m-weather" "\


\(fn URL NO-DECODE NO-CACHE POST-DATA REFERER HANDLER)" nil nil)

;;;***

;;;### (autoloads (erc-hl-nicks) "site-lisp/erc-hl-nicks/erc-hl-nicks"
;;;;;;  "site-lisp/erc-hl-nicks/erc-hl-nicks.el" (20497 30548))
;;; Generated autoloads from site-lisp/erc-hl-nicks/erc-hl-nicks.el

(autoload 'erc-hl-nicks "site-lisp/erc-hl-nicks/erc-hl-nicks" "\
Retrieves a list of usernames from the server and highlights them

\(fn)" nil nil)

(eval-after-load 'erc '(add-to-list 'erc-modules 'hl-nicks t))

(when (and (boundp 'erc-modules) (not (member 'hl-nicks 'erc-modules))) (add-to-list 'erc-modules 'hl-nicks))

;;;***

;;;### (autoloads (eval-expr eval-expr-install eval-expr-print-function
;;;;;;  eval-expr-print-length eval-expr-print-level eval-expr-use-echo-area-or-buffer
;;;;;;  eval-expr-honor-debug-on-error eval-expr-prompt eval-expr-error-message-delay)
;;;;;;  "site-lisp/eval-expr/eval-expr" "site-lisp/eval-expr/eval-expr.el"
;;;;;;  (20488 45740))
;;; Generated autoloads from site-lisp/eval-expr/eval-expr.el

(defvar eval-expr-error-message-delay 3 "\
*Amount of time, in seconds, to display in echo area before continuing.")

(custom-autoload 'eval-expr-error-message-delay "site-lisp/eval-expr/eval-expr" t)

(defvar eval-expr-prompt "Eval: " "\
*Prompt used by eval-expr.")

(custom-autoload 'eval-expr-prompt "site-lisp/eval-expr/eval-expr" t)

(defvar eval-expr-honor-debug-on-error t "\
*If non-nil, do not trap evaluation errors.
Instead, allow errors to throw user into the debugger, provided
debug-on-error specifies that the particular error is a debuggable condition.")

(custom-autoload 'eval-expr-honor-debug-on-error "site-lisp/eval-expr/eval-expr" t)

(defvar eval-expr-use-echo-area-or-buffer 1 "\
*Preference for when to use echo area of a temporary buffer for results.

If set to t or `buffer', always put results into a temporary buffer.
If set to `nil' or `echo-area', always display results in echo area.
If an integer N, use the echo area unless the results would require more
than N lines to display; in that case, use a temporary buffer.

Some versions of emacs can display arbitrarily large output in the echo
area by dynamically resizing it, so a temporary buffer is not necessary
unless you expect the output to exceed the limits of the resize thresholds
or want to be able to edit the results.")

(custom-autoload 'eval-expr-use-echo-area-or-buffer "site-lisp/eval-expr/eval-expr" t)

(defvar eval-expr-print-level (cond ((boundp 'eval-expression-print-level) (default-value 'eval-expression-print-level)) ((boundp 'print-level) (default-value 'print-level))) "\
*Like print-level, but affect results printed by `eval-expr' only.")

(custom-autoload 'eval-expr-print-level "site-lisp/eval-expr/eval-expr" t)

(defvar eval-expr-print-length (cond ((boundp 'eval-expression-print-length) (default-value 'eval-expression-print-length)) ((boundp 'print-length) (default-value 'print-length))) "\
*Like print-length, but affect results printed by `eval-expr' only.")

(custom-autoload 'eval-expr-print-length "site-lisp/eval-expr/eval-expr" t)

(defvar eval-expr-print-function (if (fboundp 'pp) 'pp 'prin1) "\
*Function to use for printing objects.
E.g. this can be set to `pp' to generate pretty-printed results,
or `prin1' for unformatted results.")

(custom-autoload 'eval-expr-print-function "site-lisp/eval-expr/eval-expr" t)

(autoload 'eval-expr-install "site-lisp/eval-expr/eval-expr" "\
Replace standard eval-expression command with enhanced eval-expr.

\(fn)" t nil)

(autoload 'eval-expr "site-lisp/eval-expr/eval-expr" "\
Evaluate EXPRESSION and print value in minibuffer, temp, or current buffer.
A temp output buffer is used if there is more than one line in the
evaluated result.
If invoked with a prefix arg, or second lisp argument EE::INSERT-VALUE is
non-nil, then insert final value into the current buffer at point.

Value is also consed on to front of the variable `values'.

\(fn EE::EXPRESSION &optional EE::INSERT-VALUE)" t nil)

;;;***

;;;### (autoloads (fetchmail-mode) "site-lisp/fetchmail-mode" "site-lisp/fetchmail-mode.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/fetchmail-mode.el

(autoload 'fetchmail-mode "site-lisp/fetchmail-mode" "\
Mode for editing .fetchmailrc files

\(fn)" t nil)

;;;***

;;;### (autoloads (fold-dwim-toggle fold-dwim-show-all fold-dwim-hide-all)
;;;;;;  "site-lisp/fold-dwim" "site-lisp/fold-dwim.el" (20488 45440))
;;; Generated autoloads from site-lisp/fold-dwim.el

(autoload 'fold-dwim-hide-all "site-lisp/fold-dwim" "\
Hide all folds of various kinds in the buffer or region

\(fn)" t nil)

(autoload 'fold-dwim-show-all "site-lisp/fold-dwim" "\
Show all folds of various kinds in the buffer or region

\(fn)" t nil)

(autoload 'fold-dwim-toggle "site-lisp/fold-dwim" "\
Try fold-dwim-show to show any hidden text at point; if no
hidden fold is found, try fold-dwim-hide to hide the construction
at the cursor.

\(fn)" t nil)

;;;***

;;;### (autoloads (gist-fetch gist-list gist-region-or-buffer-private
;;;;;;  gist-region-or-buffer gist-buffer-private gist-buffer gist-region-private
;;;;;;  gist-region) "site-lisp/gist/gist" "site-lisp/gist/gist.el"
;;;;;;  (20488 45743))
;;; Generated autoloads from site-lisp/gist/gist.el

(autoload 'gist-region "site-lisp/gist/gist" "\
Post the current region as a new paste at gist.github.com
Copies the URL into the kill ring.

With a prefix argument, makes a private paste.

\(fn BEGIN END &optional PRIVATE CALLBACK)" t nil)

(autoload 'gist-region-private "site-lisp/gist/gist" "\
Post the current region as a new private paste at gist.github.com
Copies the URL into the kill ring.

\(fn BEGIN END)" t nil)

(autoload 'gist-buffer "site-lisp/gist/gist" "\
Post the current buffer as a new paste at gist.github.com.
Copies the URL into the kill ring.

With a prefix argument, makes a private paste.

\(fn &optional PRIVATE)" t nil)

(autoload 'gist-buffer-private "site-lisp/gist/gist" "\
Post the current buffer as a new private paste at gist.github.com.
Copies the URL into the kill ring.

\(fn)" t nil)

(autoload 'gist-region-or-buffer "site-lisp/gist/gist" "\
Post either the current region, or if mark is not set, the current buffer as a new paste at gist.github.com
Copies the URL into the kill ring.

With a prefix argument, makes a private paste.

\(fn &optional PRIVATE)" t nil)

(autoload 'gist-region-or-buffer-private "site-lisp/gist/gist" "\
Post either the current region, or if mark is not set, the current buffer as a new private paste at gist.github.com
Copies the URL into the kill ring.

\(fn)" t nil)

(autoload 'gist-list "site-lisp/gist/gist" "\
Displays a list of all of the current user's gists in a new buffer.

\(fn &optional FORCE-RELOAD)" t nil)

(autoload 'gist-fetch "site-lisp/gist/gist" "\


\(fn ID)" t nil)

;;;***

;;;### (autoloads (git-commit-mode) "site-lisp/git-commit-mode/git-commit"
;;;;;;  "site-lisp/git-commit-mode/git-commit.el" (20488 45744))
;;; Generated autoloads from site-lisp/git-commit-mode/git-commit.el

(autoload 'git-commit-mode "site-lisp/git-commit-mode/git-commit" "\
Major mode for editing git commit messages.
This mode helps with editing git commit messages both by
providing commands to do common tasks, and by highlighting the
basic structure of and errors in git commit messages.

Commands:\\<git-commit-map>
\\[git-commit-commit]   `git-commit-commit'  Finish editing and commit
\\[git-commit-signoff]   `git-commit-signoff'   Insert a Signed-off-by header
\\[git-commit-ack]   `git-commit-ack'   Insert an Acked-by header
\\[git-commit-test]   `git-commit-test'   Insert a Tested-by header
\\[git-commit-review]   `git-commit-review'   Insert a Reviewed-by header
\\[git-commit-cc]   `git-commit-cc'   Insert a Cc header
\\[git-commit-reported]   `git-commit-reported'   Insert a Reported-by header

Turning on git commit calls the hooks in `git-commit-mode-hook'.

\(fn)" t nil)

(when (boundp 'session-mode-disable-list) (add-to-list 'session-mode-disable-list 'git-commit-mode))

(setq auto-mode-alist (append auto-mode-alist '(("COMMIT_EDITMSG" . git-commit-mode) ("NOTES_EDITMSG" . git-commit-mode) ("MERGE_MSG" . git-commit-mode) ("TAG_EDITMSG" . git-commit-mode))))

;;;***

;;;### (autoloads (gnus-alias-message-x-completion gnus-alias-determine-identity
;;;;;;  gnus-alias-use-identity gnus-alias-select-identity gnus-alias-init)
;;;;;;  "site-lisp/gnus-alias" "site-lisp/gnus-alias.el" (20488 45440))
;;; Generated autoloads from site-lisp/gnus-alias.el

(autoload 'gnus-alias-init "site-lisp/gnus-alias" "\
Add gnus-alias call to message mode hook.

\(fn)" t nil)

(autoload 'gnus-alias-select-identity "site-lisp/gnus-alias" "\
Prompt user for an identity and use it.

\(fn)" t nil)

(autoload 'gnus-alias-use-identity "site-lisp/gnus-alias" "\
Use an Identity defined in `gnus-alias-identity-alist'.

IDENTITY must be a valid entry in `gnus-alias-identity-alist',
otherwise an error will occur (NOTE: this behavior has changed
significantly from that found in 'gnus-pers').

If called interactively with no identity, user will be prompted for
one.

\(fn &optional IDENTITY)" t nil)

(autoload 'gnus-alias-determine-identity "site-lisp/gnus-alias" "\
Function that chooses a Identity based on message headers.

See `gnus-alias-identity-rules' for more information.  Optional
LOOKUP-ONLY is a boolean that, when non-nil, says to determine the
Identity, but don't actually use it (just return it)

\(fn &optional LOOKUP-ONLY)" nil nil)

(autoload 'gnus-alias-message-x-completion "site-lisp/gnus-alias" "\
Can be used to select identifies in new mail after tab-completion.

WHICH-HEADER should be set to the header that completion was just
performed on.

When tab-completion is performed in the To: header, a new identity
will be selected according to the rules set up in
`gnus-alias-identity-alist' (which see).

This particular function expects an argument, and as such should only
be used with the `message-x-after-completion-functions'hook:

  (add-hook 'message-x-after-completion-functions
            'gnus-alias-message-x-completion)

This should be place in the `message-load-hook' (see gnus-alias file
for details).  If such an argument is not needed in the current
context, `gnus-alias-determine-identity' may be used directly in a hook.

\(fn WHICH-HEADER)" nil nil)

;;;***

;;;### (autoloads (graphviz-dot-mode) "site-lisp/graphviz-dot-mode"
;;;;;;  "site-lisp/graphviz-dot-mode.el" (20488 45440))
;;; Generated autoloads from site-lisp/graphviz-dot-mode.el

(autoload 'graphviz-dot-mode "site-lisp/graphviz-dot-mode" "\
Major mode for the dot language. \\<graphviz-dot-mode-map> 
TAB indents for graph lines. 

\\[graphviz-dot-indent-graph]	- Indentaion function.
\\[graphviz-dot-preview]	- Previews graph in a buffer.
\\[graphviz-dot-view]	- Views graph in an external viewer.
\\[graphviz-dot-indent-line]	- Indents current line of code.
\\[graphviz-dot-complete-word]	- Completes the current word.
\\[electric-graphviz-dot-terminate-line]	- Electric newline.
\\[electric-graphviz-dot-open-brace]	- Electric open braces.
\\[electric-graphviz-dot-close-brace]	- Electric close braces.
\\[electric-graphviz-dot-semi]	- Electric semi colons.

Variables specific to this mode:

  graphviz-dot-dot-program            (default `dot')
       Location of the dot program.
  graphviz-dot-view-command           (default `doted %s')
       Command to run when `graphviz-dot-view' is executed.
  graphviz-dot-view-edit-command      (default nil)
       If the user should be asked to edit the view command.
  graphviz-dot-save-before-view       (default t)
       Automatically save current buffer berore `graphviz-dot-view'.
  graphviz-dot-preview-extension      (default `png')
       File type to use for `graphviz-dot-preview'.
  graphviz-dot-auto-indent-on-newline (default t)
       Whether to run `electric-graphviz-dot-terminate-line' when 
       newline is entered.
  graphviz-dot-auto-indent-on-braces (default t)
       Whether to run `electric-graphviz-dot-open-brace' and
       `electric-graphviz-dot-close-brace' when braces are 
       entered.
  graphviz-dot-auto-indent-on-semi (default t)
       Whether to run `electric-graphviz-dot-semi' when semi colon
       is typed.
  graphviz-dot-toggle-completions  (default nil)
       If completions should be displayed in the buffer instead of a
       completion buffer when \\[graphviz-dot-complete-word] is
       pressed repeatedly.

This mode can be customized by running \\[graphviz-dot-customize].

Turning on Graphviz Dot mode calls the value of the variable 
`graphviz-dot-mode-hook' with no args, if that value is non-nil.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode))

;;;***

;;;### (autoloads (gtags-mode) "site-lisp/gtags" "site-lisp/gtags.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/gtags.el

(autoload 'gtags-mode "site-lisp/gtags" "\
Toggle Gtags mode, a minor mode for browsing source code using GLOBAL.

Specify the root directory of project.
	\\[gtags-visit-rootdir]
Input tag name and move to the definition.
	\\[gtags-find-tag]
Input tag name and move to the definition in other window.
        \\[gtags-find-tag-other-window]
Input tag name and move to the referenced point.
	\\[gtags-find-rtag]
Input symbol and move to the locations.
	\\[gtags-find-symbol]
Input pattern, search with grep(1) and move to the locations.
	\\[gtags-find-with-grep]
Input pattern, search with idutils(1) and move to the locations.
	\\[gtags-find-with-idutils]
Input pattern and move to the top of the file.
	\\[gtags-find-file]
Input pattern and show the list of definitions of the file.
	\\[gtags-parse-file]
Get the expression as a tagname around here and move there.
	\\[gtags-find-tag-from-here]
Display current screen on hypertext browser.
	\\[gtags-display-browser]
Get the expression as a tagname around here and move there.
	\\[gtags-find-tag-by-event]
Move to previous point on the stack.
	\\[gtags-pop-stack]

Key definitions:
\\{gtags-mode-map}
Turning on Gtags mode calls the value of the variable `gtags-mode-hook'
with no args, if that value is non-nil.

\(fn &optional FORCES)" t nil)

;;;***

;;;### (autoloads (guess-style-guess-all guess-style-guess-variable
;;;;;;  guess-style-set-variable) "site-lisp/guess-style" "site-lisp/guess-style.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/guess-style.el

(autoload 'guess-style-set-variable "site-lisp/guess-style" "\
Override VARIABLE's guessed value for future guesses.
If FILE is a directory, the variable will be overridden for the entire
directory, unless single files are later overridden.
If called interactively, the current buffer's file name will be used for FILE.
With a prefix argument a directory name may be entered.

\(fn VARIABLE VALUE FILE)" t nil)

(autoload 'guess-style-guess-variable "site-lisp/guess-style" "\
Guess a value for VARIABLE according to `guess-style-guesser-alist'.
If GUESSER is set, it's used instead of the default.

\(fn VARIABLE &optional GUESSER)" nil nil)

(autoload 'guess-style-guess-all "site-lisp/guess-style" "\
Guess all variables in `guess-style-guesser-alist'.
Special care is taken so no guesser is called twice.

\(fn)" t nil)

;;;***

;;;### (autoloads (ghc-core-mode ghc-core-create-core) "site-lisp/haskell-mode/ghc-core"
;;;;;;  "site-lisp/haskell-mode/ghc-core.el" (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/ghc-core.el

(autoload 'ghc-core-create-core "site-lisp/haskell-mode/ghc-core" "\
Compiled and load the current buffer as tidy core

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.hcr\\'" . ghc-core-mode))

(autoload 'ghc-core-mode "site-lisp/haskell-mode/ghc-core" "\
Major mode for GHC Core files.

\(fn)" t nil)

;;;***

;;;### (autoloads (haskell-c-mode) "site-lisp/haskell-mode/haskell-c"
;;;;;;  "site-lisp/haskell-mode/haskell-c.el" (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/haskell-c.el

(add-to-list 'auto-mode-alist '("\\.hsc\\'" . haskell-c-mode))

(autoload 'haskell-c-mode "site-lisp/haskell-mode/haskell-c" "\
Major mode for Haskell FFI files.

\(fn)" t nil)

;;;***

;;;### (autoloads (haskell-cabal-mode) "site-lisp/haskell-mode/haskell-cabal"
;;;;;;  "site-lisp/haskell-mode/haskell-cabal.el" (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/haskell-cabal.el

(add-to-list 'auto-mode-alist '("\\.cabal\\'" . haskell-cabal-mode))

(autoload 'haskell-cabal-mode "site-lisp/haskell-mode/haskell-cabal" "\
Major mode for Cabal package description files.

\(fn)" t nil)

;;;***

;;;### (autoloads (haskell-decl-scan-mode) "site-lisp/haskell-mode/haskell-decl-scan"
;;;;;;  "site-lisp/haskell-mode/haskell-decl-scan.el" (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/haskell-decl-scan.el

(autoload 'haskell-decl-scan-mode "site-lisp/haskell-mode/haskell-decl-scan" "\
Minor mode for declaration scanning for Haskell mode.
Top-level declarations are scanned and listed in the menu item \"Declarations\".
Selecting an item from this menu will take point to the start of the
declaration.

\\[haskell-ds-forward-decl] and \\[haskell-ds-backward-decl] move forward and backward to the start of a declaration.

Under XEmacs, the following keys are also defined:

\\[fume-list-functions] lists the declarations of the current buffer,
\\[fume-prompt-function-goto] prompts for a declaration to move to, and
\\[fume-mouse-function-goto] moves to the declaration whose name is at point.

This may link with `haskell-doc' (only for Emacs currently).

For non-literate and LaTeX-style literate scripts, we assume the
common convention that top-level declarations start at the first
column.  For Bird-style literate scripts, we assume the common
convention that top-level declarations start at the third column,
ie. after \"> \".

Anything in `font-lock-comment-face' is not considered for a
declaration.  Therefore, using Haskell font locking with comments
coloured in `font-lock-comment-face' improves declaration scanning.

To turn on declaration scanning for all Haskell buffers, add this to
.emacs:

  (add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)

To turn declaration scanning on for the current buffer, call
`turn-on-haskell-decl-scan'.

Literate Haskell scripts are supported: If the value of
`haskell-literate' (automatically set by the Haskell mode of
Moss&Thorn) is `bird', a Bird-style literate script is assumed.  If it
is nil or `tex', a non-literate or LaTeX-style literate script is
assumed, respectively.

Invokes `haskell-decl-scan-mode-hook'.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (haskell-doc-show-type haskell-doc-mode) "site-lisp/haskell-mode/haskell-doc"
;;;;;;  "site-lisp/haskell-mode/haskell-doc.el" (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/haskell-doc.el

(autoload 'haskell-doc-mode "site-lisp/haskell-mode/haskell-doc" "\
Enter `haskell-doc-mode' for showing fct types in the echo area.
See variable docstring.

\(fn &optional ARG)" t nil)

(defalias 'turn-on-haskell-doc-mode 'haskell-doc-mode)

(autoload 'haskell-doc-show-type "site-lisp/haskell-mode/haskell-doc" "\
Show the type of the function near point.
For the function under point, show the type in the echo area.
This information is extracted from the `haskell-doc-prelude-types' alist
of prelude functions and their types, or from the local functions in the
current buffer.

\(fn &optional SYM)" t nil)

;;;***

;;;### (autoloads (haskell-indent-mode) "site-lisp/haskell-mode/haskell-indent"
;;;;;;  "site-lisp/haskell-mode/haskell-indent.el" (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/haskell-indent.el

(autoload 'haskell-indent-mode "site-lisp/haskell-mode/haskell-indent" "\
``Intelligent'' Haskell indentation mode.
This deals with the layout rule of Haskell.
\\[haskell-indent-cycle] starts the cycle which proposes new
possibilities as long as the TAB key is pressed.  Any other key
or mouse click terminates the cycle and is interpreted except for
RET which merely exits the cycle.
Other special keys are:
    \\[haskell-indent-insert-equal]
      inserts an =
    \\[haskell-indent-insert-guard]
      inserts an |
    \\[haskell-indent-insert-otherwise]
      inserts an | otherwise =
these functions also align the guards and rhs of the current definition
    \\[haskell-indent-insert-where]
      inserts a where keyword
    \\[haskell-indent-align-guards-and-rhs]
      aligns the guards and rhs of the region
    \\[haskell-indent-put-region-in-literate]
      makes the region a piece of literate code in a literate script

Invokes `haskell-indent-hook' if not nil.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (haskell-hayoo haskell-hoogle literate-haskell-mode
;;;;;;  haskell-mode) "site-lisp/haskell-mode/haskell-mode" "site-lisp/haskell-mode/haskell-mode.el"
;;;;;;  (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/haskell-mode.el

(add-to-list 'load-path (or (file-name-directory load-file-name) (car load-path)))

(autoload 'haskell-mode "site-lisp/haskell-mode/haskell-mode" "\
Major mode for editing Haskell programs.
Blank lines separate paragraphs, comments start with `-- '.
\\<haskell-mode-map>
Literate scripts are supported via `literate-haskell-mode'.
The variable `haskell-literate' indicates the style of the script in the
current buffer.  See the documentation on this variable for more details.

Modules can hook in via `haskell-mode-hook'.  The following modules
are supported with an `autoload' command:

   `haskell-decl-scan', Graeme E Moss
     Scans top-level declarations, and places them in a menu.

   `haskell-doc', Hans-Wolfgang Loidl
     Echoes types of functions or syntax of keywords when the cursor is idle.

   `haskell-indentation', Kristof Bastiaensen
     Intelligent semi-automatic indentation Mk2

   `haskell-indent', Guy Lapalme
     Intelligent semi-automatic indentation.

   `haskell-simple-indent', Graeme E Moss and Heribert Schuetz
     Simple indentation.

Module X is activated using the command `turn-on-X'.  For example,
`haskell-indent' is activated using `turn-on-haskell-indent'.
For more information on a module, see the help for its `X-mode'
function.  Some modules can be deactivated using `turn-off-X'.  (Note
that `haskell-doc' is irregular in using `turn-(on/off)-haskell-doc-mode'.)

Use `haskell-version' to find out what version this is.

Invokes `haskell-mode-hook'.

\(fn)" t nil)

(autoload 'literate-haskell-mode "site-lisp/haskell-mode/haskell-mode" "\
As `haskell-mode' but for literate scripts.

\(fn)" t nil)
(add-to-list 'auto-mode-alist        '("\\.\\(?:[gh]s\\|hi\\)\\'" . haskell-mode))
(add-to-list 'auto-mode-alist        '("\\.l[gh]s\\'" . literate-haskell-mode))
(add-to-list 'interpreter-mode-alist '("runghc" . haskell-mode))
(add-to-list 'interpreter-mode-alist '("runhaskell" . haskell-mode))

(autoload 'haskell-hoogle "site-lisp/haskell-mode/haskell-mode" "\
Do a Hoogle search for QUERY.

\(fn QUERY)" t nil)

(defalias 'hoogle 'haskell-hoogle)

(autoload 'haskell-hayoo "site-lisp/haskell-mode/haskell-mode" "\
Do a Hayoo search for QUERY.

\(fn QUERY)" t nil)

(defalias 'hayoo 'haskell-hayoo)

;;;***

;;;### (autoloads (inferior-haskell-find-haddock inferior-haskell-find-definition
;;;;;;  inferior-haskell-info inferior-haskell-type inferior-haskell-load-and-run
;;;;;;  inferior-haskell-load-file switch-to-haskell) "site-lisp/haskell-mode/inf-haskell"
;;;;;;  "site-lisp/haskell-mode/inf-haskell.el" (20488 45746))
;;; Generated autoloads from site-lisp/haskell-mode/inf-haskell.el

(defalias 'run-haskell 'switch-to-haskell)

(autoload 'switch-to-haskell "site-lisp/haskell-mode/inf-haskell" "\
Show the inferior-haskell buffer.  Start the process if needed.

\(fn &optional ARG)" t nil)

(autoload 'inferior-haskell-load-file "site-lisp/haskell-mode/inf-haskell" "\
Pass the current buffer's file to the inferior haskell process.
If prefix arg \\[universal-argument] is given, just reload the previous file.

\(fn &optional RELOAD)" t nil)

(autoload 'inferior-haskell-load-and-run "site-lisp/haskell-mode/inf-haskell" "\
Pass the current buffer's file to haskell and then run a COMMAND.

\(fn COMMAND)" t nil)

(autoload 'inferior-haskell-type "site-lisp/haskell-mode/inf-haskell" "\
Query the haskell process for the type of the given expression.
If optional argument `insert-value' is non-nil, insert the type above point
in the buffer.  This can be done interactively with the \\[universal-argument] prefix.
The returned info is cached for reuse by `haskell-doc-mode'.

\(fn EXPR &optional INSERT-VALUE)" t nil)

(autoload 'inferior-haskell-info "site-lisp/haskell-mode/inf-haskell" "\
Query the haskell process for the info of the given expression.

\(fn SYM)" t nil)

(autoload 'inferior-haskell-find-definition "site-lisp/haskell-mode/inf-haskell" "\
Attempt to locate and jump to the definition of the given expression.

\(fn SYM)" t nil)

(autoload 'inferior-haskell-find-haddock "site-lisp/haskell-mode/inf-haskell" "\
Find and open the Haddock documentation of SYM.
Make sure to load the file into GHCi or Hugs first by using C-c C-l.
Only works for functions in a package installed with ghc-pkg, or
whatever the value of `haskell-package-manager-name' is.

This function needs to find which package a given module belongs
to.  In order to do this, it computes a module-to-package lookup
alist, which is expensive to compute (it takes upwards of five
seconds with more than about thirty installed packages).  As a
result, we cache it across sessions using the cache file
referenced by `inferior-haskell-module-alist-file'. We test to
see if this is newer than `haskell-package-conf-file' every time
we load it.

\(fn SYM)" t nil)

;;;***

;;;### (autoloads (helm-descbinds-uninstall helm-descbinds-install
;;;;;;  helm-descbinds) "site-lisp/helm-descbinds/helm-descbinds"
;;;;;;  "site-lisp/helm-descbinds/helm-descbinds.el" (20488 45765))
;;; Generated autoloads from site-lisp/helm-descbinds/helm-descbinds.el

(autoload 'helm-descbinds "site-lisp/helm-descbinds/helm-descbinds" "\
Yet Another `describe-bindings' with `helm'.

\(fn &optional PREFIX BUFFER)" t nil)

(autoload 'helm-descbinds-install "site-lisp/helm-descbinds/helm-descbinds" "\
Use `helm-descbinds' as a replacement of `describe-bindings'.

\(fn)" t nil)

(autoload 'helm-descbinds-uninstall "site-lisp/helm-descbinds/helm-descbinds" "\
Restore original `describe-bindings'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-send-bug-report-from-helm helm-send-bug-report
;;;;;;  helm-follow-mode helm-kill-selection-and-quit helm-yank-selection
;;;;;;  helm-prev-visible-mark helm-next-visible-mark helm-display-all-visible-marks
;;;;;;  helm-toggle-all-marks helm-unmark-all helm-mark-all helm-toggle-visible-mark
;;;;;;  helm-scroll-other-window-down helm-scroll-other-window helm-execute-persistent-action
;;;;;;  helm-select-2nd-action-or-end-of-line helm-select-4th-action
;;;;;;  helm-select-3rd-action helm-select-2nd-action helm-enlarge-window
;;;;;;  helm-narrow-window helm-toggle-resplit-window helm-delete-minibuffer-contents
;;;;;;  helm-delete-current-selection helm-debug-output helm-keyboard-quit
;;;;;;  helm-exit-minibuffer helm-confirm-and-exit-minibuffer helm-next-source
;;;;;;  helm-previous-source helm-end-of-buffer helm-beginning-of-buffer
;;;;;;  helm-next-page helm-previous-page helm-next-line helm-previous-line
;;;;;;  helm-select-action helm-force-update helm-other-buffer helm-resume
;;;;;;  helm-open-last-log) "site-lisp/helm/helm" "site-lisp/helm/helm.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm.el

(autoload 'helm-open-last-log "site-lisp/helm/helm" "\
Open helm log file of last helm session.
If `helm-last-log-file' is nil, switch to \"*Helm Log*\" buffer.

\(fn)" t nil)

(autoload 'helm-resume "site-lisp/helm/helm" "\
Resurrect previously invoked `helm'.
Called with a prefix arg, allow choosing among all existing
helm buffers.  i.e choose among various helm sessions.

\(fn ARG)" t nil)

(autoload 'helm-other-buffer "site-lisp/helm/helm" "\
Simplified interface of `helm' with other `helm-buffer'.
Call `helm' with only ANY-SOURCES and ANY-BUFFER as args.

\(fn ANY-SOURCES ANY-BUFFER)" nil nil)

(autoload 'helm-force-update "site-lisp/helm/helm" "\
Force recalculation and update of candidates.
If arg PRESELECT, a candidate to preselect, is provided,
It will be preselected by `helm-update', otherwise the current candidate
will be preselected is available.
If current source has `update' attribute, a function without argument,
call it before update.

\(fn &optional PRESELECT)" t nil)

(autoload 'helm-select-action "site-lisp/helm/helm" "\
Select an action for the currently selected candidate.
If action buffer is selected, back to the helm buffer.

\(fn)" t nil)

(autoload 'helm-previous-line "site-lisp/helm/helm" "\
Move selection to the previous line.

\(fn)" t nil)

(autoload 'helm-next-line "site-lisp/helm/helm" "\
Move selection to the next line.

\(fn)" t nil)

(autoload 'helm-previous-page "site-lisp/helm/helm" "\
Move selection back with a pageful.

\(fn)" t nil)

(autoload 'helm-next-page "site-lisp/helm/helm" "\
Move selection forward with a pageful.

\(fn)" t nil)

(autoload 'helm-beginning-of-buffer "site-lisp/helm/helm" "\
Move selection at the top.

\(fn)" t nil)

(autoload 'helm-end-of-buffer "site-lisp/helm/helm" "\
Move selection at the bottom.

\(fn)" t nil)

(autoload 'helm-previous-source "site-lisp/helm/helm" "\
Move selection to the previous source.

\(fn)" t nil)

(autoload 'helm-next-source "site-lisp/helm/helm" "\
Move selection to the next source.

\(fn)" t nil)

(autoload 'helm-confirm-and-exit-minibuffer "site-lisp/helm/helm" "\
Maybe ask for confirmation when exiting helm.
It is similar to `minibuffer-complete-and-exit' adapted to helm.
If `minibuffer-completion-confirm' value is 'confirm,
send in minibuffer confirm message and exit on next hit.
If `minibuffer-completion-confirm' value is t,
don't exit and send message 'no match'.

\(fn)" t nil)

(autoload 'helm-exit-minibuffer "site-lisp/helm/helm" "\
Select the current candidate by exiting the minibuffer.

\(fn)" t nil)

(autoload 'helm-keyboard-quit "site-lisp/helm/helm" "\
Quit minibuffer in helm.
If action buffer is displayed, kill it.

\(fn)" t nil)

(autoload 'helm-debug-output "site-lisp/helm/helm" "\
Show all helm-related variables at this time.

\(fn)" t nil)

(autoload 'helm-delete-current-selection "site-lisp/helm/helm" "\
Delete the currently selected item.

\(fn)" t nil)

(autoload 'helm-delete-minibuffer-contents "site-lisp/helm/helm" "\
Same as `delete-minibuffer-contents' but this is a command.

\(fn)" t nil)

(autoload 'helm-toggle-resplit-window "site-lisp/helm/helm" "\
Toggle resplit helm window, vertically or horizontally.

\(fn)" t nil)

(autoload 'helm-narrow-window "site-lisp/helm/helm" "\
Narrow helm window.

\(fn)" t nil)

(autoload 'helm-enlarge-window "site-lisp/helm/helm" "\
Enlarge helm window.

\(fn)" t nil)

(autoload 'helm-select-2nd-action "site-lisp/helm/helm" "\
Select the 2nd action for the currently selected candidate.

\(fn)" t nil)

(autoload 'helm-select-3rd-action "site-lisp/helm/helm" "\
Select the 3rd action for the currently selected candidate.

\(fn)" t nil)

(autoload 'helm-select-4th-action "site-lisp/helm/helm" "\
Select the 4th action for the currently selected candidate.

\(fn)" t nil)

(autoload 'helm-select-2nd-action-or-end-of-line "site-lisp/helm/helm" "\
Select the 2nd action for the currently selected candidate.
This happen when point is at the end of minibuffer.
Otherwise goto the end of minibuffer.

\(fn)" t nil)

(autoload 'helm-execute-persistent-action "site-lisp/helm/helm" "\
Perform the associated action ATTR without quitting helm.
ATTR default is 'persistent-action', but it can be helm else.
In this case you have to add this new attribute to your source.
When `helm-samewindow' and ONEWINDOW are non--nil,
the helm window is never split in persistent action.

\(fn &optional (attr (quote persistent-action)) ONEWINDOW)" t nil)

(autoload 'helm-scroll-other-window "site-lisp/helm/helm" "\
Scroll other window (not *Helm* window) upward.

\(fn)" t nil)

(autoload 'helm-scroll-other-window-down "site-lisp/helm/helm" "\
Scroll other window (not *Helm* window) downward.

\(fn)" t nil)

(autoload 'helm-toggle-visible-mark "site-lisp/helm/helm" "\
Toggle helm visible mark at point.

\(fn)" t nil)

(autoload 'helm-mark-all "site-lisp/helm/helm" "\
Mark all visible unmarked candidates in current source.

\(fn)" t nil)

(autoload 'helm-unmark-all "site-lisp/helm/helm" "\
Unmark all candidates in all sources of current helm session.

\(fn)" t nil)

(autoload 'helm-toggle-all-marks "site-lisp/helm/helm" "\
Toggle all marks.
Mark all visible candidates of current source or unmark all candidates
visible or invisible in all sources of current helm session

\(fn)" t nil)

(autoload 'helm-display-all-visible-marks "site-lisp/helm/helm" "\
Show all `helm' visible marks strings.
Only useful for debugging.

\(fn)" t nil)

(autoload 'helm-next-visible-mark "site-lisp/helm/helm" "\
Move next helm visible mark.
If PREV is non-nil move to precedent.

\(fn &optional PREV)" t nil)

(autoload 'helm-prev-visible-mark "site-lisp/helm/helm" "\
Move previous helm visible mark.

\(fn)" t nil)

(autoload 'helm-yank-selection "site-lisp/helm/helm" "\
Set minibuffer contents to current selection.

\(fn)" t nil)

(autoload 'helm-kill-selection-and-quit "site-lisp/helm/helm" "\
Store current selection to kill ring.
You can paste it by typing \\[yank].

\(fn)" t nil)

(autoload 'helm-follow-mode "site-lisp/helm/helm" "\
Execute persistent action everytime the cursor is moved when enabled.

\(fn &optional ARG)" t nil)

(autoload 'helm-send-bug-report "site-lisp/helm/helm" "\
Send a bug report of helm.el.

\(fn)" t nil)

(autoload 'helm-send-bug-report-from-helm "site-lisp/helm/helm" "\
Send a bug report of helm.el in helm session.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-c-reset-adaptative-history) "site-lisp/helm/helm-adaptative"
;;;;;;  "site-lisp/helm/helm-adaptative.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-adaptative.el

(autoload 'helm-c-reset-adaptative-history "site-lisp/helm/helm-adaptative" "\
Delete all `helm-c-adaptive-history' and his file.
Useful when you have a old or corrupted `helm-c-adaptive-history-file'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-apt) "site-lisp/helm/helm-apt" "site-lisp/helm/helm-apt.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-apt.el

(autoload 'helm-apt "site-lisp/helm/helm-apt" "\
Preconfigured `helm' : frontend of APT package manager.
With a prefix arg reload cache.

\(fn ARG)" t nil)

;;;***

;;;### (autoloads (helm-bbdb) "site-lisp/helm/helm-bbdb" "site-lisp/helm/helm-bbdb.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-bbdb.el

(autoload 'helm-bbdb "site-lisp/helm/helm-bbdb" "\
Preconfigured `helm' for BBDB.

Needs BBDB.

http://bbdb.sourceforge.net/

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-bookmark-ext helm-c-bmkext-run-edit) "site-lisp/helm/helm-bmkext"
;;;;;;  "site-lisp/helm/helm-bmkext.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-bmkext.el

(autoload 'helm-c-bmkext-run-edit "site-lisp/helm/helm-bmkext" "\
Run `bmkext-edit-bookmark' from keyboard.

\(fn)" t nil)

(autoload 'helm-bookmark-ext "site-lisp/helm/helm-bmkext" "\
Preconfigured `helm' for bookmark-extensions sources.
Needs bookmark-ext.el:
<http://mercurial.intuxication.org/hg/emacs-bookmark-extension>.
Contain also `helm-c-source-google-suggest'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-c-pp-bookmarks helm-bookmarks helm-c-bookmark-run-delete
;;;;;;  helm-c-bookmark-run-jump-other-window) "site-lisp/helm/helm-bookmark"
;;;;;;  "site-lisp/helm/helm-bookmark.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-bookmark.el

(autoload 'helm-c-bookmark-run-jump-other-window "site-lisp/helm/helm-bookmark" "\
Jump to bookmark from keyboard.

\(fn)" t nil)

(autoload 'helm-c-bookmark-run-delete "site-lisp/helm/helm-bookmark" "\
Delete bookmark from keyboard.

\(fn)" t nil)

(autoload 'helm-bookmarks "site-lisp/helm/helm-bookmark" "\
Preconfigured `helm' for bookmarks.

\(fn)" t nil)

(autoload 'helm-c-pp-bookmarks "site-lisp/helm/helm-bookmark" "\
Preconfigured `helm' for bookmarks (pretty-printed).

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-buffers-list helm-buffer-run-ediff helm-buffer-switch-to-elscreen
;;;;;;  helm-buffer-switch-other-frame helm-buffer-switch-other-window
;;;;;;  helm-buffer-run-query-replace helm-buffer-run-query-replace-regexp
;;;;;;  helm-buffer-run-zgrep helm-buffer-run-grep helm-buffer-run-kill-buffers
;;;;;;  helm-buffer-save-persistent helm-buffer-revert-persistent
;;;;;;  helm-buffer-diff-persistent) "site-lisp/helm/helm-buffers"
;;;;;;  "site-lisp/helm/helm-buffers.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-buffers.el

(autoload 'helm-buffer-diff-persistent "site-lisp/helm/helm-buffers" "\
Toggle diff buffer without quitting helm.

\(fn)" t nil)

(autoload 'helm-buffer-revert-persistent "site-lisp/helm/helm-buffers" "\
Revert buffer without quitting helm.

\(fn)" t nil)

(autoload 'helm-buffer-save-persistent "site-lisp/helm/helm-buffers" "\
Save buffer without quitting helm.

\(fn)" t nil)

(autoload 'helm-buffer-run-kill-buffers "site-lisp/helm/helm-buffers" "\
Run kill buffer action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-run-grep "site-lisp/helm/helm-buffers" "\
Run Grep action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-run-zgrep "site-lisp/helm/helm-buffers" "\
Run Grep action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-run-query-replace-regexp "site-lisp/helm/helm-buffers" "\
Run Query replace regexp action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-run-query-replace "site-lisp/helm/helm-buffers" "\
Run Query replace action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-switch-other-window "site-lisp/helm/helm-buffers" "\
Run switch to other window action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-switch-other-frame "site-lisp/helm/helm-buffers" "\
Run switch to other frame action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-switch-to-elscreen "site-lisp/helm/helm-buffers" "\
Run switch to elscreen  action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffer-run-ediff "site-lisp/helm/helm-buffers" "\
Run ediff action from `helm-c-source-buffers-list'.

\(fn)" t nil)

(autoload 'helm-buffers-list "site-lisp/helm/helm-buffers" "\
Preconfigured `helm' to list buffers.
It is an enhanced version of `helm-for-buffers'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-simple-call-tree) "site-lisp/helm/helm-call-tree"
;;;;;;  "site-lisp/helm/helm-call-tree.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-call-tree.el

(autoload 'helm-simple-call-tree "site-lisp/helm/helm-call-tree" "\
Preconfigured `helm' for simple-call-tree. List function relationships.

Needs simple-call-tree.el.
http://www.emacswiki.org/cgi-bin/wiki/download/simple-call-tree.el

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-colors) "site-lisp/helm/helm-color" "site-lisp/helm/helm-color.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-color.el

(autoload 'helm-colors "site-lisp/helm/helm-color" "\
Preconfigured `helm' for color.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-M-x) "site-lisp/helm/helm-command" "site-lisp/helm/helm-command.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-command.el

(autoload 'helm-M-x "site-lisp/helm/helm-command" "\
Preconfigured `helm' for Emacs commands.
It is `helm' replacement of regular `M-x' `execute-extended-command'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-configuration) "site-lisp/helm/helm-config"
;;;;;;  "site-lisp/helm/helm-config.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-config.el

(define-prefix-command 'helm-command-prefix)

(autoload 'helm-configuration "site-lisp/helm/helm-config" "\
Customize `helm'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-complex-command-history helm-timers helm-manage-advice
;;;;;;  helm-c-apropos helm-lisp-completion-or-file-name-at-point
;;;;;;  helm-lisp-completion-at-point-or-indent helm-c-complete-file-name-at-point
;;;;;;  helm-lisp-completion-at-point) "site-lisp/helm/helm-elisp"
;;;;;;  "site-lisp/helm/helm-elisp.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-elisp.el

(autoload 'helm-lisp-completion-at-point "site-lisp/helm/helm-elisp" "\
Helm lisp symbol completion at point.

\(fn)" t nil)

(autoload 'helm-c-complete-file-name-at-point "site-lisp/helm/helm-elisp" "\
Complete file name at point.

\(fn)" t nil)

(autoload 'helm-lisp-completion-at-point-or-indent "site-lisp/helm/helm-elisp" "\
First call indent and second call complete lisp symbol.
The second call should happen before `helm-lisp-completion-or-indent-delay',
after this delay, next call will indent again.
After completion, next call is always indent.
See that like click and double mouse click.
One hit indent, two quick hits maybe indent and complete.

\(fn ARG)" t nil)

(autoload 'helm-lisp-completion-or-file-name-at-point "site-lisp/helm/helm-elisp" "\
Complete lisp symbol or filename at point.
Filename completion happen if filename is started in
or between double quotes.

\(fn)" t nil)

(autoload 'helm-c-apropos "site-lisp/helm/helm-elisp" "\
Preconfigured helm to describe commands, functions, variables and faces.

\(fn)" t nil)

(autoload 'helm-manage-advice "site-lisp/helm/helm-elisp" "\
Preconfigured `helm' to disable/enable function advices.

\(fn)" t nil)

(autoload 'helm-timers "site-lisp/helm/helm-elisp" "\
Preconfigured `helm' for timers.

\(fn)" t nil)

(autoload 'helm-complex-command-history "site-lisp/helm/helm-elisp" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (helm-elscreen) "site-lisp/helm/helm-elscreen"
;;;;;;  "site-lisp/helm/helm-elscreen.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-elscreen.el

(autoload 'helm-elscreen "site-lisp/helm/helm-elscreen" "\
Preconfigured helm to list elscreen.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-emms) "site-lisp/helm/helm-emms" "site-lisp/helm/helm-emms.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-emms.el

(autoload 'helm-emms "site-lisp/helm/helm-emms" "\
Preconfigured `helm' for emms sources.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-eshell-history helm-esh-pcomplete) "site-lisp/helm/helm-eshell"
;;;;;;  "site-lisp/helm/helm-eshell.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-eshell.el

(autoload 'helm-esh-pcomplete "site-lisp/helm/helm-eshell" "\
Preconfigured helm to provide helm completion in eshell.

\(fn)" t nil)

(autoload 'helm-eshell-history "site-lisp/helm/helm-eshell" "\
Preconfigured helm for eshell history.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-calcul-expression helm-eval-expression-with-eldoc
;;;;;;  helm-eval-expression) "site-lisp/helm/helm-eval" "site-lisp/helm/helm-eval.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-eval.el

(autoload 'helm-eval-expression "site-lisp/helm/helm-eval" "\
Preconfigured helm for `helm-c-source-evaluation-result'.

\(fn ARG)" t nil)

(autoload 'helm-eval-expression-with-eldoc "site-lisp/helm/helm-eval" "\
Preconfigured helm for `helm-c-source-evaluation-result' with `eldoc' support. 

\(fn)" t nil)

(autoload 'helm-calcul-expression "site-lisp/helm/helm-eval" "\
Preconfigured helm for `helm-c-source-calculation-result'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-c-run-external-command) "site-lisp/helm/helm-external"
;;;;;;  "site-lisp/helm/helm-external.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-external.el

(autoload 'helm-c-run-external-command "site-lisp/helm/helm-external" "\
Preconfigured `helm' to run External PROGRAM asyncronously from Emacs.
If program is already running exit with error.
You can set your own list of commands with
`helm-c-external-commands-list'.

\(fn PROGRAM)" t nil)

;;;***

;;;### (autoloads (helm-recentf helm-for-files helm-dired-hardlink-file
;;;;;;  helm-dired-symlink-file helm-dired-copy-file helm-dired-rename-file
;;;;;;  helm-insert-file helm-write-file helm-find-files helm-c-copy-files-async
;;;;;;  helm-dired-mode helm-ff-rotate-right-persistent helm-ff-rotate-left-persistent
;;;;;;  helm-ff-run-kill-buffer-persistent helm-ff-persistent-delete
;;;;;;  helm-ff-properties-persistent helm-find-files-down-one-level
;;;;;;  helm-ff-run-toggle-basename helm-ff-run-print-file helm-ff-run-etags
;;;;;;  helm-ff-run-gnus-attach-files helm-ff-run-locate helm-ff-run-open-file-externally
;;;;;;  helm-ff-run-switch-other-frame helm-ff-run-switch-other-window
;;;;;;  helm-ff-run-switch-to-eshell helm-ff-run-complete-fn-at-point
;;;;;;  helm-ff-run-delete-file helm-ff-run-hardlink-file helm-ff-run-symlink-file
;;;;;;  helm-ff-run-ediff-merge-file helm-ff-run-ediff-file helm-ff-run-eshell-command-on-file
;;;;;;  helm-ff-run-load-file helm-ff-run-byte-compile-file helm-ff-run-rename-file
;;;;;;  helm-ff-run-copy-file helm-ff-run-zgrep helm-ff-run-pdfgrep
;;;;;;  helm-ff-run-grep helm-ff-run-switch-to-history helm-ff-run-toggle-auto-update)
;;;;;;  "site-lisp/helm/helm-files" "site-lisp/helm/helm-files.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-files.el

(autoload 'helm-ff-run-toggle-auto-update "site-lisp/helm/helm-files" "\


\(fn)" t nil)

(autoload 'helm-ff-run-switch-to-history "site-lisp/helm/helm-files" "\
Run Switch to history action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-grep "site-lisp/helm/helm-files" "\
Run Grep action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-pdfgrep "site-lisp/helm/helm-files" "\
Run Pdfgrep action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-zgrep "site-lisp/helm/helm-files" "\
Run Grep action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-copy-file "site-lisp/helm/helm-files" "\
Run Copy file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-rename-file "site-lisp/helm/helm-files" "\
Run Rename file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-byte-compile-file "site-lisp/helm/helm-files" "\
Run Byte compile file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-load-file "site-lisp/helm/helm-files" "\
Run Load file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-eshell-command-on-file "site-lisp/helm/helm-files" "\
Run eshell command on file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-ediff-file "site-lisp/helm/helm-files" "\
Run Ediff file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-ediff-merge-file "site-lisp/helm/helm-files" "\
Run Ediff merge file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-symlink-file "site-lisp/helm/helm-files" "\
Run Symlink file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-hardlink-file "site-lisp/helm/helm-files" "\
Run Hardlink file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-delete-file "site-lisp/helm/helm-files" "\
Run Delete file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-complete-fn-at-point "site-lisp/helm/helm-files" "\
Run complete file name action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-switch-to-eshell "site-lisp/helm/helm-files" "\
Run switch to eshell action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-switch-other-window "site-lisp/helm/helm-files" "\
Run switch to other window action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-switch-other-frame "site-lisp/helm/helm-files" "\
Run switch to other frame action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-open-file-externally "site-lisp/helm/helm-files" "\
Run open file externally command action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-locate "site-lisp/helm/helm-files" "\
Run locate action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-gnus-attach-files "site-lisp/helm/helm-files" "\
Run gnus attach files command action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-etags "site-lisp/helm/helm-files" "\
Run Etags command action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-print-file "site-lisp/helm/helm-files" "\
Run Print file action from `helm-c-source-find-files'.

\(fn)" t nil)

(autoload 'helm-ff-run-toggle-basename "site-lisp/helm/helm-files" "\


\(fn)" t nil)

(autoload 'helm-find-files-down-one-level "site-lisp/helm/helm-files" "\
Go down one level like unix command `cd ..'.
If prefix numeric arg is given go ARG level down.

\(fn ARG)" t nil)

(autoload 'helm-ff-properties-persistent "site-lisp/helm/helm-files" "\
Show properties without quitting helm.

\(fn)" t nil)

(autoload 'helm-ff-persistent-delete "site-lisp/helm/helm-files" "\
Delete current candidate without quitting.

\(fn)" t nil)

(autoload 'helm-ff-run-kill-buffer-persistent "site-lisp/helm/helm-files" "\
Execute `helm-ff-kill-buffer-fname' whitout quitting.

\(fn)" t nil)

(autoload 'helm-ff-rotate-left-persistent "site-lisp/helm/helm-files" "\
Rotate image left without quitting helm.

\(fn)" t nil)

(autoload 'helm-ff-rotate-right-persistent "site-lisp/helm/helm-files" "\
Rotate image right without quitting helm.

\(fn)" t nil)

(defvar helm-dired-mode "Enable helm completion in Dired functions.\nBindings affected are C, R, S, H.\nThis is deprecated for Emacs24+ users, use `helm-mode' instead." "\
Non-nil if Helm-Dired mode is enabled.
See the command `helm-dired-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-dired-mode'.")

(custom-autoload 'helm-dired-mode "site-lisp/helm/helm-files" nil)

(autoload 'helm-dired-mode "site-lisp/helm/helm-files" "\
Toggle Helm-Dired mode on or off.
With a prefix argument ARG, enable Helm-Dired mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
the mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.
\\{helm-dired-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'helm-c-copy-files-async "site-lisp/helm/helm-files" "\
Preconfigured helm to copy file list FLIST to DEST asynchronously.

\(fn)" t nil)

(autoload 'helm-find-files "site-lisp/helm/helm-files" "\
Preconfigured `helm' for helm implementation of `find-file'.
Called with a prefix arg show history if some.
Don't call it from programs, use `helm-find-files-1' instead.
This is the starting point for nearly all actions you can do on files.

\(fn ARG)" t nil)

(autoload 'helm-write-file "site-lisp/helm/helm-files" "\
Preconfigured `helm' providing completion for `write-file'.

\(fn)" t nil)

(autoload 'helm-insert-file "site-lisp/helm/helm-files" "\
Preconfigured `helm' providing completion for `insert-file'.

\(fn)" t nil)

(autoload 'helm-dired-rename-file "site-lisp/helm/helm-files" "\
Preconfigured `helm' to rename files from dired.

\(fn)" t nil)

(autoload 'helm-dired-copy-file "site-lisp/helm/helm-files" "\
Preconfigured `helm' to copy files from dired.

\(fn)" t nil)

(autoload 'helm-dired-symlink-file "site-lisp/helm/helm-files" "\
Preconfigured `helm' to symlink files from dired.

\(fn)" t nil)

(autoload 'helm-dired-hardlink-file "site-lisp/helm/helm-files" "\
Preconfigured `helm' to hardlink files from dired.

\(fn)" t nil)

(autoload 'helm-for-files "site-lisp/helm/helm-files" "\
Preconfigured `helm' for opening files.
Run all sources defined in `helm-for-files-prefered-list'.

\(fn)" t nil)

(autoload 'helm-recentf "site-lisp/helm/helm-files" "\
Preconfigured `helm' for `recentf'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-firefox-bookmarks) "site-lisp/helm/helm-firefox"
;;;;;;  "site-lisp/helm/helm-firefox.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-firefox.el

(autoload 'helm-firefox-bookmarks "site-lisp/helm/helm-firefox" "\
Preconfigured `helm' for firefox bookmark.
You will have to enable html bookmarks in firefox:
open about:config in firefox and double click on this line to enable value to true:

user_pref(\"browser.bookmarks.autoExportHTML\", false);

You should have now:

user_pref(\"browser.bookmarks.autoExportHTML\", true);

After closing firefox, you will be able to browse you bookmarks.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-ucs helm-select-xfont) "site-lisp/helm/helm-font"
;;;;;;  "site-lisp/helm/helm-font.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-font.el

(autoload 'helm-select-xfont "site-lisp/helm/helm-font" "\
Preconfigured `helm' to select Xfont.

\(fn)" t nil)

(autoload 'helm-ucs "site-lisp/helm/helm-font" "\
Preconfigured helm for `ucs-names' math symbols.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-gentoo) "site-lisp/helm/helm-gentoo" "site-lisp/helm/helm-gentoo.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-gentoo.el

(autoload 'helm-gentoo "site-lisp/helm/helm-gentoo" "\
Preconfigured `helm' for gentoo linux.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-do-pdfgrep helm-do-zgrep helm-do-grep helm-c-grep-run-save-buffer
;;;;;;  helm-c-grep-run-other-window-action helm-c-grep-run-default-action
;;;;;;  helm-c-grep-run-persistent-action helm-c-goto-next-file helm-c-goto-precedent-file
;;;;;;  helm-grep-mode-jump-other-window helm-grep-mode-jump-other-window-backward
;;;;;;  helm-grep-mode-jump-other-window-forward helm-grep-mode-jump
;;;;;;  helm-grep-mode-quit helm-gm-precedent-file helm-gm-next-file
;;;;;;  helm-grep-mode) "site-lisp/helm/helm-grep" "site-lisp/helm/helm-grep.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-grep.el

(autoload 'helm-grep-mode "site-lisp/helm/helm-grep" "\
Major mode to provide actions in helm grep saved buffer.

Special commands:
\\{helm-grep-mode-map}

\(fn)" t nil)

(autoload 'helm-gm-next-file "site-lisp/helm/helm-grep" "\


\(fn)" t nil)

(autoload 'helm-gm-precedent-file "site-lisp/helm/helm-grep" "\


\(fn)" t nil)

(autoload 'helm-grep-mode-quit "site-lisp/helm/helm-grep" "\


\(fn)" t nil)

(autoload 'helm-grep-mode-jump "site-lisp/helm/helm-grep" "\


\(fn)" t nil)

(autoload 'helm-grep-mode-jump-other-window-forward "site-lisp/helm/helm-grep" "\


\(fn)" t nil)

(autoload 'helm-grep-mode-jump-other-window-backward "site-lisp/helm/helm-grep" "\


\(fn)" t nil)

(autoload 'helm-grep-mode-jump-other-window "site-lisp/helm/helm-grep" "\


\(fn)" t nil)

(autoload 'helm-c-goto-precedent-file "site-lisp/helm/helm-grep" "\
Go to precedent file in helm grep/etags buffers.

\(fn)" t nil)

(autoload 'helm-c-goto-next-file "site-lisp/helm/helm-grep" "\
Go to precedent file in helm grep/etags buffers.

\(fn)" t nil)

(autoload 'helm-c-grep-run-persistent-action "site-lisp/helm/helm-grep" "\
Run grep persistent action from `helm-do-grep-1'.

\(fn)" t nil)

(autoload 'helm-c-grep-run-default-action "site-lisp/helm/helm-grep" "\
Run grep default action from `helm-do-grep-1'.

\(fn)" t nil)

(autoload 'helm-c-grep-run-other-window-action "site-lisp/helm/helm-grep" "\
Run grep goto other window action from `helm-do-grep-1'.

\(fn)" t nil)

(autoload 'helm-c-grep-run-save-buffer "site-lisp/helm/helm-grep" "\
Run grep save results action from `helm-do-grep-1'.

\(fn)" t nil)

(autoload 'helm-do-grep "site-lisp/helm/helm-grep" "\
Preconfigured helm for grep.
Contrarily to Emacs `grep' no default directory is given, but
the full path of candidates in ONLY.
That allow to grep different files not only in `default-directory' but anywhere
by marking them (C-<SPACE>). If one or more directory is selected
grep will search in all files of these directories.
You can use also wildcard in the base name of candidate.
If a prefix arg is given use the -r option of grep.
The prefix arg can be passed before or after start.
See also `helm-do-grep-1'.

\(fn)" t nil)

(autoload 'helm-do-zgrep "site-lisp/helm/helm-grep" "\
Preconfigured helm for zgrep.

\(fn)" t nil)

(autoload 'helm-do-pdfgrep "site-lisp/helm/helm-grep" "\
Preconfigured helm for pdfgrep.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-describe-helm-attribute helm-buffers-ido-virtual-help
;;;;;;  helm-esh-help helm-c-bookmark-help helm-c-ucs-help helm-etags-help
;;;;;;  helm-pdfgrep-help helm-grep-help helm-generic-file-help helm-read-file-name-help
;;;;;;  helm-ff-help helm-c-buffer-help helm-help) "site-lisp/helm/helm-help"
;;;;;;  "site-lisp/helm/helm-help.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-help.el

(defvar helm-mode-line-string "\\<helm-map>\\[helm-help]:Help \\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
Help string displayed in mode-line in `helm'.
It can be a string or a list of two args, in this case,
first arg is a string that will be used as name for candidates number,
second arg any string to display in mode line.
If nil, use default `mode-line-format'.")

(autoload 'helm-help "site-lisp/helm/helm-help" "\
Help of `helm'.

\(fn)" t nil)

(autoload 'helm-c-buffer-help "site-lisp/helm/helm-help" "\
Help command for helm buffers.

\(fn)" t nil)

(autoload 'helm-ff-help "site-lisp/helm/helm-help" "\
Help command for `helm-find-files'.

\(fn)" t nil)

(autoload 'helm-read-file-name-help "site-lisp/helm/helm-help" "\


\(fn)" t nil)

(autoload 'helm-generic-file-help "site-lisp/helm/helm-help" "\


\(fn)" t nil)

(autoload 'helm-grep-help "site-lisp/helm/helm-help" "\


\(fn)" t nil)

(autoload 'helm-pdfgrep-help "site-lisp/helm/helm-help" "\


\(fn)" t nil)

(autoload 'helm-etags-help "site-lisp/helm/helm-help" "\
The help function for etags.

\(fn)" t nil)

(autoload 'helm-c-ucs-help "site-lisp/helm/helm-help" "\
Help command for `helm-ucs'.

\(fn)" t nil)

(autoload 'helm-c-bookmark-help "site-lisp/helm/helm-help" "\
Help command for bookmarks.

\(fn)" t nil)

(autoload 'helm-esh-help "site-lisp/helm/helm-help" "\
Help command for `helm-find-files-eshell-command-on-file'.

\(fn)" t nil)

(autoload 'helm-buffers-ido-virtual-help "site-lisp/helm/helm-help" "\
Help command for ido virtual buffers.

\(fn)" t nil)

(defvar helm-buffer-mode-line-string '("Buffer(s)" "\\<helm-c-buffer-map>\\[helm-c-buffer-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "String displayed in mode-line in `helm-c-source-buffers-list'"))

(defvar helm-buffers-ido-virtual-mode-line-string '("Killed Buffer(s)" "\\<helm-buffers-ido-virtual-map>\\[helm-buffers-ido-virtual-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "String displayed in mode-line in `helm-c-source-buffers-list'"))

(defvar helm-ff-mode-line-string "\\<helm-find-files-map>\\[helm-ff-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
String displayed in mode-line in `helm-c-source-find-files'")

(defvar helm-read-file-name-mode-line-string "\\<helm-c-read-file-map>\\[helm-read-file-name-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
String displayed in mode-line in `helm-c-source-find-files'")

(defvar helm-generic-file-mode-line-string "\\<helm-generic-files-map>\\[helm-generic-file-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
String displayed in mode-line in Locate.")

(defvar helm-grep-mode-line-string "\\<helm-c-grep-map>\\[helm-grep-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
String displayed in mode-line in `helm-do-grep'.")

(defvar helm-pdfgrep-mode-line-string "\\<helm-c-pdfgrep-map>\\[helm-pdfgrep-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
String displayed in mode-line in `helm-do-pdfgrep'.")

(defvar helm-etags-mode-line-string "\\<helm-c-etags-map>\\[helm-etags-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
String displayed in mode-line in `helm-c-etags-select'.")

(defvar helm-c-ucs-mode-line-string "\\<helm-c-ucs-map>\\[helm-c-ucs-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct" "\
String displayed in mode-line in `helm-ucs'.")

(defvar helm-bookmark-mode-line-string '("Bookmark(s)" "\\<helm-c-bookmark-map>\\[helm-c-bookmark-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct") "\
String displayed in mode-line in `helm-c-source-buffers-list'")

(defvar helm-occur-mode-line "\\<helm-map>\\[helm-help]:Help \\<helm-occur-map>\\[helm-occur-run-query-replace-regexp]:Query replace regexp \\<helm-map>\\[helm-select-action]:Act \\[helm-exit-minibuffer]/\\[helm-select-2nd-action-or-end-of-line]/\\[helm-select-3rd-action]:NthAct")

(autoload 'helm-describe-helm-attribute "site-lisp/helm/helm-help" "\
Display the full documentation of HELM-ATTRIBUTE.
HELM-ATTRIBUTE should be a symbol.

\(fn HELM-ATTRIBUTE)" t nil)

;;;***

;;;### (autoloads (helm-imenu) "site-lisp/helm/helm-imenu" "site-lisp/helm/helm-imenu.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-imenu.el

(autoload 'helm-imenu "site-lisp/helm/helm-imenu" "\
Preconfigured `helm' for `imenu'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-info-at-point) "site-lisp/helm/helm-info"
;;;;;;  "site-lisp/helm/helm-info.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-info.el

(autoload 'helm-info-at-point "site-lisp/helm/helm-info" "\
Preconfigured `helm' for searching info at point.
With a prefix-arg insert symbol at point.

\(fn ARG)" t nil)

;;;***

;;;### (autoloads (helm-locate) "site-lisp/helm/helm-locate" "site-lisp/helm/helm-locate.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-locate.el

(autoload 'helm-locate "site-lisp/helm/helm-locate" "\
Preconfigured `helm' for Locate.
Note: you can add locate options after entering pattern.
See 'man locate' for valid options.

You can specify a specific database with prefix argument ARG (C-u).
Many databases can be used: navigate and mark them.
See also `helm-locate-with-db'.

To create a user specific db, use
\"updatedb -l 0 -o db_path -U directory\".
Where db_path is a filename matched by
`helm-locate-db-file-regexp'.

\(fn ARG)" t nil)

;;;***

;;;### (autoloads (helm-man-woman) "site-lisp/helm/helm-man" "site-lisp/helm/helm-man.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-man.el

(autoload 'helm-man-woman "site-lisp/helm/helm-man" "\
Preconfigured `helm' for Man and Woman pages.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-match-plugin-mode) "site-lisp/helm/helm-match-plugin"
;;;;;;  "site-lisp/helm/helm-match-plugin.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-match-plugin.el

(defvar helm-match-plugin-mode nil "\
Non-nil if Helm-Match-Plugin mode is enabled.
See the command `helm-match-plugin-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-match-plugin-mode'.")

(custom-autoload 'helm-match-plugin-mode "site-lisp/helm/helm-match-plugin" nil)

(autoload 'helm-match-plugin-mode "site-lisp/helm/helm-match-plugin" "\
Add more flexible regexp matching for helm.
See `helm-mp-matching-method' for the behavior of each method.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (helm-minibuffer-history helm-mini helm-stumpwm-commands
;;;;;;  helm-ratpoison-commands helm-eev-anchors helm-c-insert-latex-math
;;;;;;  helm-world-time) "site-lisp/helm/helm-misc" "site-lisp/helm/helm-misc.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-misc.el

(autoload 'helm-world-time "site-lisp/helm/helm-misc" "\
Preconfigured `helm' to show world time.

\(fn)" t nil)

(autoload 'helm-c-insert-latex-math "site-lisp/helm/helm-misc" "\
Preconfigured helm for latex math symbols completion.

\(fn)" t nil)

(autoload 'helm-eev-anchors "site-lisp/helm/helm-misc" "\
Preconfigured `helm' for eev anchors.

\(fn)" t nil)

(autoload 'helm-ratpoison-commands "site-lisp/helm/helm-misc" "\
Preconfigured `helm' to execute ratpoison commands.

\(fn)" t nil)

(autoload 'helm-stumpwm-commands "site-lisp/helm/helm-misc" "\


\(fn)" t nil)

(autoload 'helm-mini "site-lisp/helm/helm-misc" "\
Preconfigured `helm' lightweight version (buffer -> recentf).

\(fn)" t nil)

(autoload 'helm-minibuffer-history "site-lisp/helm/helm-misc" "\
Preconfigured `helm' for `minibuffer-history'.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-mode helm-comp-read) "site-lisp/helm/helm-mode"
;;;;;;  "site-lisp/helm/helm-mode.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-mode.el

(autoload 'helm-comp-read "site-lisp/helm/helm-mode" "\
Read a string in the minibuffer, with helm completion.

It is helm `completing-read' equivalent.

- PROMPT is the prompt name to use.

- COLLECTION can be a list, vector, obarray or hash-table.
  It can be also a function that receives three arguments:
  the values string, predicate and t. See `all-completions' for more details.

Keys description:

- TEST: A predicate called with one arg i.e candidate.

- INITIAL-INPUT: Same as input arg in `helm'.

- PRESELECT: See preselect arg of `helm'.

- DEFAULT: This option is used only for compatibility with regular
  Emacs `completing-read'.

- BUFFER: Name of helm-buffer.

- MUST-MATCH: Candidate selected must be one of COLLECTION.

- REQUIRES-PATTERN: Same as helm attribute, default is 0.

- HISTORY: A list containing specific history, default is nil.
  When it is non--nil, all elements of HISTORY are displayed in
  a special source before COLLECTION.

- INPUT-HISTORY: A symbol. the minibuffer input history will be
  stored there, if nil or not provided, `minibuffer-history'
  will be used instead.

- PERSISTENT-ACTION: A function called with one arg i.e candidate.

- PERSISTENT-HELP: A string to document PERSISTENT-ACTION.

- MODE-LINE: A string or list to display in mode line.
  (See `helm-mode-line-string')

- KEYMAP: A keymap to use in this `helm-comp-read'.
  (The keymap will be shared with history source)

- NAME: The name related to this local source.

- EXEC-WHEN-ONLY-ONE: Bound `helm-execute-action-at-once-if-one'
  to non--nil. (possibles values are t or nil).

- VOLATILE: Use volatile attribute (enabled by default).

- SORT: A predicate to give to `sort' e.g `string-lessp'.

- FC-TRANSFORMER: A `filtered-candidate-transformer' function.

- MARKED-CANDIDATES: If non--nil return candidate or marked candidates as a list.

- ALISTP: (default is non--nil) See `helm-comp-read-get-candidates'.

- CANDIDATES-IN-BUFFER: when non--nil use a source build with
  `helm-candidates-in-buffer' which is much faster.
  Argument VOLATILE have no effect when CANDIDATES-IN-BUFFER is non--nil.

Any prefix args passed during `helm-comp-read' invocation will be recorded
in `helm-current-prefix-arg', otherwise if prefix args were given before
`helm-comp-read' invocation, the value of `current-prefix-arg' will be used.
That's mean you can pass prefix args before or after calling a command
that use `helm-comp-read' See `helm-M-x' for example.

\(fn PROMPT COLLECTION &key TEST INITIAL-INPUT DEFAULT PRESELECT (buffer \"*Helm Completions*\") MUST-MATCH (requires-pattern 0) (history nil) INPUT-HISTORY (persistent-action nil) (persistent-help \"DoNothing\") (mode-line helm-mode-line-string) (keymap helm-map) (name \"Helm Completions\") CANDIDATES-IN-BUFFER EXEC-WHEN-ONLY-ONE (volatile t) SORT (fc-transformer (quote helm-cr-default-transformer)) (marked-candidates nil) (alistp t))" nil nil)

(defvar helm-mode nil "\
Non-nil if Helm mode is enabled.
See the command `helm-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-mode'.")

(custom-autoload 'helm-mode "site-lisp/helm/helm-mode" nil)

(autoload 'helm-mode "site-lisp/helm/helm-mode" "\
Toggle generic helm completion.

All functions in Emacs that use `completing-read'
or `read-file-name' and friends will use helm interface
when this mode is turned on.
However you can modify this behavior for functions of your choice
with `helm-completing-read-handlers-alist'.

Called with a positive arg, turn on unconditionally, with a
negative arg turn off.
You can turn it on with `helm-mode'.

Some crap emacs functions may not be supported,
e.g `ffap-alternate-file' and maybe others
You can add such functions to `helm-completing-read-handlers-alist'
with a nil value.

Note: This mode will work only partially on Emacs23.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (helm-yahoo-suggest helm-google-suggest helm-surfraw)
;;;;;;  "site-lisp/helm/helm-net" "site-lisp/helm/helm-net.el" (20488
;;;;;;  45764))
;;; Generated autoloads from site-lisp/helm/helm-net.el

(autoload 'helm-surfraw "site-lisp/helm/helm-net" "\
Preconfigured `helm' to search PATTERN with search ENGINE.

\(fn PATTERN ENGINE)" t nil)

(autoload 'helm-google-suggest "site-lisp/helm/helm-net" "\
Preconfigured `helm' for google search with google suggest.

\(fn)" t nil)

(autoload 'helm-yahoo-suggest "site-lisp/helm/helm-net" "\
Preconfigured `helm' for Yahoo searching with Yahoo suggest.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-org-headlines helm-org-keywords) "site-lisp/helm/helm-org"
;;;;;;  "site-lisp/helm/helm-org.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-org.el

(autoload 'helm-org-keywords "site-lisp/helm/helm-org" "\
Preconfigured `helm' for org keywords.

\(fn)" t nil)

(autoload 'helm-org-headlines "site-lisp/helm/helm-org" "\
Preconfigured helm to show org headlines.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-browse-code helm-occur helm-regexp) "site-lisp/helm/helm-regexp"
;;;;;;  "site-lisp/helm/helm-regexp.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-regexp.el

(autoload 'helm-regexp "site-lisp/helm/helm-regexp" "\
Preconfigured helm to build regexps.
`query-replace-regexp' can be run from there against found regexp.

\(fn)" t nil)

(autoload 'helm-occur "site-lisp/helm/helm-regexp" "\
Preconfigured Helm for Occur source.
If region is active, search only in region,
otherwise search in whole buffer.

\(fn)" t nil)

(autoload 'helm-browse-code "site-lisp/helm/helm-regexp" "\
Preconfigured helm to browse code.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-show-kill-ring helm-register helm-all-mark-rings
;;;;;;  helm-global-mark-ring helm-mark-ring) "site-lisp/helm/helm-ring"
;;;;;;  "site-lisp/helm/helm-ring.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-ring.el

(autoload 'helm-mark-ring "site-lisp/helm/helm-ring" "\
Preconfigured `helm' for `helm-c-source-mark-ring'.

\(fn)" t nil)

(autoload 'helm-global-mark-ring "site-lisp/helm/helm-ring" "\
Preconfigured `helm' for `helm-c-source-global-mark-ring'.

\(fn)" t nil)

(autoload 'helm-all-mark-rings "site-lisp/helm/helm-ring" "\
Preconfigured `helm' for `helm-c-source-global-mark-ring' and `helm-c-source-mark-ring'.

\(fn)" t nil)

(autoload 'helm-register "site-lisp/helm/helm-ring" "\
Preconfigured `helm' for Emacs registers.

\(fn)" t nil)

(autoload 'helm-show-kill-ring "site-lisp/helm/helm-ring" "\
Preconfigured `helm' for `kill-ring'.
It is drop-in replacement of `yank-pop'.

First call open the kill-ring browser, next calls move to next line.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-semantic-or-imenu helm-semantic) "site-lisp/helm/helm-semantic"
;;;;;;  "site-lisp/helm/helm-semantic.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-semantic.el

(autoload 'helm-semantic "site-lisp/helm/helm-semantic" "\
Preconfigured `helm' for `semantic'.

\(fn)" t nil)

(autoload 'helm-semantic-or-imenu "site-lisp/helm/helm-semantic" "\
Run `helm' with `semantic' or `imenu'.

If `semantic-mode' is active in the current buffer, then use
semantic for generating tags, otherwise fall back to `imenu'.
Fill in the symbol at point by default.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-xrandr-set helm-list-emacs-process helm-top)
;;;;;;  "site-lisp/helm/helm-sys" "site-lisp/helm/helm-sys.el" (20488
;;;;;;  45764))
;;; Generated autoloads from site-lisp/helm/helm-sys.el

(autoload 'helm-top "site-lisp/helm/helm-sys" "\
Preconfigured `helm' for top command.

\(fn)" t nil)

(autoload 'helm-list-emacs-process "site-lisp/helm/helm-sys" "\
Preconfigured `helm' for emacs process.

\(fn)" t nil)

(autoload 'helm-xrandr-set "site-lisp/helm/helm-sys" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (helm-c-etags-select) "site-lisp/helm/helm-tags"
;;;;;;  "site-lisp/helm/helm-tags.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-tags.el

(autoload 'helm-c-etags-select "site-lisp/helm/helm-tags" "\
Preconfigured helm for etags.
Called with one prefix arg use symbol at point as initial input.
Called with two prefix arg reinitialize cache.
If tag file have been modified reinitialize cache.

\(fn ARG)" t nil)

;;;***

;;;### (autoloads (helm-yank-text-at-point helm-w32-shell-execute-open-file
;;;;;;  helm-quit-and-find-file helm-show-all-in-this-source-only)
;;;;;;  "site-lisp/helm/helm-utils" "site-lisp/helm/helm-utils.el"
;;;;;;  (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-utils.el

(autoload 'helm-show-all-in-this-source-only "site-lisp/helm/helm-utils" "\
Show only current source of this helm session with all its candidates.
With a numeric prefix arg show only the ARG number of candidates.

\(fn ARG)" t nil)

(autoload 'helm-quit-and-find-file "site-lisp/helm/helm-utils" "\
Drop into `helm-find-files' from `helm'.
If current selection is a buffer or a file, `helm-find-files'
from its directory.

\(fn)" t nil)

(autoload 'helm-w32-shell-execute-open-file "site-lisp/helm/helm-utils" "\


\(fn FILE)" t nil)

(autoload 'helm-yank-text-at-point "site-lisp/helm/helm-utils" "\
Yank text at point in minibuffer.

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-w3m-bookmarks) "site-lisp/helm/helm-w3m"
;;;;;;  "site-lisp/helm/helm-w3m.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-w3m.el

(autoload 'helm-w3m-bookmarks "site-lisp/helm/helm-w3m" "\
Preconfigured `helm' for w3m bookmark.

Needs w3m and emacs-w3m.

http://w3m.sourceforge.net/
http://emacs-w3m.namazu.org/

\(fn)" t nil)

;;;***

;;;### (autoloads (helm-yaoddmuse-emacswiki-post-library helm-yaoddmuse-emacswiki-edit-or-view
;;;;;;  helm-yaoddmuse-cache-pages) "site-lisp/helm/helm-yaoddmuse"
;;;;;;  "site-lisp/helm/helm-yaoddmuse.el" (20488 45764))
;;; Generated autoloads from site-lisp/helm/helm-yaoddmuse.el

(autoload 'helm-yaoddmuse-cache-pages "site-lisp/helm/helm-yaoddmuse" "\
Fetch the list of files on emacswiki and create cache file.
If load is non--nil load the file and feed `yaoddmuse-pages-hash'.

\(fn &optional LOAD)" t nil)

(autoload 'helm-yaoddmuse-emacswiki-edit-or-view "site-lisp/helm/helm-yaoddmuse" "\
Preconfigured `helm' to edit or view EmacsWiki page.

Needs yaoddmuse.el.

http://www.emacswiki.org/emacs/download/yaoddmuse.el

\(fn)" t nil)

(autoload 'helm-yaoddmuse-emacswiki-post-library "site-lisp/helm/helm-yaoddmuse" "\
Preconfigured `helm' to post library to EmacsWiki.

Needs yaoddmuse.el.

http://www.emacswiki.org/emacs/download/yaoddmuse.el

\(fn)" t nil)

;;;***

;;;### (autoloads (hide-region-unhide hide-region-hide) "site-lisp/hide-region"
;;;;;;  "site-lisp/hide-region.el" (20488 45440))
;;; Generated autoloads from site-lisp/hide-region.el

(autoload 'hide-region-hide "site-lisp/hide-region" "\
Hides a region by making an invisible overlay over it and save the
overlay on the hide-region-overlays \"ring\"

\(fn)" t nil)

(autoload 'hide-region-unhide "site-lisp/hide-region" "\
Unhide a region at a time, starting with the last one hidden and
deleting the overlay from the hide-region-overlays \"ring\".

\(fn)" t nil)

;;;***

;;;### (autoloads (highlight-parentheses-mode) "site-lisp/highlight-parentheses"
;;;;;;  "site-lisp/highlight-parentheses.el" (20488 45440))
;;; Generated autoloads from site-lisp/highlight-parentheses.el

(autoload 'highlight-parentheses-mode "site-lisp/highlight-parentheses" "\
Minor mode to highlight the surrounding parentheses.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (hl-line-flash hl-line-when-idle-interval hl-line-toggle-when-idle
;;;;;;  hl-line-overlay-priority hl-line-inhibit-highlighting-for-modes
;;;;;;  hl-line-flash-show-period) "site-lisp/hl-line+" "site-lisp/hl-line+.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/hl-line+.el

(defface hl-line '((t (:background "SlateGray3"))) "\
*Face to use for `hl-line-face'." :group (quote hl-line))

(defvar hl-line-flash-show-period 1 "\
*Number of seconds for `hl-line-flash' to highlight the line.")

(custom-autoload 'hl-line-flash-show-period "site-lisp/hl-line+" t)

(defvar hl-line-inhibit-highlighting-for-modes nil "\
*Modes where highlighting is inhibited for `hl-line-highlight-now'.
A list of `major-mode' values (symbols).")

(custom-autoload 'hl-line-inhibit-highlighting-for-modes "site-lisp/hl-line+" t)

(defvar hl-line-overlay-priority 300 "\
*Priority to use for `hl-line-overlay' and `global-hl-line-overlay'.
A higher priority can make the hl-line highlighting appear on top of
other overlays that might exist.")

(custom-autoload 'hl-line-overlay-priority "site-lisp/hl-line+" t)

(defalias 'toggle-hl-line-when-idle 'hl-line-toggle-when-idle)

(autoload 'hl-line-toggle-when-idle "site-lisp/hl-line+" "\
Turn on or off using `global-hl-line-mode' when Emacs is idle.
When on, use `global-hl-line-mode' whenever Emacs is idle.
With prefix argument, turn on if ARG > 0; else turn off.

\(fn &optional ARG)" t nil)

(autoload 'hl-line-when-idle-interval "site-lisp/hl-line+" "\
Set wait until using `global-hl-line-mode' when Emacs is idle.
Whenever Emacs is idle for this many seconds, `global-hl-line-mode'
will be turned on.

To turn on or off using `global-hl-line-mode' when idle,
use `\\[toggle-hl-line-when-idle].

\(fn SECS)" t nil)

(defalias 'flash-line-highlight 'hl-line-flash)

(autoload 'hl-line-flash "site-lisp/hl-line+" "\
Highlight the current line for `hl-line-flash-show-period' seconds.
With a prefix argument, highlight for that many seconds.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (identica) "site-lisp/identica-mode/identica-mode"
;;;;;;  "site-lisp/identica-mode/identica-mode.el" (20498 59367))
;;; Generated autoloads from site-lisp/identica-mode/identica-mode.el

(autoload 'identica "site-lisp/identica-mode/identica-mode" "\
Start identica-mode.

\(fn)" t nil)

;;;***

;;;### (autoloads (iflipb-previous-buffer iflipb-next-buffer) "site-lisp/iflipb"
;;;;;;  "site-lisp/iflipb.el" (20488 45440))
;;; Generated autoloads from site-lisp/iflipb.el

(autoload 'iflipb-next-buffer "site-lisp/iflipb" "\
Flip to the next buffer in the buffer list. Consecutive
invocations switch to less recent buffers in the buffer list.
Buffers matching iflipb-always-ignore-buffers are always ignored.
Without a prefix argument, buffers matching iflipb-ignore-buffers
are also ignored.

\(fn ARG)" t nil)

(autoload 'iflipb-previous-buffer "site-lisp/iflipb" "\
Flip to the previous buffer in the buffer list. Consecutive
invocations switch to more recent buffers in the buffer list.

\(fn)" t nil)

;;;***

;;;### (autoloads (Info-merge-subnodes Info-goto-emacs-key-command-node
;;;;;;  Info-goto-emacs-command-node Info-subtree-separator Info-display-node-header-fn
;;;;;;  Info-fontify-reference-items-flag Info-fontify-single-quote-flag
;;;;;;  Info-fontify-quotations-flag Info-fit-frame-flag Info-Plus)
;;;;;;  "site-lisp/info+" "site-lisp/info+.el" (20488 45440))
;;; Generated autoloads from site-lisp/info+.el

(let ((loads (get 'Info-Plus 'custom-loads))) (if (member '"site-lisp/info+" loads) nil (put 'Info-Plus 'custom-loads (cons '"site-lisp/info+" loads))))

(defface info-file '((((background dark)) (:foreground "Yellow" :background "DimGray")) (t (:foreground "Blue" :background "LightGray"))) "\
*Face for file heading labels in `info'." :group (quote Info-Plus) :group (quote faces))

(defface info-menu '((((background dark)) (:foreground "Yellow")) (t (:foreground "Blue"))) "\
*Face used for menu items in `info'." :group (quote Info-Plus) :group (quote faces))

(defface info-quoted-name '((((background dark)) (:inherit font-lock-string-face :foreground "#6B6BFFFF2C2C")) (((background light)) (:inherit font-lock-string-face :foreground "DarkViolet")) (t (:foreground "yellow"))) "\
*Face for quoted names (`...') in `info'." :group (quote Info-Plus) :group (quote faces))

(defface info-string '((((background dark)) (:inherit font-lock-string-face :foreground "Orange")) (t (:inherit font-lock-string-face :foreground "red3"))) "\
*Face for strings (\"...\") in `info'." :group (quote Info-Plus) :group (quote faces))

(defface info-single-quote '((((background dark)) (:inherit font-lock-keyword-face :foreground "Green")) (t (:inherit font-lock-keyword-face :foreground "Magenta"))) "\
*Face for isolated single-quote marks (') in `info'." :group (quote Info-Plus) :group (quote faces))

(defface info-title-1 '((((type tty pc) (class color) (background dark)) :foreground "yellow" :weight bold) (((type tty pc) (class color) (background light)) :foreground "brown" :weight bold)) "\
*Face for info titles at level 1." :group (if (facep (quote info-title-1)) (quote info) (quote Info-Plus)))

(defface info-title-2 '((((type tty pc) (class color)) :foreground "lightblue" :weight bold)) "\
*Face for info titles at level 2." :group (if (facep (quote info-title-1)) (quote info) (quote Info-Plus)))

(defface info-title-3 '((((type tty pc) (class color)) :weight bold)) "\
*Face for info titles at level 3." :group (if (facep (quote info-title-1)) (quote info) (quote Info-Plus)))

(defface info-title-4 '((((type tty pc) (class color)) :weight bold)) "\
*Face for info titles at level 4." :group (if (facep (quote info-title-1)) (quote info) (quote Info-Plus)))

(defface info-function-ref-item '((((background dark)) (:foreground "#4D4DDDDDDDDD" :background "DimGray")) (t (:foreground "DarkBlue" :background "LightGray"))) "\
*Face used for \"Function:\" reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defface info-variable-ref-item '((((background dark)) (:foreground "Orange" :background "DimGray")) (t (:foreground "FireBrick" :background "LightGray"))) "\
*Face used for \"Variable:\" reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defface info-special-form-ref-item '((((background dark)) (:foreground "Yellow" :background "DimGray")) (t (:foreground "DarkMagenta" :background "LightGray"))) "\
*Face used for \"Special Form:\" reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defface info-command-ref-item '((((background dark)) (:foreground "#7474FFFF7474" :background "DimGray")) (t (:foreground "Blue" :background "LightGray"))) "\
*Face used for \"Command:\" reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defface info-user-option-ref-item '((((background dark)) (:foreground "Red" :background "DimGray")) (t (:foreground "Red" :background "LightGray"))) "\
*Face used for \"User Option:\" reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defface info-macro-ref-item '((((background dark)) (:foreground "Yellow" :background "DimGray")) (t (:foreground "DarkMagenta" :background "LightGray"))) "\
*Face used for \"Macro:\" reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defface info-syntax-class-item '((((background dark)) (:foreground "#FFFF9B9BFFFF" :background "DimGray")) (t (:foreground "DarkGreen" :background "LightGray"))) "\
*Face used for \"Syntax Class:\" reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defface info-reference-item '((((background dark)) (:background "DimGray")) (t (:background "LightGray"))) "\
*Face used for reference items in `info' manual." :group (quote Info-Plus) :group (quote faces))

(defvar Info-fit-frame-flag t "\
*Non-nil means call `fit-frame' on Info buffer.")

(custom-autoload 'Info-fit-frame-flag "site-lisp/info+" t)

(defvar Info-fontify-quotations-flag t "\
*Non-nil means `info' fontifies text between quotes.
This applies to double-quote strings (\"...\") and text between
single-quotes (`...').

Note: This fontification can never be 100% reliable.  It aims to be
useful in most Info texts, but it can occasionally result in
fontification that you might not expect.  This is not a bug; it is
part of the design to be able to appropriately fontify a great variety
of texts.  Set this flag to nil if you do not find this fontification
useful.")

(custom-autoload 'Info-fontify-quotations-flag "site-lisp/info+" t)

(defvar Info-fontify-single-quote-flag t "\
*Non-nil means `info' fontifies ' when not preceded by `....
A non-nil value has no effect unless `Info-fontify-quotations-flag' is
also non-nil.

Note: This fontification can never be 100% reliable.  It aims to be
useful in most Info texts, but it can occasionally result in
fontification that you might not expect.  This is not a bug; it is
part of the design to be able to appropriately fontify a great variety
of texts.  Set this flag to nil if you do not find this fontification
useful.")

(custom-autoload 'Info-fontify-single-quote-flag "site-lisp/info+" t)

(defvar Info-fontify-reference-items-flag t "\
*Non-nil means `info' fontifies reference items such as \"Function:\".")

(custom-autoload 'Info-fontify-reference-items-flag "site-lisp/info+" t)

(defvar Info-display-node-header-fn 'Info-display-node-default-header "\
*Function to insert header by `Info-merge-subnodes'.")

(custom-autoload 'Info-display-node-header-fn "site-lisp/info+" t)

(defvar Info-subtree-separator "\n* " "\
*A string used to separate Info node descriptions.
Inserted by `Info-merge-subnodes' just before each node title.
Setting this to a string that includes a form-feed (^L), such as
\"\\f\\n* \", will cause a page break before each node description.

Use command `set-variable' to set this, quoting any control characters
you want to include, such as form-feed (^L) and newline (^J), with ^Q.
For example, type `^Q^L^Q^J* ' to set this to \"\\f\\n* \".")

(custom-autoload 'Info-subtree-separator "site-lisp/info+" t)

(autoload 'Info-goto-emacs-command-node "site-lisp/info+" "\
Go to the Info node in the Emacs manual for command COMMAND.
The command is found by looking it up in Emacs manual's indexes,
or in another manual found via COMMAND's `info-file' property or
the variable `Info-file-list-for-emacs'.
COMMAND must be a symbol or string.

\(fn COMMAND)" t nil)

(autoload 'Info-goto-emacs-key-command-node "site-lisp/info+" "\
Go to the node in the Emacs manual describing command bound to KEY.
KEY is a string.

Interactively, if the binding is `execute-extended-command', then a
command is read.

The command is found by looking it up in Emacs manual's indexes,
or in another manual's index found via COMMAND's `info-file' property
or the variable `Info-file-list-for-emacs'.

If key's command cannot be found by looking in indexes, then
`Info-search' is used to search for the key sequence in the info text.

\(fn KEY)" t nil)

(autoload 'Info-merge-subnodes "site-lisp/info+" "\
Integrate current node with nodes referred to in its Menu.

Displays the current Info node, together with the nodes in its Menu.
Buffer `*Info: NODE*' is used for the display, where NODE is the name
of the current node.  The contents of this node's subnodes (the nodes
named in this node's Menu) are included in the buffer, following the
contents of the current node.

Optional arg RECURSIVE-DISPLAY-P (prefix arg if interactive) governs
the way menus of subnodes are treated:

  If nil, nothing additional happens.  Subnode menus are not explored.
  Only the current node and its immediate subnodes are documented, in
  the single display buffer `*Info: NODE*'.

  If non-nil, then the subnodes of a node are treated in the same way
  as the parent node, recursively: If any of them has, itself, a Menu,
  then that menu's subnodes are also explored, and so on.

    If RECURSIVE-DISPLAY-P is zero, then a single display buffer is
    used for all of the nodes explored.  Otherwise, a separate display
    buffer is used for each subnode that has a Menu (see next).

      Use this when you want a single, flat compilation of the current
      node and all of its subnodes.  It is less appropriate when the
      current node has several levels of subnodes: The flattened
      result can be difficult to read.

    If RECURSIVE-DISPLAY-P is positive, then the contents of each
    subnode are displayed twice: once in the parent node's display,
    and once in the subnode's own display.

      Use this when the current node has several levels of subnodes
      and you want each display buffer to be self-contained.

    If RECURSIVE-DISPLAY-P is negative, then there is no redundancy: A
    subnode's contents are only displayed in its parent's buffer.  The
    subnode's own display buffer only contains the contents of its own
    subnodes.

      Use this when the current node has several levels of subnodes
      and you want no redundancy between the display buffers.

The user option (variable) `Info-subtree-separator' is a string to be
inserted by `Info-merge-subnodes' just before the title of each
node (preceding its description).  By default it is \"\\n* \", producing
a node title resembling a menu item.  Setting this to \"\\f\\n* \" will
cause a page break before each node description.  For more on setting
this variable, type \\<Info-mode-map>`\\[describe-variable] Info-subtree-separator'.

------

Optional second arg RECURSIVE-CALL-P is only for internal use.  It is
used to indicate whether (non-nil) or not (nil) this is a recursive
\(i.e. not a top-level) call to `Info-merge-subnodes'.  Non-nil
means that this is a subnode, and that its contents should only be
included in the present display if RECURSIVE-DISPLAY-P is also
non-nil.  For proper operation when RECURSIVE-DISPLAY-P is zero, the
non-nil value of RECURSIVE-CALL-P should be the node name of the
top-level call to `Info-merge-subnodes'.

\(fn &optional RECURSIVE-DISPLAY-P RECURSIVE-CALL-P)" t nil)

;;;***

;;;### (autoloads (info-lookmore-coreutils-index info-lookmore-makefile-derivatives
;;;;;;  info-lookmore-c++-use-c info-lookmore-c-gsl info-lookmore-c-readline
;;;;;;  info-lookmore-c-gcc info-lookmore-apropos-elisp info-lookmore-elisp-gnus
;;;;;;  info-lookmore-elisp-cl info-lookmore-elisp-userlast info-lookmore-add-other-mode
;;;;;;  info-lookmore-add-doc) "site-lisp/info-lookmore/info-lookmore"
;;;;;;  "site-lisp/info-lookmore/info-lookmore.el" (20488 45769))
;;; Generated autoloads from site-lisp/info-lookmore/info-lookmore.el

(autoload 'info-lookmore-add-doc "site-lisp/info-lookmore/info-lookmore" "\
Add DOC-SPEC to an existing `info-lookup-alist' entry.
DOC-SPEC should be (INFO-NODE TRANS-FUNC PREFIX SUFFIX) as
described by `info-lookup-alist'.

If DOC-SPEC is not already present then it's added before
existing docs, or if APPEND is non-nil then after.

\(fn TOPIC MODE DOC-SPEC &optional APPEND)" nil nil)

(autoload 'info-lookmore-add-other-mode "site-lisp/info-lookmore/info-lookmore" "\
Add OTHER-MODE to an `info-lookup-alist' entry.
OTHER-MODE is added if not already present and is added before
existing other-modes, or if APPEND is non-nil then after existing
other-modes.

\(fn TOPIC MODE OTHER-MODE &optional APPEND)" nil nil)

(autoload 'info-lookmore-elisp-userlast "site-lisp/info-lookmore/info-lookmore" "\
Put the Emacs user manual last for `info-lookup-symbol'.
This is good for programming when you'll prefer to look in the
reference manual for a function or variable in both the user and
reference manuals.

See info node `(elisp)Top' for the elisp reference manual and
info node `(emacs)Top' for the user manual.

\(fn)" t nil)

(autoload 'info-lookmore-elisp-cl "site-lisp/info-lookmore/info-lookmore" "\
Add the Emacs CL manual to `emacs-lisp-mode' info-lookup.
CL is appended to the document list, so as to prefer the main
elisp manual for the few functions like `push' which are in both.
But maybe CL should be preferred when using CL, so perhaps this
will change.

See info node `(cl)Top' for the CL manual.

\(fn)" t nil)

(autoload 'info-lookmore-elisp-gnus "site-lisp/info-lookmore/info-lookmore" "\
Add the Gnus and MIME manuals to `emacs-lisp-mode' info-lookup.
See info node `(gnus)Top' for the Gnus manual and info
node `(emacs-mime)Top' for the Emacs MIME manual.

\(fn)" t nil)

(autoload 'info-lookmore-apropos-elisp "site-lisp/info-lookmore/info-lookmore" "\
Set `apropos-mode' info-lookup to follow `emacs-lisp-mode'.
apropos-mode is the function/variable docstring display for
`describe-function' etc.  Symbols etc are usually elisp things
and following `emacs-lisp-mode' lets you look them up.

This function is for use in Emacs 23.1 and earlier.  23.2 and up
has this setup already and this function does nothing there.

\(fn)" nil nil)

(autoload 'info-lookmore-c-gcc "site-lisp/info-lookmore/info-lookmore" "\
Add the GCC manual to `c-mode' info-lookup.
This gives various GCC specifics like __builtin_expect() or
__func__.  It's appended to the doc-list, so the main GNU C
Library is preferred for things appearing in both (which includes
lots of math.h functions).

See info node `(gcc)Top' for the GCC manual, and info
node `(libc)Top' for the GNU C manual.

\(fn)" t nil)

(autoload 'info-lookmore-c-readline "site-lisp/info-lookmore/info-lookmore" "\
Add the readline manuals to `c-mode' info-lookup.
See info node `(readline)Top' for the readline manual, and info
node `(history)Top' for the related history manual, which is also
added.

\(fn)" t nil)

(autoload 'info-lookmore-c-gsl "site-lisp/info-lookmore/info-lookmore" "\
Add the GNU Scientific Library manuals to `c-mode' info-lookup.
See info node `(gsl-ref)Top' for the GSL manual.

\(fn)" t nil)

(autoload 'info-lookmore-c++-use-c "site-lisp/info-lookmore/info-lookmore" "\
Set `c++-mode' info-lookup to follow `c-mode'.
This is good if you write a lot of C-like things in C++, or at
least want to include the C manuals.

`info-lookup-alist' doesn't have a c++-mode entry by default.
This function copies the c-mode regexp and parse rule if nothing
else has already made a c++-mode entry.  Not sure if that comes
out quite right for real C++, but it's fine for mostly-C things.

\(fn)" t nil)

(autoload 'info-lookmore-makefile-derivatives "site-lisp/info-lookmore/info-lookmore" "\
Add info-lookup setups for `makefile-mode' derivatives.
The following modes are setup, if they don't already have setups.

    `makefile-automake-mode'
    `makefile-bsdmake-mode'
    `makefile-gmake-mode'
    `makefile-imake-mode'
    `makefile-makepp-mode'

`makefile-automake-mode' looks in the automake manual then the
make manual.  The others go to `makefile-mode' only.

\(fn)" t nil)

(autoload 'info-lookmore-coreutils-index "site-lisp/info-lookmore/info-lookmore" "\
Add \"(coreutils)Concept Index\" node name.
Past coreutils used node name \"Index\", versions circa 8.1 use
\"Concept Index\".  The latter is added to `sh-mode' setups if
not already present.

This function is for use in Emacs 22.x and 23.1.  Emacs 23.2 has
this setup already and this function does nothing there.  Emacs
21 and XEmacs 21 don't have any `sh-mode' setups and nothing is
done there unless you've added your own (in which case copying
from the latest Emacs is probably best).

\(fn)" t nil)

;;;***

;;;### (autoloads (js2-mode) "site-lisp/js2-mode" "site-lisp/js2-mode.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/js2-mode.el
 (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
 (add-to-list 'auto-mode-alist '("\\.conkerorrc$" . js2-mode))

(autoload 'js2-mode "site-lisp/js2-mode" "\
Major mode for editing JavaScript code.

\(fn)" t nil)

;;;***

;;;### (autoloads (global-linum-mode linum-mode linum-format) "site-lisp/linum"
;;;;;;  "site-lisp/linum.el" (20488 45440))
;;; Generated autoloads from site-lisp/linum.el

(defvar linum-format 'dynamic "\
Format used to display line numbers. Either a format string
like \"%7d\", 'dynamic to adapt the width as needed, or a
function that is called with a line number as its argument and
should evaluate to a string to be shown on that line. See also
`linum-before-numbering-hook'.")

(custom-autoload 'linum-format "site-lisp/linum" t)

(autoload 'linum-mode "site-lisp/linum" "\
Toggle display of line numbers in the left marginal area.

\(fn &optional ARG)" t nil)

(defvar global-linum-mode nil "\
Non-nil if Global-Linum mode is enabled.
See the command `global-linum-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-linum-mode'.")

(custom-autoload 'global-linum-mode "site-lisp/linum" nil)

(autoload 'global-linum-mode "site-lisp/linum" "\
Toggle Linum mode in all buffers.
With prefix ARG, enable Global-Linum mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Linum mode is enabled in all buffers where
`linum-on' would do it.
See `linum-mode' for more information on Linum mode.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (log4j-mode) "site-lisp/log4j-mode" "site-lisp/log4j-mode.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/log4j-mode.el
 (add-to-list 'auto-mode-alist '("\\.log\\'" . log4j-mode))

(autoload 'log4j-mode "site-lisp/log4j-mode" "\
Major mode for viewing log files.
Log4j mode provides syntax highlighting and filtering of log files.
It also provides functionality to find and display the declaration
of a Java identifier found in the log file.

You can customize the faces that are used for syntax highlighting.
Type `M-x customize-group' and enter group name \"log4j-mode\".
You can also customize the regular expressions that are used to find
the beginning and end of multi-line log records. However, in many
cases this will not be necessary.

Commands:
Use `\\<log4j-mode-map>\\[log4j-start-filter]' to start/stop log file filtering in the current buffer.
Enter any number of include and exclude keywords that will be used to
filter the log records. Keywords are separated by spaces.

Use `\\<log4j-mode-map>\\[log4j-browse-source]' to show the declaration of the Java identifier around or
before point. This command is only enabled if package `jtags' is loaded.
For more information about jtags, see http://jtags.sourceforge.net.

Finally, the commands `\\<log4j-mode-map>\\[log4j-forward-record]' and `\\<log4j-mode-map>\\[log4j-backward-record]' move point forward and backward
across log records.

\\{log4j-mode-local-map}

\(fn)" t nil)

;;;***

;;;### (autoloads (lua-mode) "site-lisp/lua-mode/lua-mode" "site-lisp/lua-mode/lua-mode.el"
;;;;;;  (20488 45772))
;;; Generated autoloads from site-lisp/lua-mode/lua-mode.el

(autoload 'lua-mode "site-lisp/lua-mode/lua-mode" "\
Major mode for editing Lua code.
The following keys are bound:
\\{lua-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))

(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

;;;***

;;;### (autoloads (lusty-launch-dired lusty-select-current-name lusty-select-match
;;;;;;  lusty-open-this lusty-highlight-previous-column lusty-highlight-next-column
;;;;;;  lusty-highlight-previous lusty-highlight-next lusty-buffer-explorer
;;;;;;  lusty-file-explorer) "site-lisp/lusty-emacs/lusty-explorer"
;;;;;;  "site-lisp/lusty-emacs/lusty-explorer.el" (20488 45774))
;;; Generated autoloads from site-lisp/lusty-emacs/lusty-explorer.el

(autoload 'lusty-file-explorer "site-lisp/lusty-emacs/lusty-explorer" "\
Launch the file/directory mode of LustyExplorer.

\(fn)" t nil)

(autoload 'lusty-buffer-explorer "site-lisp/lusty-emacs/lusty-explorer" "\
Launch the buffer mode of LustyExplorer.

\(fn)" t nil)

(autoload 'lusty-highlight-next "site-lisp/lusty-emacs/lusty-explorer" "\
Highlight the next match in *Lusty-Matches*.

\(fn)" t nil)

(autoload 'lusty-highlight-previous "site-lisp/lusty-emacs/lusty-explorer" "\
Highlight the previous match in *Lusty-Matches*.

\(fn)" t nil)

(autoload 'lusty-highlight-next-column "site-lisp/lusty-emacs/lusty-explorer" "\
Highlight the next column in *Lusty-Matches*.

\(fn)" t nil)

(autoload 'lusty-highlight-previous-column "site-lisp/lusty-emacs/lusty-explorer" "\
Highlight the previous column in *Lusty-Matches*.

\(fn)" t nil)

(autoload 'lusty-open-this "site-lisp/lusty-emacs/lusty-explorer" "\
Open the given file/directory/buffer, creating it if not already present.

\(fn)" t nil)

(autoload 'lusty-select-match "site-lisp/lusty-emacs/lusty-explorer" "\
Activate the highlighted match in *Lusty-Matches* - recurse if dir, open if file/buffer.

\(fn)" t nil)

(autoload 'lusty-select-current-name "site-lisp/lusty-emacs/lusty-explorer" "\
Open the given file/buffer or create a new buffer with the current name.

\(fn)" t nil)

(autoload 'lusty-launch-dired "site-lisp/lusty-emacs/lusty-explorer" "\
Launch dired at the current directory.

\(fn)" t nil)

;;;***

;;;### (autoloads (macrostep-expand macrostep-mode) "site-lisp/macrostep/macrostep"
;;;;;;  "site-lisp/macrostep/macrostep.el" (20488 45775))
;;; Generated autoloads from site-lisp/macrostep/macrostep.el

(autoload 'macrostep-mode "site-lisp/macrostep/macrostep" "\
Minor mode for inline expansion of macros in Emacs Lisp source buffers.

\\<macrostep-keymap>Progressively expand macro forms with \\[macrostep-expand], collapse them with \\[macrostep-collapse],
and move back and forth with \\[macrostep-next-macro] and \\[macrostep-prev-macro].
Use \\[macrostep-collapse-all] or collapse all visible expansions to
quit and return to normal editing.

\\{macrostep-keymap}

\(fn &optional ARG)" t nil)

(autoload 'macrostep-expand "site-lisp/macrostep/macrostep" "\
Expand the Elisp macro form following point by one step.

Enters `macrostep-mode' if it is not already active, making the
buffer temporarily read-only. If macrostep-mode is active and the
form following point is not a macro form, search forward in the
buffer and expand the next macro form found, if any.

\(fn)" t nil)

;;;***

;;;### (autoloads (magit-status) "site-lisp/magit/magit" "site-lisp/magit/magit.el"
;;;;;;  (20488 45779))
;;; Generated autoloads from site-lisp/magit/magit.el

(autoload 'magit-status "site-lisp/magit/magit" "\
Open a Magit status buffer for the Git repository containing
DIR.  If DIR is not within a Git repository, offer to create a
Git repository in DIR.

Interactively, a prefix argument means to ask the user which Git
repository to use even if `default-directory' is under Git control.
Two prefix arguments means to ignore `magit-repo-dirs' when asking for
user input.

\(fn DIR)" t nil)

;;;***

;;;### (autoloads (magit-blame-mode) "site-lisp/magit/magit-blame"
;;;;;;  "site-lisp/magit/magit-blame.el" (20488 45779))
;;; Generated autoloads from site-lisp/magit/magit-blame.el

(autoload 'magit-blame-mode "site-lisp/magit/magit-blame" "\
Display blame information inline.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (turn-on-magit-stgit magit-stgit-mode) "site-lisp/magit/magit-stgit"
;;;;;;  "site-lisp/magit/magit-stgit.el" (20488 45779))
;;; Generated autoloads from site-lisp/magit/magit-stgit.el

(autoload 'magit-stgit-mode "site-lisp/magit/magit-stgit" "\
StGit support for Magit

\(fn &optional ARG)" t nil)

(autoload 'turn-on-magit-stgit "site-lisp/magit/magit-stgit" "\
Unconditionally turn on `magit-stgit-mode'.

\(fn)" nil nil)

;;;***

;;;### (autoloads (turn-on-magit-svn magit-svn-mode) "site-lisp/magit/magit-svn"
;;;;;;  "site-lisp/magit/magit-svn.el" (20488 45779))
;;; Generated autoloads from site-lisp/magit/magit-svn.el

(autoload 'magit-svn-mode "site-lisp/magit/magit-svn" "\
SVN support for Magit

\(fn &optional ARG)" t nil)

(autoload 'turn-on-magit-svn "site-lisp/magit/magit-svn" "\
Unconditionally turn on `magit-svn-mode'.

\(fn)" nil nil)

;;;***

;;;### (autoloads (turn-on-magit-topgit magit-topgit-mode) "site-lisp/magit/magit-topgit"
;;;;;;  "site-lisp/magit/magit-topgit.el" (20488 45779))
;;; Generated autoloads from site-lisp/magit/magit-topgit.el

(autoload 'magit-topgit-mode "site-lisp/magit/magit-topgit" "\
Topgit support for Magit

\(fn &optional ARG)" t nil)

(autoload 'turn-on-magit-topgit "site-lisp/magit/magit-topgit" "\
Unconditionally turn on `magit-topgit-mode'.

\(fn)" nil nil)

;;;***

;;;### (autoloads (rebase-mode) "site-lisp/magit/rebase-mode" "site-lisp/magit/rebase-mode.el"
;;;;;;  (20488 45779))
;;; Generated autoloads from site-lisp/magit/rebase-mode.el

(autoload 'rebase-mode "site-lisp/magit/rebase-mode" "\
Major mode for editing of a Git rebase file.

Rebase files are generated when you run 'git rebase -i' or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running 'man git-rebase' at the command line) for details.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("git-rebase-todo" . rebase-mode))

;;;***

;;;### (autoloads (markdown-mode) "site-lisp/markdown-mode/markdown-mode"
;;;;;;  "site-lisp/markdown-mode/markdown-mode.el" (20488 45780))
;;; Generated autoloads from site-lisp/markdown-mode/markdown-mode.el

(autoload 'markdown-mode "site-lisp/markdown-mode/markdown-mode" "\
Major mode for editing Markdown files.

\(fn)" t nil)

;;;***

;;;### (autoloads (package-filter package-filter-function package-archive-exclude-alist
;;;;;;  package-archive-enable-alist) "site-lisp/melpa/melpa" "site-lisp/melpa/melpa.el"
;;;;;;  (20488 45783))
;;; Generated autoloads from site-lisp/melpa/melpa.el

(defvar package-archive-enable-alist nil "\
Optional Alist of enabled packages used by `package-filter'.
The format is (ARCHIVE . PACKAGE ...), where ARCHIVE is a string
matching an archive name in `package-archives', PACKAGE is a
symbol of a package in ARCHIVE to enable.

If no ARCHIVE exists in the alist, all packages are enabled.")

(custom-autoload 'package-archive-enable-alist "site-lisp/melpa/melpa" t)

(defvar package-archive-exclude-alist nil "\
Alist of packages excluded by `package-filter'.
The format is (ARCHIVE . PACKAGE ...), where ARCHIVE is a string
matching an archive name in `package-archives', PACKAGE is a
symbol of a package in that archive to exclude.

Any specified package is excluded regardless of the value of
`package-archive-enable-alist'")

(custom-autoload 'package-archive-exclude-alist "site-lisp/melpa/melpa" t)

(defvar package-filter-function 'package-filter "\
Optional predicate function used to internally
filter packages used by package.el.

Return nil to filter a function from the list.

The function is called with the arguments PACKAGE VERSION ARCHIVE, where
PACKAGE is a symbol, VERSION is a vector as produced by `version-to-list', and
ARCHIVE is the string name of the package archive.")

(custom-autoload 'package-filter-function "site-lisp/melpa/melpa" t)

(defadvice package-compute-transaction (before package-compute-transaction-reverse (package-list requirements) activate compile) "\
reverse the requirements" (setq requirements (reverse requirements)) (print requirements))

(defadvice package--add-to-archive-contents (around package-filter-add-to-archive-contents (package archive) activate compile) "\
Add filtering of available packages using `package-filter-function',
if non-nil." (when (and package-filter-function (funcall package-filter-function (car package) (package-desc-vers (cdr package)) archive)) ad-do-it))

(autoload 'package-filter "site-lisp/melpa/melpa" "\
Check package against enabled and excluded list for the `archive'.

Filter packages not in the associated list for `archive' in
`package-archive-enable-alist'.

Filter packages in the associated list for `archive' in
`package-archive-exclude-alist'.

\(fn PACKAGE VERSION ARCHIVE)" nil nil)

;;;***

;;;### (autoloads (memory-usage) "site-lisp/memory-usage" "site-lisp/memory-usage.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/memory-usage.el

(autoload 'memory-usage "site-lisp/memory-usage" "\
List all buffers and their memory usage.

\(fn)" t nil)

;;;***

;;;### (autoloads (paren-backward-sexp paren-forward-sexp paren-toggle-open-paren-context
;;;;;;  paren-toggle-matching-quoted-paren paren-toggle-matching-paired-delimiter
;;;;;;  paren-deactivate paren-activate) "site-lisp/mic-paren" "site-lisp/mic-paren.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/mic-paren.el

(autoload 'paren-activate "site-lisp/mic-paren" "\
Activate mic-paren parenthesis highlighting.
Note: This also deactivates the paren.el
and stig-paren.el packages if they are active!

The following options are available via the customize-feature:
  `paren-priority'
  `paren-overlay-priority'
  `paren-sexp-mode'
  `paren-highlight-at-point'
  `paren-highlight-offscreen'
  `paren-display-message'
  `paren-message-linefeed-display'
  `paren-message-no-match'
  `paren-message-show-linenumber'
  `paren-message-truncate-lines'
  `paren-ding-unmatched'
  `paren-delay'
  `paren-dont-touch-blink'
  `paren-match-face'
  `paren-mismatch-face'
  `paren-no-match-face'
  `paren-bind-modified-sexp-functions'

The following options are settable via toggling functions (look at the
documentation of these options for the names of these functions):
  `paren-match-quoted-paren'
  `paren-match-paired-delimiter'
  `paren-open-paren-context-backward'

\(fn)" t nil)

(autoload 'paren-deactivate "site-lisp/mic-paren" "\
Deactivate mic-paren parenthesis highlighting.

\(fn)" t nil)

(autoload 'paren-toggle-matching-paired-delimiter "site-lisp/mic-paren" "\
Toggle matching paired delimiter.
Force on with positive ARG.  Use this in mode hooks to activate or
deactivate paired delimiter matching.  If optional second argument
NO-MESSAGE is non-nil then don't display a message about the
current activation state of the paired-delimiter-matching feature.

\(fn ARG &optional NO-MESSAGE)" t nil)

(autoload 'paren-toggle-matching-quoted-paren "site-lisp/mic-paren" "\
Toggle matching quoted parens.
Force on with positive ARG.  Use this in mode hooks to activate or
deactivate quoted paren matching.  If optional second argument
NO-MESSAGE is non-nil then don't display a message about the
current activation state of the quoted-paren-matching feature.

\(fn ARG &optional NO-MESSAGE)" t nil)

(autoload 'paren-toggle-open-paren-context "site-lisp/mic-paren" "\
Toggle whether or not to determine context of the matching open-paren.
Force backward context with positive ARG.  Use this in mode-hooks.
See `paren-open-paren-context-backward'.

\(fn ARG)" t nil)

(autoload 'paren-forward-sexp "site-lisp/mic-paren" "\
Act like `forward-sexp' but also handle quoted parens.
See `paren-match-quoted-paren'.

\(fn &optional ARG)" t nil)

(autoload 'paren-backward-sexp "site-lisp/mic-paren" "\
Act like `backward-sexp' but also match quoted parens.
See `paren-match-quoted-paren'.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (minimap-kill minimap-create) "site-lisp/minimap"
;;;;;;  "site-lisp/minimap.el" (20488 45440))
;;; Generated autoloads from site-lisp/minimap.el

(autoload 'minimap-create "site-lisp/minimap" "\
Create a minimap sidebar for the current window.

\(fn)" t nil)

(autoload 'minimap-kill "site-lisp/minimap" "\
Kill minimap for current buffer.
Cancel the idle timer if no more minimaps are active.

\(fn)" t nil)

;;;***

;;;### (autoloads (size-indication-mode modelinepos-style modelinepos-column-limit)
;;;;;;  "site-lisp/modeline-posn" "site-lisp/modeline-posn.el" (20488
;;;;;;  45440))
;;; Generated autoloads from site-lisp/modeline-posn.el

(defface modelinepos-column-warning '((t (:foreground "Red"))) "\
*Face used to highlight the modeline column number.
This is used when the current column number is greater than
`modelinepos-column-limit'." :group (quote Modeline) :group (quote Convenience) :group (quote Help) :group (quote faces))

(defface modelinepos-region '((t :inherit region)) "\
*Face used to highlight the modeline position and size when
the region is active." :group (quote Modeline) :group (quote Convenience) :group (quote Help) :group (quote faces))

(defvar modelinepos-column-limit 70 "\
*Current column greater than this means highlight column in mode-line.")

(custom-autoload 'modelinepos-column-limit "site-lisp/modeline-posn" t)

(defvar modelinepos-style '(" %d ch, %d l" (abs (- (mark t) (point))) (count-lines (mark t) (point))) "\
*What info to include about the region size, in mode-line.
Value `chars+lines' means print the number of characters and the number of lines.")

(custom-autoload 'modelinepos-style "site-lisp/modeline-posn" t)

(defvar size-indication-mode nil "\
Non-nil if Size-Indication mode is enabled.
See the command `size-indication-mode' for a description of this minor mode.")

(custom-autoload 'size-indication-mode "site-lisp/modeline-posn" nil)

(autoload 'size-indication-mode "site-lisp/modeline-posn" "\
Toggle Size Indication mode.
With arg, turn Size Indication mode on iff arg is positive.
When Size Indication mode is enabled, the buffer or region size
appears in the mode line.  If Transient Mark mode is enabled, the
region size is shown; otherwise, the size of the accessible part
of the buffer is shown.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (multi-eshell multi-eshell-switch multi-eshell-go-back)
;;;;;;  "site-lisp/multi-eshell" "site-lisp/multi-eshell.el" (20488
;;;;;;  45440))
;;; Generated autoloads from site-lisp/multi-eshell.el

(autoload 'multi-eshell-go-back "site-lisp/multi-eshell" "\
Switch to buffer multi-eshell-last-buffer.

\(fn &optional IGNORED)" t nil)

(autoload 'multi-eshell-switch "site-lisp/multi-eshell" "\
If current buffer is not an multi-eshell, switch to current multi-eshell buffer. Otherwise, switch to next multi-eshell buffer.

\(fn &optional IGNORED)" t nil)

(autoload 'multi-eshell "site-lisp/multi-eshell" "\
Creates a shell buffer. If one already exists, this creates a new buffer, with the name '*shell*<n>', where n is chosen by the function generate-new-buffer-name.

\(fn &optional NUMSHELLS)" t nil)

;;;***

;;;### (autoloads (multi-term) "site-lisp/multi-term" "site-lisp/multi-term.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/multi-term.el

(autoload 'multi-term "site-lisp/multi-term" "\
Create new term buffer.
Will prompt you shell name when you type `C-u' before this command.

\(fn)" t nil)

;;;***

;;;### (autoloads (nf-procmail-mode) "site-lisp/nf-procmail-mode"
;;;;;;  "site-lisp/nf-procmail-mode.el" (20488 45440))
;;; Generated autoloads from site-lisp/nf-procmail-mode.el

(autoload 'nf-procmail-mode "site-lisp/nf-procmail-mode" "\
Major mode for editing procmail recipes.

\(fn)" t nil)
 (add-to-list 'auto-mode-alist '("\\.?procmail\\.?rc\\'" . nf-procmail-mode))

;;;***

;;;### (autoloads (org-jira-mode) "site-lisp/org-jira/org-jira" "site-lisp/org-jira/org-jira.el"
;;;;;;  (20488 49574))
;;; Generated autoloads from site-lisp/org-jira/org-jira.el

(autoload 'org-jira-mode "site-lisp/org-jira/org-jira" "\
Toggle org-jira mode.
With no argument, the mode is toggled on/off.
Non-nil argument turns mode on.
Nil argument turns mode off.

Commands:
\\{org-jira-entry-mode-map}

Entry to this mode calls the value of `org-jira-mode-hook'.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (paredit-mode) "site-lisp/paredit" "site-lisp/paredit.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/paredit.el

(autoload 'paredit-mode "site-lisp/paredit" "\
Minor mode for pseudo-structurally editing Lisp code.
With a prefix argument, enable Paredit Mode even if there are
  imbalanced parentheses in the buffer.
Paredit behaves badly if parentheses are imbalanced, so exercise
  caution when forcing Paredit Mode to be enabled, and consider
  fixing imbalanced parentheses instead.
\\<paredit-mode-map>

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (php-mode php-file-patterns php-mode-to-use) "site-lisp/php-mode-improved"
;;;;;;  "site-lisp/php-mode-improved.el" (20488 45440))
;;; Generated autoloads from site-lisp/php-mode-improved.el

(defvar php-mode-to-use (progn (require 'mumamo nil t) (if (fboundp 'nxhtml-mumamo-turn-on) 'nxhtml-mumamo-turn-on (if (fboundp 'html-mumamo-turn-on) 'html-mumamo-turn-on 'php-mode))) "\
Major mode turn on function to use for php files.")

(custom-autoload 'php-mode-to-use "site-lisp/php-mode-improved" t)

(defvar php-file-patterns '("\\.php[s34]?\\'" "\\.phtml\\'" "\\.inc\\'") "\
List of file patterns for which to automatically invoke `php-mode'.")

(custom-autoload 'php-file-patterns "site-lisp/php-mode-improved" nil)

(autoload 'php-mode "site-lisp/php-mode-improved" "\
Major mode for editing PHP code.

\\{php-mode-map}

\(fn)" t nil)

;;;***

;;;### (autoloads (popup-ruler-vertical popup-ruler) "site-lisp/popup-ruler"
;;;;;;  "site-lisp/popup-ruler.el" (20488 45440))
;;; Generated autoloads from site-lisp/popup-ruler.el

(autoload 'popup-ruler "site-lisp/popup-ruler" "\
Temporarily display a ruler with `momentary' face above the current line.
With \\[universal-argument] prefix argument, make the ruler measure in both
directions from point.  Use \\[universal-argument] \\[universal-argument] for
quoted text.  The ruler then skips the quote character when measuring.

\(fn ARG)" t nil)

(autoload 'popup-ruler-vertical "site-lisp/popup-ruler" "\
Temporarily display a vertical ruler in the `current-column'.
With \\[universal-argument] prefix argument, make the ruler measure in both
directions from point.  Use \\[universal-argument] \\[universal-argument] to
make the ruler start at zero rather than one.

\(fn ARG)" t nil)

;;;***

;;;### (autoloads (refresh-pretty-control-l pp^L-^L-string Pretty-Control-L)
;;;;;;  "site-lisp/pp-c-l" "site-lisp/pp-c-l.el" (20488 45440))
;;; Generated autoloads from site-lisp/pp-c-l.el

(let ((loads (get 'Pretty-Control-L 'custom-loads))) (if (member '"site-lisp/pp-c-l" loads) nil (put 'Pretty-Control-L 'custom-loads (cons '"site-lisp/pp-c-l" loads))))

(defface pp^L-highlight (if (> emacs-major-version 21) '((((type x w32 mac graphic) (class color)) (:box (:line-width 3 :style pressed-button))) (t (:inverse-video t))) '((((type x w32 mac graphic) (class color)) (:foreground "Blue" :background "DarkSeaGreen1")) (t (:inverse-video t)))) "\
*Face used to highlight `pp^L-^L-vector'." :group (quote Pretty-Control-L) :group (quote faces))

(defvar pp^L-^L-string "          Section (Printable Page)          " "\
*Highlighted string displayed in place of each Control-l (^L) character.
If `pp^L-^L-string-function' is non-nil, then the string that function
returns is used instead of `pp^L-^L-string'.")

(custom-autoload 'pp^L-^L-string "site-lisp/pp-c-l" t)

(defalias 'pp^l 'pretty-control-l-mode)

(autoload 'refresh-pretty-control-l "site-lisp/pp-c-l" "\
Reinitialize `pretty-control-l-mode', if on, to update the display.

\(fn)" t nil)

;;;***

;;;### (autoloads (svn-status svn-checkout) "site-lisp/psvn" "site-lisp/psvn.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/psvn.el

(autoload 'svn-checkout "site-lisp/psvn" "\
Run svn checkout REPOS-URL PATH.

\(fn REPOS-URL PATH)" t nil)
 (defalias 'svn-examine 'svn-status)

(autoload 'svn-status "site-lisp/psvn" "\
Examine the status of Subversion working copy in directory DIR.
If ARG is -, allow editing of the parameters. One could add -N to
run svn status non recursively to make it faster.
For every other non nil ARG pass the -u argument to `svn status', which
asks svn to connect to the repository and check to see if there are updates
there.

If there is no .svn directory, examine if there is CVS and run
`cvs-examine'. Otherwise ask if to run `dired'.

\(fn DIR &optional ARG)" t nil)

;;;***

;;;### (autoloads (puppet-mode) "site-lisp/puppet-mode" "site-lisp/puppet-mode.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/puppet-mode.el

(autoload 'puppet-mode "site-lisp/puppet-mode" "\
Major mode for editing puppet manifests.

The variable puppet-indent-level controls the amount of indentation.
\\{puppet-mode-map}

\(fn)" t nil)

;;;***

;;;### (autoloads (rs-gnus-leafnode-kill-thread rs-gnus-summary-score-statistics
;;;;;;  rs-gnus-summary-sort-by-recipient rs-gnus-summary-limit-to-recipient
;;;;;;  rs-gnus-summary-mark-as-expirable-next-article rs-gnus-summary-mark-as-expirable-dont-move
;;;;;;  rs-gnus-summary-mark-as-expirable-and-next-line rs-gnus-summary-non-boring-headers
;;;;;;  rs-gnus-summary-more-headers rs-gnus-summary-mark-lists-expirable
;;;;;;  rs-gnus-summary-line-initialize rs-gnus-balloon-1 rs-gnus-balloon-0
;;;;;;  rs-gnus-summary-line-list-subject rs-gnus-summary-limit-to-label
;;;;;;  rs-gnus-summary-line-label rs-gnus-summary-line-score rs-gnus-summary-line-message-size
;;;;;;  rs-gnus-summary-line-content-type rs-gnus-summary-line-content-type-alist
;;;;;;  rs-gnus-summary-tree-lines rs-gnus-summary-tree-arrows-mt
;;;;;;  rs-gnus-summary-tree-lines-rs rs-gnus-summary-tree-arrows-01
;;;;;;  rs-gnus-summary-tree-arrows-test rs-gnus-summary-tree-arrows-wide
;;;;;;  rs-gnus-summary-tree-arrows-latin rs-gnus-summary-tree-arrows-ascii
;;;;;;  rs-gnus-summary-tree-arrows-ascii-default) "site-lisp/rs-gnus-summary"
;;;;;;  "site-lisp/rs-gnus-summary.el" (20488 45440))
;;; Generated autoloads from site-lisp/rs-gnus-summary.el

(autoload 'rs-gnus-summary-tree-arrows-ascii-default "site-lisp/rs-gnus-summary" "\
Use default tree layout with ascii arrows.

\(fn)" t nil)

(autoload 'rs-gnus-summary-tree-arrows-ascii "site-lisp/rs-gnus-summary" "\
Use tree layout with ascii arrows.

\(fn)" t nil)

(autoload 'rs-gnus-summary-tree-arrows-latin "site-lisp/rs-gnus-summary" "\
Use default tree layout with ascii arrows (RS).

\(fn)" t nil)

(defalias 'rs-gnus-summary-tree-arrows 'rs-gnus-summary-tree-arrows-wide)

(autoload 'rs-gnus-summary-tree-arrows-wide "site-lisp/rs-gnus-summary" "\
Use tree layout with wide unicode arrows.

\(fn)" t nil)

(autoload 'rs-gnus-summary-tree-arrows-test "site-lisp/rs-gnus-summary" "\
Use tree layout with unicode arrows.

\(fn)" t nil)

(autoload 'rs-gnus-summary-tree-arrows-01 "site-lisp/rs-gnus-summary" "\
Use tree layout with unicode arrows.

\(fn)" t nil)

(autoload 'rs-gnus-summary-tree-lines-rs "site-lisp/rs-gnus-summary" "\
Use tree layout with unicode lines.

\(fn)" t nil)

(autoload 'rs-gnus-summary-tree-arrows-mt "site-lisp/rs-gnus-summary" "\
Use tree layout with unicode arrows.

\(fn)" t nil)

(autoload 'rs-gnus-summary-tree-lines "site-lisp/rs-gnus-summary" "\
Use tree layout with unicode lines.

\(fn)" t nil)

(defvar rs-gnus-summary-line-content-type-alist '(("^text/plain" " ") ("^text/html" "h") ("^message/rfc822" "f") ("^multipart/mixed" "m") ("^multipart/alternative" "a") ("^multipart/related" "r") ("^multipart/signed" "s") ("^multipart/encrypted" "e") ("^multipart/report" "t") ("^application/" "A") ("^image/" "I")) "\
Alist of regular expressions and summary line indicators.")

(custom-autoload 'rs-gnus-summary-line-content-type-alist "site-lisp/rs-gnus-summary" t)

(autoload 'rs-gnus-summary-line-content-type "site-lisp/rs-gnus-summary" "\
Display content type of message in summary line.

This function is intended to be used in `gnus-summary-line-format-alist', with
\(defalias 'gnus-user-format-function-X 'rs-gnus-summary-line-content-type).
See (info \"(gnus)Group Line Specification\").

You need to add `Content-Type' to `nnmail-extra-headers' and
`gnus-extra-headers', see Info node `(gnus)To From Newsgroups'.

\(fn HEADER)" nil nil)

(autoload 'rs-gnus-summary-line-message-size "site-lisp/rs-gnus-summary" "\
Return pretty-printed version of message size.

Like `gnus-summary-line-message-size' but more verbose.  This function is
intended to be used in `gnus-summary-line-format-alist', with
\(defalias 'gnus-user-format-function-X 'rs-gnus-summary-line-message-size).

See (info \"(gnus)Group Line Specification\").

\(fn HEAD)" nil nil)

(autoload 'rs-gnus-summary-line-score "site-lisp/rs-gnus-summary" "\
Return pretty-printed version of article score.

See (info \"(gnus)Group Line Specification\").

\(fn HEAD)" nil nil)

(autoload 'rs-gnus-summary-line-label "site-lisp/rs-gnus-summary" "\
Display label of message in summary line.

This function is intended to be used in `gnus-summary-line-format-alist', with
\(defalias 'gnus-user-format-function-X 'rs-gnus-summary-line-label).
See (info \"(gnus)Group Line Specification\").

You need to add `X-Gnus-Label' to `nnmail-extra-headers' and
`gnus-extra-headers', see Info node `(gnus)To From Newsgroups'.

\(fn HEADER)" nil nil)

(autoload 'rs-gnus-summary-limit-to-label "site-lisp/rs-gnus-summary" "\
Limit the summary buffer to articles that match a label.

\(fn REGEXP &optional NOT-MATCHING)" t nil)

(autoload 'rs-gnus-summary-line-list-subject "site-lisp/rs-gnus-summary" "\
Return modified subject for mailing lists.

This function is intended to be used in `gnus-summary-line-format-alist', with
\(defalias 'gnus-user-format-function-X 'rs-gnus-summary-line-list-subject).

See (info \"(gnus)Group Line Specification\").

\(fn HEAD)" nil nil)

(autoload 'rs-gnus-balloon-0 "site-lisp/rs-gnus-summary" "\
Show some informations about the current article.
Informations include size, score, content type and number.
Used as help echo for the summary buffer.

\(fn WINDOW OBJECT POSITION)" nil nil)

(autoload 'rs-gnus-balloon-1 "site-lisp/rs-gnus-summary" "\
Show full \"From\", \"Subject\", \"To\", and \"Date\" of the current article.
Used as help echo for the summary buffer.

\(fn WINDOW OBJECT POSITION)" nil nil)

(autoload 'rs-gnus-summary-line-initialize "site-lisp/rs-gnus-summary" "\
Setup my summary line.

\(fn)" t nil)

(autoload 'rs-gnus-summary-mark-lists-expirable "site-lisp/rs-gnus-summary" "\
Mark some articles (lists, ...) as expirable.

\(fn)" t nil)

(autoload 'rs-gnus-summary-more-headers "site-lisp/rs-gnus-summary" "\
Force redisplaying of the current article with ...

\(fn)" t nil)

(autoload 'rs-gnus-summary-non-boring-headers "site-lisp/rs-gnus-summary" "\
Force redisplaying of the current article with ...

\(fn)" t nil)

(autoload 'rs-gnus-summary-mark-as-expirable-and-next-line "site-lisp/rs-gnus-summary" "\
Mark N articles forward as expirable and go to next line.
Useful in a summary buffer with read articles.

\(fn N)" t nil)

(autoload 'rs-gnus-summary-mark-as-expirable-dont-move "site-lisp/rs-gnus-summary" "\
Mark this article expirable.  Don't move point.

\(fn)" t nil)

(autoload 'rs-gnus-summary-mark-as-expirable-next-article "site-lisp/rs-gnus-summary" "\
Mark this article expirable.  Move to next article.

\(fn)" t nil)

(autoload 'rs-gnus-summary-limit-to-recipient "site-lisp/rs-gnus-summary" "\
Limit the summary buffer to articles with the given RECIPIENT.

If NOT-MATCHING, exclude RECIPIENT.

To and Cc headers are checked.  You need to include them in
`nnmail-extra-headers'.

\(fn RECIPIENT &optional NOT-MATCHING)" t nil)

(autoload 'rs-gnus-summary-sort-by-recipient "site-lisp/rs-gnus-summary" "\
Sort the summary buffer by recipient name alphabetically.
If `case-fold-search' is non-nil, case of letters is ignored.
Argument REVERSE means reverse order.

\(fn &optional REVERSE)" t nil)

(autoload 'rs-gnus-summary-score-statistics "site-lisp/rs-gnus-summary" "\
Display score statistics for current summary buffer.

If ANCIENT, also count ancient articles.  Returns a list: (high
default low).

\(fn &optional ANCIENT QUIET)" t nil)

(autoload 'rs-gnus-leafnode-kill-thread "site-lisp/rs-gnus-summary" "\
Kill thread from here using leafnode.

\(fn)" t nil)

;;;***

;;;### (autoloads (rs-info-reload rs-info-boxquote rs-info-insert-node-for-variable
;;;;;;  rs-info-insert-current-node rs-info-switch-buffer-name rs-info-buffer-name
;;;;;;  rs-info-style-alist rs-info-goto-node-string) "site-lisp/rs-info"
;;;;;;  "site-lisp/rs-info.el" (20488 45440))
;;; Generated autoloads from site-lisp/rs-info.el

(defvar rs-info-goto-node-string "info" "\
String to insert with `rs-info-insert-current-node'.")

(custom-autoload 'rs-info-goto-node-string "site-lisp/rs-info" t)

(defvar rs-info-style-alist '((emacs-lisp-mode custom-manual) (texinfo-mode texinfo-ref) (t emacs)) "\
Alist of major modes and prefered info styles.
A `t' entry corresponds to the default style used when no matching mode is
found.")

(custom-autoload 'rs-info-style-alist "site-lisp/rs-info" t)

(defvar rs-info-buffer-name "*info*" "\
Name of the info buffer")

(custom-autoload 'rs-info-buffer-name "site-lisp/rs-info" t)

(autoload 'rs-info-switch-buffer-name "site-lisp/rs-info" "\
Switch `rs-info-buffer-name'.  If RESET, switch to default value.

\(fn &optional RESET)" t nil)

(autoload 'rs-info-insert-current-node "site-lisp/rs-info" "\
Insert reference to current Info node using STYLE in buffer.

If NOINSERT (the prefix), return the string instead.

Possible styles (must be a symbol):
- `emacs' (Emacs style): (info \"(file)node\")
- `emacs-press': as `emacs' plus a note about `C-x C-e'
- `emacs-keys-goto' (Emacs key sequence): `C-h i g (file)node RET'
- `emacs-keys-menu' (Emacs menu key sequence): `C-h i d m file RET m node RET'
- `custom-manual': \":link '(custom-manual \"(file)node\")\" for `defcustom'
- `info-link': \":link '(info-link \"(file)node\")\" for `defcustom'
- `texinfo-ref-full': A full \"@ref{...}\" for Texinfo
- `texinfo-ref': \"@ref{...}\" for Texinfo within the same file
- `gnus' (the Gnus home brewed style): <info://foo/bar+baz> (deprecated)
- `gnome' (GNOME style): <info:foo#bar_baz>
- `kde' (KDE style): <info:(foo)bar baz>
- `konqueror' (Konqueror style): <info:/foo/bar baz>

When used interactively, the default is taken from `rs-info-style-alist'.

For `emacs' and `emacs-press' style see the variable
`rs-info-goto-node-string'.

\(fn STYLE &optional NOINSERT)" t nil)

(autoload 'rs-info-insert-node-for-variable "site-lisp/rs-info" "\
Insert a custom style info node for the top level form at point.

Limitations: Finding the relevant node is done by looking up the index of the
current info buffer, i.e. you need to choose the appropriate manual before.
It only finds the first match in the index.  You should probably open the info
buffer in another visible frame or buffer to double check the results.

\(fn)" t nil)

(autoload 'rs-info-boxquote "site-lisp/rs-info" "\
Yank text (from an info node), box it and use current info node as title.
If USE-LIST, the title is taken from `rs-info-title-alist'
depending on the current newsgroup.

\(fn &optional USE-LIST)" t nil)

(defalias 'boxquote-info 'rs-info-boxquote)

(autoload 'rs-info-reload "site-lisp/rs-info" "\
Reload current info node.

\(fn)" t nil)

;;;***

;;;### (autoloads (ruby-mode) "site-lisp/ruby-mode/ruby-mode" "site-lisp/ruby-mode/ruby-mode.el"
;;;;;;  (20488 45787))
;;; Generated autoloads from site-lisp/ruby-mode/ruby-mode.el

(autoload 'ruby-mode "site-lisp/ruby-mode/ruby-mode" "\
Major mode for editing ruby scripts.
\\[ruby-indent-command] properly indents subexpressions of multi-line
class, module, def, if, while, for, do, and case statements, taking
nesting into account.

The variable ruby-indent-level controls the amount of indentation.
\\{ruby-mode-map}

\(fn)" t nil)

;;;***

;;;### (autoloads (rubydb) "site-lisp/ruby-mode/rubydb2x" "site-lisp/ruby-mode/rubydb2x.el"
;;;;;;  (20488 45787))
;;; Generated autoloads from site-lisp/ruby-mode/rubydb2x.el

(autoload 'rubydb "site-lisp/ruby-mode/rubydb2x" "\
Run rubydb on program FILE in buffer *gud-FILE*.
The directory containing FILE becomes the initial working directory
and source-file directory for your debugger.

\(fn COMMAND-LINE)" t nil)

;;;***

;;;### (autoloads (rubydb) "site-lisp/ruby-mode/rubydb3x" "site-lisp/ruby-mode/rubydb3x.el"
;;;;;;  (20488 45787))
;;; Generated autoloads from site-lisp/ruby-mode/rubydb3x.el

(autoload 'rubydb "site-lisp/ruby-mode/rubydb3x" "\
Run rubydb on program FILE in buffer *gud-FILE*.
The directory containing FILE becomes the initial working directory
and source-file directory for your debugger.

\(fn COMMAND-LINE)" t nil)

;;;***

;;;### (autoloads (smart-compile) "site-lisp/smart-compile" "site-lisp/smart-compile.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/smart-compile.el

(autoload 'smart-compile "site-lisp/smart-compile" "\
An interface to `compile'.
It calls `compile' or other compile function, which is defined in
`smart-compile-alist'.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (stopwatch) "site-lisp/stopwatch" "site-lisp/stopwatch.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/stopwatch.el

(autoload 'stopwatch "site-lisp/stopwatch" "\
Setup stopwatch buffer and mode then toggles timer.

\(fn)" t nil)

;;;***

;;;### (autoloads (sr-term-cd-program sr-term-cd-newterm sr-term-cd
;;;;;;  sr-term sunrise-cd sr-dired sunrise sr-virtual-mode sr-mode)
;;;;;;  "site-lisp/sunrise-commander/sunrise-commander" "site-lisp/sunrise-commander/sunrise-commander.el"
;;;;;;  (20488 45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-commander.el

(autoload 'sr-mode "site-lisp/sunrise-commander/sunrise-commander" "\
Two-pane file manager for Emacs based on Dired and inspired by MC.
The following keybindings are available:

        /, j .......... go to directory
        p, n .......... move cursor up/down
        M-p, M-n ...... move cursor up/down in passive pane
        ^, J .......... go to parent directory
        M-^, M-J ...... go to parent directory in passive pane
        Tab ........... switch to other pane
        C-Tab.......... switch to viewer window
        C-c Tab ....... switch to viewer window (console compatible)
        RET, f ........ visit selected file/directory
        M-RET, M-f .... visit selected file/directory in passive pane
        C-c RET ....... visit selected in passive pane (console compatible)
        b ............. visit selected file/directory in default browser
        F ............. visit all marked files, each in its own window
        C-u F ......... visit all marked files in the background
        o,v ........... quick visit selected file (scroll with C-M-v, C-M-S-v)
        C-u o, C-u v .. kill quick-visited buffer (restores normal scrolling)
        X ............. execute selected file
        C-u X.......... execute selected file with arguments

        + ............. create new directory
        M-+ ........... create new empty file(s)
        C ............. copy marked (or current) files and directories
        R ............. rename marked (or current) files and directories
        D ............. delete marked (or current) files and directories
        S ............. soft-link selected file/directory to passive pane
        Y ............. do relative soft-link of selected file in passive pane
        H ............. hard-link selected file to passive pane
        K ............. clone selected files and directories into passive pane
        M-C ........... copy (using traditional dired-do-copy)
        M-R ........... rename (using traditional dired-do-rename)
        M-D ........... delete (using traditional dired-do-delete)
        M-S............ soft-link (using traditional dired-do-symlink)
        M-Y............ do relative soft-link (traditional dired-do-relsymlink)
        M-H............ hard-link selected file/directory (dired-do-hardlink)
        A ............. search marked files for regular expression
        Q ............. perform query-replace-regexp on marked files
        C-c s ......... start a \"sticky\" interactive search in the current pane

        M-a ........... move to beginning of current directory
        M-e ........... move to end of current directory
        M-y ........... go to previous directory in history
        M-u ........... go to next directory in history
        C-M-y ......... go to previous directory in history on passive pane
        C-M-u ......... go to next directory in history on passive pane

        g, C-c C-c .... refresh pane
        s ............. sort entries (by name, number, size, time or extension)
        r ............. reverse the order of entries in the active pane (sticky)
        C-o ........... show/hide hidden files (requires dired-omit-mode)
        C-Backspace ... hide/show file attributes in pane
        C-c Backspace . hide/show file attributes in pane (console compatible)
        y ............. show file type / size of selected files and directories.
        M-l ........... truncate/continue long lines in pane
        C-c v ......... put current panel in VIRTUAL mode
        C-c C-v ....... create new pure VIRTUAL buffer
        C-c C-w ....... browse directory tree using w3m

        M-t ........... transpose panes
        M-o ........... synchronize panes
        C-c C-s ....... change panes layout (vertical/horizontal/top-only)
        [ ............. enlarges the right pane by 5 columns
        ] ............. enlarges the left pane by 5 columns
        } ............. enlarges the panes vertically by 1 row
        C-} ........... enlarges the panes vertically as much as it can
        C-c } ......... enlarges the panes vertically as much as it can
        { ............. shrinks the panes vertically by 1 row
        C-{ ........... shrinks the panes vertically as much as it can
        C-c { ......... shrinks the panes vertically as much as it can
        \\ ............. restores the size of all windows back to «normal»
        C-c C-z ....... enable/disable synchronized navigation

        C-= ........... smart compare files (ediff)
        C-c = ......... smart compare files (console compatible)
        = ............. fast smart compare files (plain diff)
        C-M-= ......... compare panes
        C-x = ......... compare panes (console compatible)

        C-c C-f ....... execute Find-dired in Sunrise VIRTUAL mode
        C-c C-n ....... execute find-Name-dired in Sunrise VIRTUAL mode
        C-c C-g ....... execute find-Grep-dired in Sunrise VIRTUAL mode
        C-u C-c C-g ... execute find-Grep-dired with additional grep options
        C-c C-l ....... execute Locate in Sunrise VIRTUAL mode
        C-c C-r ....... browse list of Recently visited files (requires recentf)
        C-c C-c ....... [after find, locate or recent] dismiss virtual buffer
        C-c / ......... narrow the contents of current pane using fuzzy matching
        C-c b ......... partial Branch view of selected items in current pane
        C-c p ......... Prune paths matching regular expression from current pane
        ; ............. follow file (go to same directory as selected file)
        M-; ........... follow file in passive pane
        C-M-o ......... follow a projection of current directory in passive pane

        C-> ........... save named checkpoint (a.k.a. \"bookmark panes\")
        C-c > ......... save named checkpoint (console compatible)
        C-.    ........ restore named checkpoint
        C-c .  ........ restore named checkpoint

        C-x C-q ....... put pane in Editable Dired mode (commit with C-c C-c)
        @! ............ fast backup files (not dirs!), each to [filename].bak

        C-c t ......... open new terminal or switch to already open one
        C-c T ......... open terminal AND/OR change directory to current
        C-c C-t ....... open always a new terminal in current directory
        C-c M-t ....... open a new terminal using an alternative shell program
        q, C-x k ...... quit Sunrise Commander, restore previous window setup
        M-q ........... quit Sunrise Commander, don't restore previous windows

Additionally, the following traditional commander-style keybindings are provided
\(these may be disabled by customizing the `sr-use-commander-keys' option):

        F2 ............ go to directory
        F3 ............ quick visit selected file
        F4 ............ visit selected file
        F5 ............ copy marked (or current) files and directories
        F6 ............ rename marked (or current) files and directories
        F7 ............ create new directory
        F8 ............ delete marked (or current) files and directories
        F10 ........... quit Sunrise Commander
        C-F3 .......... sort contents of current pane by name
        C-F4 .......... sort contents of current pane by extension
        C-F5 .......... sort contents of current pane by time
        C-F6 .......... sort contents of current pane by size
        C-F7 .......... sort contents of current pane numerically
        S-F7 .......... soft-link selected file/directory to passive pane
        Insert ........ mark file
        C-PgUp ........ go to parent directory

Any other dired keybinding (not overridden by any of the above) can be used in
Sunrise, like G for changing group, M for changing mode and so on.

Some more bindings are available in terminals opened using any of the Sunrise
functions (i.e. one of: C-c t, C-c T, C-c C-t, C-c M-t):

        C-c Tab ....... switch focus to the active pane
        C-c t ......... cycle through all currently open terminals
        C-c T ......... cd to the directory in the active pane
        C-c C-t ....... open new terminal, cd to directory in the active pane
        C-c ; ......... follow the current directory in the active pane
        C-c { ......... shrink the panes vertically as much as possible
        C-c } ......... enlarge the panes vertically as much as possible
        C-c \\ ......... restore the size of all windows back to «normal»
        C-c C-j ....... put terminal in line mode
        C-c C-k ....... put terminal back in char mode

The following bindings are available only in line mode (eshell is considered to
be *always* in line mode):

        M-<up>, M-P ... move cursor up in the active pane
        M-<down>, M-N . move cursor down in the active pane
        M-Return ...... visit selected file/directory in the active pane
        M-J ........... go to parent directory in the active pane
        M-G ........... refresh active pane
        M-Tab ......... switch to passive pane (without leaving the terminal)
        M-M ........... mark selected file/directory in the active pane
        M-Backspace ... unmark previous file/directory in the active pane
        M-U ........... remove all marks from the active pane
        C-Tab ......... switch focus to the active pane

In a terminal in line mode the following substitutions are also performed
automatically:

       %f - expands to the currently selected file in the left pane
       %F - expands to the currently selected file in the right pane
       %m - expands to the list of paths of all marked files in the left pane
       %M - expands to the list of paths of all marked files in the right pane
       %n - expands to the list of names of all marked files in the left pane
       %N - expands to the list of names of all marked files in the right pane
       %d - expands to the current directory in the left pane
       %D - expands to the current directory in the right pane
       %a - expands to the list of paths of all marked files in the active pane
       %A - expands to the current directory in the active pane
       %p - expands to the list of paths of all marked files in the passive pane
       %P - expands to the current directory in the passive pane
       %% - inserts a single % sign.

\(fn)" t nil)

(autoload 'sr-virtual-mode "site-lisp/sunrise-commander/sunrise-commander" "\
Sunrise Commander Virtual Mode. Useful for reusing find and locate results.

\(fn)" t nil)

(autoload 'sunrise "site-lisp/sunrise-commander/sunrise-commander" "\
Toggle the Sunrise Commander file manager.
If LEFT-DIRECTORY is given, the left window will display that
directory (same for RIGHT-DIRECTORY). Specifying nil for any of
these values uses the default, ie. $HOME.

\(fn &optional LEFT-DIRECTORY RIGHT-DIRECTORY FILENAME)" t nil)

(autoload 'sr-dired "site-lisp/sunrise-commander/sunrise-commander" "\
Visit the given target (file or directory) in `sr-mode'.

\(fn &optional TARGET SWITCHES)" t nil)

(autoload 'sunrise-cd "site-lisp/sunrise-commander/sunrise-commander" "\
Toggle the Sunrise Commander FM keeping the current file in focus.
If Sunrise is off, enable it and focus the file displayed in the current buffer.
If Sunrise is on, disable it and switch to the buffer currently displayed in the
viewer window.

\(fn)" t nil)
 (autoload 'sr-checkpoint-handler "sunrise-commander" "" t)

(autoload 'sr-term "site-lisp/sunrise-commander/sunrise-commander" "\
Run terminal in a new buffer or switch to an existing one.
If the optional argument CD is non-nil, directory is changed to
the current one in the active pane. A non-nil NEWTERM argument
forces the creation of a new terminal. If PROGRAM is provided
and exists in `exec-path', then it will be used instead of the
default `sr-terminal-program'.

\(fn &optional CD NEWTERM PROGRAM)" t nil)

(autoload 'sr-term-cd "site-lisp/sunrise-commander/sunrise-commander" "\
Run terminal in a new buffer or switch to an existing one.
cd's to the current directory of the active pane.

\(fn)" t nil)

(autoload 'sr-term-cd-newterm "site-lisp/sunrise-commander/sunrise-commander" "\
Open a NEW terminal (don't switch to an existing one).
cd's to the current directory of the active pane.

\(fn)" t nil)

(autoload 'sr-term-cd-program "site-lisp/sunrise-commander/sunrise-commander" "\
Open a NEW terminal using PROGRAM as the shell.

\(fn &optional PROGRAM)" t nil)

;;;***

;;;### (autoloads nil "site-lisp/sunrise-commander/sunrise-x-buttons"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-buttons.el" (20488
;;;;;;  45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-buttons.el
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-buttons))

;;;***

;;;### (autoloads nil "site-lisp/sunrise-commander/sunrise-x-loop"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-loop.el" (20488 45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-loop.el
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-loop))

;;;***

;;;### (autoloads nil "site-lisp/sunrise-commander/sunrise-x-mirror"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-mirror.el" (20488
;;;;;;  45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-mirror.el
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-mirror))

;;;***

;;;### (autoloads nil "site-lisp/sunrise-commander/sunrise-x-modeline"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-modeline.el" (20488
;;;;;;  45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-modeline.el
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-modeline))

;;;***

;;;### (autoloads nil "site-lisp/sunrise-commander/sunrise-x-popviewer"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-popviewer.el" (20488
;;;;;;  45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-popviewer.el
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-popviewer))

;;;***

;;;### (autoloads nil "site-lisp/sunrise-commander/sunrise-x-tabs"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-tabs.el" (20488 45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-tabs.el
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-tabs))

;;;***

;;;### (autoloads (sr-tree-mode) "site-lisp/sunrise-commander/sunrise-x-tree"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-tree.el" (20488 45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-tree.el

(autoload 'sr-tree-mode "site-lisp/sunrise-commander/sunrise-x-tree" "\
Tree view for the Sunrise Commander file manager.

\(fn)" t nil)
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-tree))

;;;***

;;;### (autoloads nil "site-lisp/sunrise-commander/sunrise-x-w32-addons"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-w32-addons.el" (20488
;;;;;;  45876))
;;; Generated autoloads from site-lisp/sunrise-commander/sunrise-x-w32-addons.el
 (eval-after-load 'sunrise-commander '(sr-extend-with 'sunrise-x-w32-addons))

;;;***

;;;### (autoloads (tidy-buffer tidy-save-settings tidy-parse-config-file
;;;;;;  tidy-build-menu) "site-lisp/tidy" "site-lisp/tidy.el" (20488
;;;;;;  45440))
;;; Generated autoloads from site-lisp/tidy.el

(autoload 'tidy-build-menu "site-lisp/tidy" "\
Set up the tidy menu in MAP. Used to set up a Tidy menu in your
favourite mode.

\(fn &optional MAP)" t nil)

(autoload 'tidy-parse-config-file "site-lisp/tidy" "\
If `tidy-config-file' is non-nil parse that file setting variables accordingly.

\(fn)" t nil)

(autoload 'tidy-save-settings "site-lisp/tidy" "\
Query saving the current settings to your `tidy-config-file'.
Perhaps put this on your `kill-buffer-hook'.

\(fn &optional CONFIG-FILE)" t nil)

(autoload 'tidy-buffer "site-lisp/tidy" "\
Run the HTML Tidy program on the current buffer.
If PREFIX is non-nil, or if called interactively with a prefix argument,
then Tidy is applied to the currently selected region.  Any error messages
generated by that program are sent to \"*tidy-errors*\" buffer.

\(fn &optional PREFIX)" t nil)

;;;***

;;;### (autoloads (vcard-parse-region vcard-parse-string vcard-pretty-print
;;;;;;  vcard-standard-filters vcard-pretty-print-function) "site-lisp/vcard"
;;;;;;  "site-lisp/vcard.el" (20488 45440))
;;; Generated autoloads from site-lisp/vcard.el

(defvar vcard-pretty-print-function 'vcard-format-sample-box "\
*Formatting function used by `vcard-pretty-print'.")

(custom-autoload 'vcard-pretty-print-function "site-lisp/vcard" t)

(defvar vcard-standard-filters '(vcard-filter-html vcard-filter-adr-newlines vcard-filter-tel-normalize vcard-filter-textprop-cr) "\
*Standard list of filters to apply to parsed vcard data.
These filters are applied sequentially to vcard attributes when
the function `vcard-standard-filter' is supplied as the second argument to
`vcard-parse'.")

(custom-autoload 'vcard-standard-filters "site-lisp/vcard" t)

(autoload 'vcard-pretty-print "site-lisp/vcard" "\
Format VCARD into a string suitable for display to user.
VCARD can be an unparsed string containing raw VCF vcard data
or a parsed vcard alist as returned by `vcard-parse-string'.

The result is a string with formatted vcard information suitable for
insertion into a mime presentation buffer.

The function specified by the variable `vcard-pretty-print-function'
actually performs the formatting.  That function will always receive a
parsed vcard alist.

\(fn VCARD)" nil nil)

(autoload 'vcard-parse-string "site-lisp/vcard" "\
Parse RAW vcard data as a string, and return an alist representing data.

If the optional function FILTER is specified, apply that filter to each
attribute.  If no filter is specified, `vcard-standard-filter' is used.

Filters should accept two arguments: the property list and the value list.
Modifying in place the property or value list will affect the resulting
attribute in the vcard alist.

Vcard data is normally in the form

    begin:                        vcard
    prop1a:                       value1a
    prop2a;prop2b;prop2c=param2c: value2a
    prop3a;prop3b:                value3a;value3b;value3c
    end:                          vcard

\(Whitespace around the `:' separating properties and values is optional.)
If supplied to this function an alist of the form

    (((\"prop1a\") \"value1a\")
     ((\"prop2a\" \"prop2b\" (\"prop2c\" . \"param2c\")) \"value2a\")
     ((\"prop3a\" \"prop3b\") \"value3a\" \"value3b\" \"value3c\"))

would be returned.

\(fn RAW &optional FILTER)" nil nil)

(autoload 'vcard-parse-region "site-lisp/vcard" "\
Parse the raw vcard data in region, and return an alist representing data.
This function is just like `vcard-parse-string' except that it operates on
a region of the current buffer rather than taking a string as an argument.

Note: this function modifies the buffer!

\(fn BEG END &optional FILTER)" nil nil)

;;;***

;;;### (autoloads (vline-global-mode vline-mode) "site-lisp/vline"
;;;;;;  "site-lisp/vline.el" (20488 45440))
;;; Generated autoloads from site-lisp/vline.el

(autoload 'vline-mode "site-lisp/vline" "\
Display vertical line mode.

\(fn &optional ARG)" t nil)

(defvar vline-global-mode nil "\
Non-nil if Vline-Global mode is enabled.
See the command `vline-global-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vline-global-mode'.")

(custom-autoload 'vline-global-mode "site-lisp/vline" nil)

(autoload 'vline-global-mode "site-lisp/vline" "\
Toggle Vline mode in all buffers.
With prefix ARG, enable Vline-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Vline mode is enabled in all buffers where
`(lambda nil (unless (minibufferp) (vline-mode 1)))' would do it.
See `vline-mode' for more information on Vline mode.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (w3m-type-ahead-mode) "site-lisp/w3m-type-ahead"
;;;;;;  "site-lisp/w3m-type-ahead.el" (20488 45440))
;;; Generated autoloads from site-lisp/w3m-type-ahead.el

(autoload 'w3m-type-ahead-mode "site-lisp/w3m-type-ahead" "\
Toggle W3M Type Ahead mode.
With ARG, turn W3M Type Ahead mode on if and only if ARG is
positive.

\\{w3m-type-ahead-mode-map}

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (weblogger-fetch-entries weblogger-start-entry
;;;;;;  weblogger-setup-weblog weblogger-select-configuration) "site-lisp/weblogger"
;;;;;;  "site-lisp/weblogger.el" (20488 45440))
;;; Generated autoloads from site-lisp/weblogger.el

(autoload 'weblogger-select-configuration "site-lisp/weblogger" "\
Select a previously saved configuration.

\(fn &optional CONFIG)" t nil)

(autoload 'weblogger-setup-weblog "site-lisp/weblogger" "\
Create a profile for a weblog.

\(fn)" t nil)

(autoload 'weblogger-start-entry "site-lisp/weblogger" "\
Start creating a weblog entry in the *weblogger-entry* buffer.
With a prefix, it will check the available weblogs on the server
and prompt for the weblog to post to if multiple ones are
available.

\(fn &optional PROMPT)" t nil)

(autoload 'weblogger-fetch-entries "site-lisp/weblogger" "\
Sync the entry ring with what is on the weblog server.

\(fn)" t nil)

;;;***

;;;### (autoloads (wrap-region-global-mode turn-off-wrap-region-mode
;;;;;;  turn-on-wrap-region-mode wrap-region-mode) "site-lisp/wrap-region/wrap-region"
;;;;;;  "site-lisp/wrap-region/wrap-region.el" (20488 45881))
;;; Generated autoloads from site-lisp/wrap-region/wrap-region.el

(autoload 'wrap-region-mode "site-lisp/wrap-region/wrap-region" "\
Wrap region with stuff.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-wrap-region-mode "site-lisp/wrap-region/wrap-region" "\
Turn on `wrap-region-mode'

\(fn)" t nil)

(autoload 'turn-off-wrap-region-mode "site-lisp/wrap-region/wrap-region" "\
Turn off `wrap-region-mode'

\(fn)" t nil)

(defvar wrap-region-global-mode nil "\
Non-nil if Wrap-Region-Global mode is enabled.
See the command `wrap-region-global-mode' for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `wrap-region-global-mode'.")

(custom-autoload 'wrap-region-global-mode "site-lisp/wrap-region/wrap-region" nil)

(autoload 'wrap-region-global-mode "site-lisp/wrap-region/wrap-region" "\
Toggle Wrap-Region mode in all buffers.
With prefix ARG, enable Wrap-Region-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Wrap-Region mode is enabled in all buffers where
`turn-on-wrap-region-mode' would do it.
See `wrap-region-mode' for more information on Wrap-Region mode.

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (wtf-is wtf-remove wtf-add) "site-lisp/wtf" "site-lisp/wtf.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/wtf.el

(autoload 'wtf-add "site-lisp/wtf" "\
Add ACRONYM and its DEFINITION to the list of custom associations.

If you add a custom acronym definition, and feel it to be worth
sharing, you are encouraged to contact <address@hidden> via
email, providing the acronym and its definition.  This increases
the chance that it will appear in future versions of wtf.el.

\(fn ACRONYM DEFINITION)" t nil)

(autoload 'wtf-remove "site-lisp/wtf" "\
Remove ACRONYM from the list of custom associations.
If ACRONYM is not in the custom associations, but instead in
`wtf-alist', it will be marked as ignored by adding it to
`wtf-removed-acronyms'.

\(fn ACRONYM)" t nil)

(autoload 'wtf-is "site-lisp/wtf" "\
Provide the definition for ACRONYM.
When called interactively, display the message \"ACRONYM is DEF\".
Otherwise, return DEF.

DEF refers to the definition associated with ACRONYM in `wtf-alist'.

\(fn ACRONYM)" t nil)

;;;***

;;;### (autoloads (xray-features xray-hooks xray-faces xray-screen
;;;;;;  xray-overlay xray-marker xray-frame xray-window xray-buffer
;;;;;;  xray-position xray-symbol xray-click/key xray-on-mode-line-click
;;;;;;  xray-on-click xray-customize) "site-lisp/xray" "site-lisp/xray.el"
;;;;;;  (20488 45440))
;;; Generated autoloads from site-lisp/xray.el

(autoload 'xray-customize "site-lisp/xray" "\
Customize xray group.

\(fn)" t nil)

(autoload 'xray-on-click "site-lisp/xray" "\
Give help on an object clicked with the mouse.

\(fn CLICK)" t nil)

(autoload 'xray-on-mode-line-click "site-lisp/xray" "\
Give help on the mode line.

\(fn CLICK)" t nil)

(autoload 'xray-click/key "site-lisp/xray" "\
Give help on a key/menu sequence or object clicked with the mouse.

The object can be any part of an Emacs window or a name appearing in a buffer.
You can do any of the following:

    type a key sequence (e.g. `C-M-s')
    choose a menu item (e.g. [menu-bar files open-file])
    click on a scroll bar
    click on the mode line
    click in the minibuffer
    click on a name in a buffer: `xray-symbol' is called
    click anywhere else in a buffer: `xray-buffer' is called

Help is generally provided using `describe-key' and the Emacs online manual
\(via `Info-goto-emacs-key-command-node').  If no entry is found in the index of
the Emacs manual, then the manual is searched from the beginning for literal
occurrences of KEY.

For example, the KEY `C-g' is not in the index (for some reason), so the manual
is searched.  (Once an occurrence is found, you can repeatedly type `s' in
*Info* to search for additional occurrences.)

\(fn KEY)" t nil)

(autoload 'xray-symbol "site-lisp/xray" "\
Display SYMBOL internal cells in a temporary buffer.

That is, displays the symbol name cell, the symbol function cell, the symbol
value cell and the symbol property list cell.  It's also displayed the key
bindings associated with symbol (if any), from which file it was loaded and
some apropos information.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-symbol' (non-nil)
or `xray-help-symbol' (nil).

See `xray-customize' for customization.

\(fn SYMBOL &optional BUFFER)" t nil)

(autoload 'xray-position "site-lisp/xray" "\
Display POSITION internal cells in a temporary buffer.

If POSITION is nil, it's used (point).
If BUFFER is nil, it's used (current-buffer).

That is, displays the frame, the window, the buffer, the word (if any) around
POSITION (also some apropos information), the character width, the character at
POSITION, the charset, the text property list, the default text property list
and the overlay list.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-position'
\(non-nil) or `xray-help-position' (nil).

See `xray-customize' for customization.

\(fn &optional POSITION BUFFER)" t nil)

(autoload 'xray-buffer "site-lisp/xray" "\
Display BUFFER internal cells in a temporary buffer.

If BUFFER is nil, it's used (current-buffer).

That is, displays the frame, the window, the base buffer (if it's an indirect
buffer), buffer name, buffer size, minimum point, point, maximum point, the
mark, the mark active flag, file name visited (if any), file modification time,
the modified flag, the read only flag, multibyte flag, inhibit read flag,
display table, active modes, window list, buffer list, hooks related to
buffers, mark ring, overlay list and local variables.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-buffer'
\(non-nil) or `xray-help-buffer' (nil).

See `xray-customize' for customization.

\(fn &optional BUFFER)" t nil)

(autoload 'xray-window "site-lisp/xray" "\
Display WINDOW internal cells in a temporary buffer.

If WINDOW is nil, it's used (selected-window).

That is, displays the associated frame, the associated buffer, the window, the
height, the width, the edges, the buffer position, the window start, the window
end, the liveness flag, the dedicated flag, the minibuffer flag, the horizontal
scrolling amount, display table, some window related variables, the hooks, the
window least recently selected, the largest window area and the window list.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-window'
\(non-nil) or `xray-help-window' (nil).

See `xray-customize' for customization.

\(fn &optional WINDOW)" t nil)

(autoload 'xray-frame "site-lisp/xray" "\
Display FRAME internal cells in a temporary buffer.

If FRAME is nil, it's used (selected-frame).

That is, displays the frame, frame height, frame width, pixel frame height,
pixel frame width, pixel char height, pixel char width, liveness flag,
visibility flag, the first window on frame, the selected window, the root
window, some variables related to frame, the frame parameters, the hooks, the
frame list, the visible frame list and display list.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-frame'
\(non-nil) or `xray-help-frame' (nil).

See `xray-customize' for customization.

\(fn &optional FRAME)" t nil)

(autoload 'xray-marker "site-lisp/xray" "\
Display MARKER internal cells in a temporary buffer.

If MARKER is nil, it's used (mark t).

That is, displays the associated buffer, the position, the insertion type, the
mark, the beginning of region, the end of region, some variable related to
marker, hooks and the mark ring.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-marker'
\(non-nil) or `xray-help-marker' (nil).

See `xray-customize' for customization.

\(fn &optional MARKER)" t nil)

(autoload 'xray-overlay "site-lisp/xray" "\
Display OVERLAY internal cells in a temporary buffer.

If OVERLAY is nil, try to use the overlay on current buffer position (if any).

That is, displays the buffer associated, the start position, the end position,
the overlay list and the property list.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-overlay'
\(non-nil) or `xray-help-overlay' (nil).

See `xray-customize' for customization.

\(fn &optional OVERLAY)" t nil)

(autoload 'xray-screen "site-lisp/xray" "\
Display SCREEN capabilities in a temporary buffer.

If SCREEN is nil, use the first screen given by `x-display-list'.

That's, displays SCREEN capabilities, some variables and hooks related to
screen, and the display list.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-screen'
\(non-nil) or `xray-help-screen' (nil).

See `xray-customize' for customization.

\(fn &optional SCREEN)" t nil)

(autoload 'xray-faces "site-lisp/xray" "\
Display all defined faces.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-faces'
\(non-nil) or `xray-help-faces' (nil).

See `xray-customize' for customization.

\(fn)" t nil)

(autoload 'xray-hooks "site-lisp/xray" "\
Display all standard hooks and other defined hooks.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-hooks'
\(non-nil) or `xray-help-hooks' (nil).

See `xray-customize' for customization.

\(fn)" t nil)

(autoload 'xray-features "site-lisp/xray" "\
Display all features loaded.

It uses `xray-electric-p' to decide if it invokes `xray-ehelp-features'
\(non-nil) or `xray-help-features' (nil).

See `xray-customize' for customization.

\(fn)" t nil)

;;;***

;;;### (autoloads (yari yari-anything) "site-lisp/yari-with-buttons/yari"
;;;;;;  "site-lisp/yari-with-buttons/yari.el" (20488 45882))
;;; Generated autoloads from site-lisp/yari-with-buttons/yari.el

(autoload 'yari-anything "site-lisp/yari-with-buttons/yari" "\


\(fn &optional REHASH)" t nil)

(autoload 'yari "site-lisp/yari-with-buttons/yari" "\
Look up Ruby documentation.

\(fn &optional RI-TOPIC REHASH)" t nil)

;;;***

;;;### (autoloads (yas/minor-mode yas/snippet-dirs) "site-lisp/yasnippet/yasnippet"
;;;;;;  "site-lisp/yasnippet/yasnippet.el" (20488 45889))
;;; Generated autoloads from site-lisp/yasnippet/yasnippet.el

(defvar yas/snippet-dirs (list "~/.emacs.d/snippets" (concat (file-name-directory load-file-name) "snippets")) "\
Directory or list of snippet dirs for each major mode.

The directory where user-created snippets are to be stored. Can
also be a list of directories. In that case, when used for
bulk (re)loading of snippets (at startup or via
`yas/reload-all'), directories appearing earlier in the list
shadow other dir's snippets. Also, the first directory is taken
as the default for storing the user's new snippets.")

(custom-autoload 'yas/snippet-dirs "site-lisp/yasnippet/yasnippet" nil)

(autoload 'yas/minor-mode "site-lisp/yasnippet/yasnippet" "\
Toggle YASnippet mode.

When YASnippet mode is enabled, the `tas/trigger-key' key expands
snippets of code depending on the mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

You can customize the key through `yas/trigger-key'.

Key bindings:
\\{yas/minor-mode-map}

\(fn &optional ARG)" t nil)

;;;***

;;;### (autoloads (zencoding-preview zencoding-expand-yas zencoding-mode
;;;;;;  zencoding-expand-line) "site-lisp/zencoding-mode/zencoding-mode"
;;;;;;  "site-lisp/zencoding-mode/zencoding-mode.el" (20488 45890))
;;; Generated autoloads from site-lisp/zencoding-mode/zencoding-mode.el

(autoload 'zencoding-expand-line "site-lisp/zencoding-mode/zencoding-mode" "\
Replace the current line's zencode expression with the corresponding expansion.
If prefix ARG is given or region is visible call `zencoding-preview' to start an
interactive preview.

Otherwise expand line directly.

For more information see `zencoding-mode'.

\(fn ARG)" t nil)

(autoload 'zencoding-mode "site-lisp/zencoding-mode/zencoding-mode" "\
Minor mode for writing HTML and CSS markup.
With zen coding for HTML and CSS you can write a line like

  ul#name>li.item*2

and have it expanded to

  <ul id=\"name\">
    <li class=\"item\"></li>
    <li class=\"item\"></li>
  </ul>

This minor mode defines keys for quick access:

\\{zencoding-mode-keymap}

Home page URL `http://www.emacswiki.org/emacs/ZenCoding'.

See also `zencoding-expand-line'.

\(fn &optional ARG)" t nil)

(autoload 'zencoding-expand-yas "site-lisp/zencoding-mode/zencoding-mode" "\


\(fn)" t nil)

(autoload 'zencoding-preview "site-lisp/zencoding-mode/zencoding-mode" "\
Expand zencode between BEG and END interactively.
This will show a preview of the expanded zen code and you can
accept it or skip it.

\(fn BEG END)" t nil)

;;;***

;;;### (autoloads nil nil ("lib/apel/apel-ver.el" "lib/apel/atype.el"
;;;;;;  "lib/apel/broken.el" "lib/apel/calist.el" "lib/apel/emu-mule.el"
;;;;;;  "lib/apel/emu.el" "lib/apel/file-detect.el" "lib/apel/filename.el"
;;;;;;  "lib/apel/install.el" "lib/apel/inv-18.el" "lib/apel/inv-19.el"
;;;;;;  "lib/apel/inv-23.el" "lib/apel/inv-xemacs.el" "lib/apel/invisible.el"
;;;;;;  "lib/apel/localhook.el" "lib/apel/mcharset.el" "lib/apel/mcs-20.el"
;;;;;;  "lib/apel/mcs-e20.el" "lib/apel/mcs-ltn1.el" "lib/apel/mcs-nemacs.el"
;;;;;;  "lib/apel/mcs-om.el" "lib/apel/mcs-xm.el" "lib/apel/mcs-xmu.el"
;;;;;;  "lib/apel/mule-caesar.el" "lib/apel/pccl-20.el" "lib/apel/pccl-om.el"
;;;;;;  "lib/apel/pccl.el" "lib/apel/pces-20.el" "lib/apel/pces-e20.el"
;;;;;;  "lib/apel/pces-e20_2.el" "lib/apel/pces-nemacs.el" "lib/apel/pces-om.el"
;;;;;;  "lib/apel/pces-raw.el" "lib/apel/pces-xfc.el" "lib/apel/pces-xm.el"
;;;;;;  "lib/apel/pces.el" "lib/apel/pcustom.el" "lib/apel/poe-18.el"
;;;;;;  "lib/apel/poe-xemacs.el" "lib/apel/poe.el" "lib/apel/poem-e20.el"
;;;;;;  "lib/apel/poem-e20_2.el" "lib/apel/poem-e20_3.el" "lib/apel/poem-ltn1.el"
;;;;;;  "lib/apel/poem-nemacs.el" "lib/apel/poem-om.el" "lib/apel/poem-xm.el"
;;;;;;  "lib/apel/poem.el" "lib/apel/product.el" "lib/apel/pym.el"
;;;;;;  "lib/apel/static.el" "lib/apel/timezone.el" "lib/apel/tinycustom.el"
;;;;;;  "lib/apel/tinyrich.el" "lib/emacs-ctable/ctable.el" "lib/emacs-ctable/test-ctable.el"
;;;;;;  "lib/emacs-deferred/concurrent-sample.el" "lib/emacs-deferred/concurrent.el"
;;;;;;  "lib/emacs-deferred/deferred-samples.el" "lib/emacs-deferred/deferred.el"
;;;;;;  "lib/emacs-deferred/test-concurrent.el" "lib/emacs-deferred/test-deferred.el"
;;;;;;  "lib/emacs-epc/epc.el" "lib/emacs-epc/epcs.el" "lib/emacs-epc/test-epc.el"
;;;;;;  "lib/fuzzy-el/fuzzy.el" "lib/gh-el/gh-pkg.el" "lib/gh-el/gh.el"
;;;;;;  "lib/logito/logito.el" "lib/pcache/pcache-tests.el" "lib/pcache/pcache.el"
;;;;;;  "lib/popup-el/popup-test.el" "lib/popup-el/popup.el" "lib/xml-rpc.el"
;;;;;;  "lib/xml-rpc.el" "lisp/bind-key/bind-key.el" "lisp/browse-apropos-url.el"
;;;;;;  "lisp/browse-apropos-url.el" "lisp/chess/chess-ai.el" "lisp/chess/chess-algebraic.el"
;;;;;;  "lisp/chess/chess-announce.el" "lisp/chess/chess-autosave.el"
;;;;;;  "lisp/chess/chess-chat.el" "lisp/chess/chess-clock.el" "lisp/chess/chess-common.el"
;;;;;;  "lisp/chess/chess-crafty.el" "lisp/chess/chess-database.el"
;;;;;;  "lisp/chess/chess-display.el" "lisp/chess/chess-eco.el" "lisp/chess/chess-engine.el"
;;;;;;  "lisp/chess/chess-epd.el" "lisp/chess/chess-fen.el" "lisp/chess/chess-file.el"
;;;;;;  "lisp/chess/chess-game.el" "lisp/chess/chess-german.el" "lisp/chess/chess-gnuchess.el"
;;;;;;  "lisp/chess/chess-ics1.el" "lisp/chess/chess-ics2.el" "lisp/chess/chess-images.el"
;;;;;;  "lisp/chess/chess-input.el" "lisp/chess/chess-irc.el" "lisp/chess/chess-kibitz.el"
;;;;;;  "lisp/chess/chess-log.el" "lisp/chess/chess-maint.el" "lisp/chess/chess-message.el"
;;;;;;  "lisp/chess/chess-module.el" "lisp/chess/chess-network.el"
;;;;;;  "lisp/chess/chess-none.el" "lisp/chess/chess-phalanx.el"
;;;;;;  "lisp/chess/chess-plain.el" "lisp/chess/chess-ply.el" "lisp/chess/chess-pos.el"
;;;;;;  "lisp/chess/chess-scid.el" "lisp/chess/chess-sjeng.el" "lisp/chess/chess-sound.el"
;;;;;;  "lisp/chess/chess-test.el" "lisp/chess/chess-transport.el"
;;;;;;  "lisp/chess/chess-ucb.el" "lisp/chess/chess-var.el" "lisp/ediff-keep.el"
;;;;;;  "lisp/ediff-keep.el" "lisp/emacs-async/async-file.el" "lisp/emacs-async/async-test.el"
;;;;;;  "lisp/emacs-async/dired-async.el" "lisp/emacs-async/helm-async.el"
;;;;;;  "lisp/emacs-async/smtpmail-async.el" "lisp/erc-alert.el"
;;;;;;  "lisp/erc-alert.el" "lisp/erc-patch.el" "lisp/erc-patch.el"
;;;;;;  "lisp/erc-yank/erc-yank.el" "lisp/fetchmail-ctl.el" "lisp/fetchmail-ctl.el"
;;;;;;  "lisp/helm-commands.el" "lisp/helm-commands.el" "lisp/initsplit/initsplit-test.el"
;;;;;;  "lisp/initsplit/initsplit.el" "lisp/lzw.el" "lisp/lzw.el"
;;;;;;  "lisp/misc.el" "lisp/misc.el" "lisp/my-gnus-score.el" "lisp/my-gnus-score.el"
;;;;;;  "lisp/my-one-key.el" "lisp/my-one-key.el" "lisp/offlineimap-ctl.el"
;;;;;;  "lisp/offlineimap-ctl.el" "lisp/org-debbugs.el" "lisp/org-debbugs.el"
;;;;;;  "lisp/org-devonthink.el" "lisp/org-devonthink.el" "lisp/paredit-ext.el"
;;;;;;  "lisp/paredit-ext.el" "lisp/persistent-scratch.el" "lisp/persistent-scratch.el"
;;;;;;  "lisp/planner/planner-authz.el" "lisp/planner/planner-calendar.el"
;;;;;;  "lisp/planner/planner-experimental.el" "lisp/planner/planner-ical.el"
;;;;;;  "lisp/planner/planner-publish.el" "lisp/planner/planner-zoom.el"
;;;;;;  "lisp/rgr-web.el" "lisp/rgr-web.el" "lisp/todochiku.el" "lisp/todochiku.el"
;;;;;;  "lisp/use-package/bind-key.el" "lisp/use-package/use-package.el"
;;;;;;  "site-lisp/archive-region.el" "site-lisp/archive-region.el"
;;;;;;  "site-lisp/auctex/lpath.el" "site-lisp/auctex/tex-buf.el"
;;;;;;  "site-lisp/auctex/tex-fptex.el" "site-lisp/auctex/tex-mik.el"
;;;;;;  "site-lisp/auctex/tex-style.el" "site-lisp/auctex/tex-wizard.el"
;;;;;;  "site-lisp/auto-complete/auto-complete-config.el" "site-lisp/auto-complete/auto-complete-pkg.el"
;;;;;;  "site-lisp/auto-complete/auto-complete.el" "site-lisp/auto-overlays/auto-overlay-common.el"
;;;;;;  "site-lisp/auto-overlays/auto-overlay-flat.el" "site-lisp/auto-overlays/auto-overlay-line.el"
;;;;;;  "site-lisp/auto-overlays/auto-overlay-nested.el" "site-lisp/auto-overlays/auto-overlay-self.el"
;;;;;;  "site-lisp/auto-overlays/auto-overlay-word.el" "site-lisp/auto-overlays/auto-overlays-compat.el"
;;;;;;  "site-lisp/auto-overlays/auto-overlays.el" "site-lisp/autopair/autopair-tests.el"
;;;;;;  "site-lisp/autopair/autopair.el" "site-lisp/backup-each-save.el"
;;;;;;  "site-lisp/backup-each-save.el" "site-lisp/bbdb-vcard-export.el"
;;;;;;  "site-lisp/bbdb-vcard-export.el" "site-lisp/bbdb-vcard-import.el"
;;;;;;  "site-lisp/bbdb-vcard-import.el" "site-lisp/bookmark-plus/bookmark+-chg.el"
;;;;;;  "site-lisp/bookmark-plus/bookmark+-doc.el" "site-lisp/bookmark-plus/bookmark+-key.el"
;;;;;;  "site-lisp/cmake-mode.el" "site-lisp/cmake-mode.el" "site-lisp/color-moccur.el"
;;;;;;  "site-lisp/color-moccur.el" "site-lisp/csv-mode.el" "site-lisp/csv-mode.el"
;;;;;;  "site-lisp/debbugs/debbugs-autoloads.el" "site-lisp/debbugs/debbugs-pkg.el"
;;;;;;  "site-lisp/debbugs/debbugs.el" "site-lisp/dedicated.el" "site-lisp/dedicated.el"
;;;;;;  "site-lisp/dircmp.el" "site-lisp/dircmp.el" "site-lisp/dired-sort-map.el"
;;;;;;  "site-lisp/dired-sort-map.el" "site-lisp/drupal-mode/drupal-drush-commands.el"
;;;;;;  "site-lisp/drupal-mode/drupal-mode.el" "site-lisp/dvc/dvc-load.el"
;;;;;;  "site-lisp/edit-env.el" "site-lisp/edit-env.el" "site-lisp/edit-server.el"
;;;;;;  "site-lisp/edit-server.el" "site-lisp/el-get/el-get-autoloads.el"
;;;;;;  "site-lisp/el-get/el-get-build.el" "site-lisp/el-get/el-get-byte-compile.el"
;;;;;;  "site-lisp/el-get/el-get-core.el" "site-lisp/el-get/el-get-custom.el"
;;;;;;  "site-lisp/el-get/el-get-dependencies.el" "site-lisp/el-get/el-get-install.el"
;;;;;;  "site-lisp/el-get/el-get-methods.el" "site-lisp/el-get/el-get-notify.el"
;;;;;;  "site-lisp/el-get/el-get-recipes.el" "site-lisp/el-get/el-get-status.el"
;;;;;;  "site-lisp/el-mock/el-mock.el" "site-lisp/eldoc-extension.el"
;;;;;;  "site-lisp/eldoc-extension.el" "site-lisp/elnode/build.el"
;;;;;;  "site-lisp/elnode/elnode-tests.el" "site-lisp/elnode/elnodedemo.el"
;;;;;;  "site-lisp/elnode/insideout.el" "site-lisp/elnode/packagedir.el"
;;;;;;  "site-lisp/emacs-edbi/e2wm-edbi.el" "site-lisp/emacs-edbi/edbi-demo.el"
;;;;;;  "site-lisp/emacs-edbi/edbi-pkg.el" "site-lisp/emacs-edbi/edbi.el"
;;;;;;  "site-lisp/emacs-w3m/mew-w3m.el" "site-lisp/emacs-w3m/w3m-bug.el"
;;;;;;  "site-lisp/emacs-w3m/w3m-ccl.el" "site-lisp/emacs-w3m/w3m-ems.el"
;;;;;;  "site-lisp/emacs-w3m/w3m-favicon.el" "site-lisp/emacs-w3m/w3m-hist.el"
;;;;;;  "site-lisp/emacs-w3m/w3m-image.el" "site-lisp/emacs-w3m/w3m-mail.el"
;;;;;;  "site-lisp/emacs-w3m/w3m-proc.el" "site-lisp/emacs-w3m/w3m-rss.el"
;;;;;;  "site-lisp/emacs-w3m/w3m-tabmenu.el" "site-lisp/emacs-w3m/w3m-ucs.el"
;;;;;;  "site-lisp/emacs-w3m/w3m-util.el" "site-lisp/emacs-w3m/w3m-xmas.el"
;;;;;;  "site-lisp/emacs-w3m/w3mhack.el" "site-lisp/erc-highlight-nicknames.el"
;;;;;;  "site-lisp/erc-highlight-nicknames.el" "site-lisp/fdb.el"
;;;;;;  "site-lisp/fdb.el" "site-lisp/gnus-hardsort.el" "site-lisp/gnus-hardsort.el"
;;;;;;  "site-lisp/grep-ed.el" "site-lisp/grep-ed.el" "site-lisp/haskell-mode/haskell-font-lock.el"
;;;;;;  "site-lisp/haskell-mode/haskell-ghci.el" "site-lisp/haskell-mode/haskell-hugs.el"
;;;;;;  "site-lisp/haskell-mode/haskell-simple-indent.el" "site-lisp/haskell-mode/haskell-site-file.el"
;;;;;;  "site-lisp/helm-gtags.el" "site-lisp/helm-gtags.el" "site-lisp/helm/helm-pkg.el"
;;;;;;  "site-lisp/helm/helm-plugin.el" "site-lisp/hide-search.el"
;;;;;;  "site-lisp/hide-search.el" "site-lisp/highlight-cl.el" "site-lisp/highlight-cl.el"
;;;;;;  "site-lisp/hs-lint.el" "site-lisp/hs-lint.el" "site-lisp/identica-mode/bbdb-identica.el"
;;;;;;  "site-lisp/identica-mode/identica-friends.el" "site-lisp/ido-hacks/ido-hacks.el"
;;;;;;  "site-lisp/indirect.el" "site-lisp/indirect.el" "site-lisp/ipa-el/ipa.el"
;;;;;;  "site-lisp/irfc.el" "site-lisp/irfc.el" "site-lisp/llvm-mode.el"
;;;;;;  "site-lisp/llvm-mode.el" "site-lisp/lusty-emacs/lusty-ido.el"
;;;;;;  "site-lisp/magit/magit-bisect.el" "site-lisp/magit/magit-key-mode.el"
;;;;;;  "site-lisp/magit/magit-wip.el" "site-lisp/melpa/missing.el"
;;;;;;  "site-lisp/melpa/package-build.el" "site-lisp/message-x.el"
;;;;;;  "site-lisp/message-x.el" "site-lisp/moccur-edit.el" "site-lisp/moccur-edit.el"
;;;;;;  "site-lisp/mudel.el" "site-lisp/mudel.el" "site-lisp/narrow-stack.el"
;;;;;;  "site-lisp/narrow-stack.el" "site-lisp/one-key.el" "site-lisp/one-key.el"
;;;;;;  "site-lisp/org-jira/jira-users.el" "site-lisp/org-jira/jiralib.el"
;;;;;;  "site-lisp/org-jira/soap-client.el" "site-lisp/org-jira/soap-inspect.el"
;;;;;;  "site-lisp/org-magit/org-magit.el" "site-lisp/parenface.el"
;;;;;;  "site-lisp/parenface.el" "site-lisp/per-window-point.el"
;;;;;;  "site-lisp/per-window-point.el" "site-lisp/phpplus-mode/php+-mode-unittest-setup.el"
;;;;;;  "site-lisp/phpplus-mode/php+-mode.el" "site-lisp/phpplus-mode/php+-zf.el"
;;;;;;  "site-lisp/phpplus-mode/php-completion.el" "site-lisp/phpplus-mode/php-const.el"
;;;;;;  "site-lisp/phpplus-mode/php-doc.el" "site-lisp/phpplus-mode/php-edit.el"
;;;;;;  "site-lisp/phpplus-mode/php-font-lock.el" "site-lisp/phpplus-mode/php-format.el"
;;;;;;  "site-lisp/phpplus-mode/php-funcs.el" "site-lisp/phpplus-mode/php-help.el"
;;;;;;  "site-lisp/phpplus-mode/php-lineup.el" "site-lisp/phpplus-mode/php-parse.el"
;;;;;;  "site-lisp/phpplus-mode/php-project.el" "site-lisp/phpplus-mode/php-refactor.el"
;;;;;;  "site-lisp/phpplus-mode/php-string.el" "site-lisp/phpplus-mode/php-structure.el"
;;;;;;  "site-lisp/phpplus-mode/php-tags.el" "site-lisp/phpplus-mode/php-test.el"
;;;;;;  "site-lisp/phpplus-mode/php-utils.el" "site-lisp/phpplus-mode/string-utils.el"
;;;;;;  "site-lisp/po-mode.el" "site-lisp/po-mode.el" "site-lisp/python-mode/pymacs.el"
;;;;;;  "site-lisp/python-mode/python-mode.el" "site-lisp/redshank.el"
;;;;;;  "site-lisp/redshank.el" "site-lisp/repeat-insert.el" "site-lisp/repeat-insert.el"
;;;;;;  "site-lisp/ruby-mode/inf-ruby.el" "site-lisp/ruby-mode/rdoc-mode.el"
;;;;;;  "site-lisp/ruby-mode/ruby-electric.el" "site-lisp/ruby-mode/ruby-style.el"
;;;;;;  "site-lisp/runner.el" "site-lisp/runner.el" "site-lisp/selectkey.el"
;;;;;;  "site-lisp/selectkey.el" "site-lisp/slime/hyperspec.el" "site-lisp/slime/slime-autoloads.el"
;;;;;;  "site-lisp/slime/slime.el" "site-lisp/sunrise-commander/sunrise-x-checkpoints.el"
;;;;;;  "site-lisp/sunrise-commander/sunrise-x-old-checkpoints.el"
;;;;;;  "site-lisp/swank-js/slime-js.el" "site-lisp/tablegen-mode.el"
;;;;;;  "site-lisp/tablegen-mode.el" "site-lisp/tail.el" "site-lisp/tail.el"
;;;;;;  "site-lisp/todochiku/todochiku.el" "site-lisp/transpar.el"
;;;;;;  "site-lisp/transpar.el" "site-lisp/unify-buffer.el" "site-lisp/unify-buffer.el"
;;;;;;  "site-lisp/vkill.el" "site-lisp/vkill.el" "site-lisp/volatile-highlights.el"
;;;;;;  "site-lisp/volatile-highlights.el" "site-lisp/wcount.el"
;;;;;;  "site-lisp/wcount.el" "site-lisp/wgrep.el" "site-lisp/wgrep.el"
;;;;;;  "site-lisp/workgroups/workgroups.el" "site-lisp/yaoddmuse.el"
;;;;;;  "site-lisp/yaoddmuse.el" "site-lisp/yasnippet/dropdown-list.el"
;;;;;;  "site-lisp/yasnippet/yasnippet-debug.el") (20504 19413 810132))

;;;***

;;;### (autoloads (outlineify-sticky allout-mode allout-mode-p allout-auto-activation
;;;;;;  allout-setup allout-auto-activation-helper) "override/allout"
;;;;;;  "override/allout.el" (20488 45440))
;;; Generated autoloads from override/allout.el

(autoload 'allout-auto-activation-helper "override/allout" "\
Institute `allout-auto-activation'.

Intended to be used as the `allout-auto-activation' :set function.

\(fn VAR VALUE)" nil nil)

(autoload 'allout-setup "override/allout" "\
Do fundamental emacs session for allout auto-activation.

Establishes allout processing as part of visiting a file if
`allout-auto-activation' is non-nil, or removes it otherwise.

The proper way to use this is through customizing the setting of
`allout-auto-activation'.

\(fn)" nil nil)

(defvar allout-auto-activation nil "\
Configure allout outline mode auto-activation.

Control whether and how allout outline mode is automatically
activated when files are visited with non-nil buffer-specific
file variable `allout-layout'.

When allout-auto-activation is \"On\" (t), allout mode is
activated in buffers with non-nil `allout-layout', and the
specified layout is applied.

With value \"ask\", auto-mode-activation is enabled, and endorsement for
performing auto-layout is asked of the user each time.

With value \"activate\", only auto-mode-activation is enabled.
Auto-layout is not.

With value nil, inhibit any automatic allout-mode activation.")

(custom-autoload 'allout-auto-activation "override/allout" nil)

(put 'allout-use-hanging-indents 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-reindent-bodies 'safe-local-variable (lambda (x) (memq x '(nil t text force))))

(put 'allout-show-bodies 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-header-prefix 'safe-local-variable 'stringp)

(put 'allout-primary-bullet 'safe-local-variable 'stringp)

(put 'allout-plain-bullets-string 'safe-local-variable 'stringp)

(put 'allout-distinctive-bullets-string 'safe-local-variable 'stringp)

(put 'allout-use-mode-specific-leader 'safe-local-variable (lambda (x) (or (memq x '(t nil allout-mode-leaders comment-start)) (stringp x))))

(put 'allout-old-style-prefixes 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-stylish-prefixes 'safe-local-variable (if (fboundp 'booleanp) 'booleanp (lambda (x) (member x '(t nil)))))

(put 'allout-numbered-bullet 'safe-local-variable (if (fboundp 'string-or-null-p) 'string-or-null-p (lambda (x) (or (stringp x) (null x)))))

(put 'allout-file-xref-bullet 'safe-local-variable (if (fboundp 'string-or-null-p) 'string-or-null-p (lambda (x) (or (stringp x) (null x)))))

(put 'allout-presentation-padding 'safe-local-variable 'integerp)

(put 'allout-layout 'safe-local-variable (lambda (x) (or (numberp x) (listp x) (memq x '(: * + -)))))

(put 'allout-passphrase-verifier-string 'safe-local-variable 'stringp)

(put 'allout-passphrase-hint-string 'safe-local-variable 'stringp)

(autoload 'allout-mode-p "override/allout" "\
Return t if `allout-mode' is active in current buffer.

\(fn)" nil (quote macro))

(autoload 'allout-mode "override/allout" "\
Toggle minor mode for controlling exposure and editing of text outlines.
\\<allout-mode-map-value>

Allout outline mode always runs as a minor mode.

Allout outline mode provides extensive outline oriented
formatting and manipulation.  It enables structural editing of
outlines, as well as navigation and exposure.  It also is
specifically aimed at accommodating syntax-sensitive text like
programming languages.  (For example, see the allout code itself,
which is organized as an allout outline.)

In addition to typical outline navigation and exposure, allout includes:

 - topic-oriented authoring, including keystroke-based topic creation,
   repositioning, promotion/demotion, cut, and paste
 - incremental search with dynamic exposure and reconcealment of hidden text
 - adjustable format, so programming code can be developed in outline-structure
 - easy topic encryption and decryption, symmetric or key-pair
 - \"Hot-spot\" operation, for single-keystroke maneuvering and exposure control
 - integral outline layout, for automatic initial exposure when visiting a file
 - independent extensibility, using comprehensive exposure and authoring hooks

and many other features.

Below is a description of the key bindings, and then description
of special `allout-mode' features and terminology.  See also the
outline menubar additions for quick reference to many of the
features.  Customize `allout-auto-activation' to prepare your
emacs session for automatic activation of `allout-mode'.

The bindings are those listed in `allout-prefixed-keybindings'
and `allout-unprefixed-keybindings'.  We recommend customizing
`allout-command-prefix' to use just `\\C-c' as the command
prefix, if the allout bindings don't conflict with any personal
bindings you have on \\C-c.  In any case, outline structure
navigation and authoring is simplified by positioning the cursor
on an item's bullet character, the \"hot-spot\" -- then you can
invoke allout commands with just the un-prefixed,
un-control-shifted command letters.  This is described further in
the HOT-SPOT Operation section.

        Exposure Control:
        ----------------
\\[allout-hide-current-subtree]   `allout-hide-current-subtree'
\\[allout-show-children] `allout-show-children'
\\[allout-show-current-subtree] `allout-show-current-subtree'
\\[allout-show-current-entry] `allout-show-current-entry'
\\[allout-show-all]   `allout-show-all'

        Navigation:
        ----------
\\[allout-next-visible-heading] `allout-next-visible-heading'
\\[allout-previous-visible-heading] `allout-previous-visible-heading'
\\[allout-up-current-level] `allout-up-current-level'
\\[allout-forward-current-level] `allout-forward-current-level'
\\[allout-backward-current-level] `allout-backward-current-level'
\\[allout-end-of-entry] `allout-end-of-entry'
\\[allout-beginning-of-current-entry] `allout-beginning-of-current-entry' (alternately, goes to hot-spot)
\\[allout-beginning-of-line]  `allout-beginning-of-line' -- like regular beginning-of-line, but
     if immediately repeated cycles to the beginning of the current item
     and then to the hot-spot (if `allout-beginning-of-line-cycles' is set).


        Topic Header Production:
        -----------------------
\\[allout-open-sibtopic] `allout-open-sibtopic' Create a new sibling after current topic.
\\[allout-open-subtopic]   `allout-open-subtopic' ... an offspring of current topic.
\\[allout-open-supertopic] `allout-open-supertopic' ... a sibling of the current topic's parent.

        Topic Level and Prefix Adjustment:
        ---------------------------------
\\[allout-shift-in] `allout-shift-in'   Shift current topic and all offspring deeper
\\[allout-shift-out] `allout-shift-out' ... less deep
\\[allout-rebullet-current-heading] `allout-rebullet-current-heading' Prompt for alternate bullet for
            current topic
\\[allout-rebullet-topic] `allout-rebullet-topic'   Reconcile bullets of topic and
            its' offspring -- distinctive bullets are not changed, others
            are alternated according to nesting depth.
\\[allout-number-siblings] `allout-number-siblings'  Number bullets of topic and siblings --
           the offspring are not affected.
           With repeat count, revoke numbering.

        Topic-oriented Killing and Yanking:
        ----------------------------------
\\[allout-kill-topic] `allout-kill-topic'   Kill current topic, including offspring.
\\[allout-copy-topic-as-kill] `allout-copy-topic-as-kill' Copy current topic, including offspring.
\\[allout-kill-line]     `allout-kill-line'    kill-line, attending to outline structure.
\\[allout-copy-line-as-kill]     `allout-copy-line-as-kill' Copy line but don't delete it.
\\[allout-yank] `allout-yank'        Yank, adjusting depth of yanked topic to
                             depth of heading if yanking into bare topic
                             heading (ie, prefix sans text).
\\[allout-yank-pop]     `allout-yank-pop'       Is to allout-yank as yank-pop is to yank

        Topic-oriented Encryption:
        -------------------------
\\[allout-toggle-current-subtree-encryption] `allout-toggle-current-subtree-encryption'
          Encrypt/Decrypt topic content

        Misc commands:
        -------------
M-x outlineify-sticky       Activate outline mode for current buffer,
                            and establish a default file-var setting
                            for `allout-layout'.
\\[allout-mark-topic]       `allout-mark-topic'
\\[allout-copy-exposed-to-buffer] `allout-copy-exposed-to-buffer'
                            Duplicate outline, sans concealed text, to
                            buffer with name derived from derived from that
                            of current buffer -- \"*BUFFERNAME exposed*\".
\\[allout-flatten-exposed-to-buffer] `allout-flatten-exposed-to-buffer'
                            Like above 'copy-exposed', but convert topic
                            prefixes to section.subsection... numeric
                            format.
\\[customize-variable] allout-auto-activation
                            Prepare Emacs session for allout outline mode
                            auto-activation.

                  Topic Encryption

Outline mode supports gpg encryption of topics, with support for
symmetric and key-pair modes, and auto-encryption of topics
pending encryption on save.

Topics pending encryption are, by default, automatically
encrypted during file saves, including checkpoint saves, to avoid
exposing the plain text of encrypted topics in the file system.
If the content of the topic containing the cursor was encrypted
for a save, it is automatically decrypted for continued editing.

NOTE: A few GnuPG v2 versions improperly preserve incorrect
symmetric decryption keys, preventing entry of the correct key on
subsequent decryption attempts until the cache times-out.  That
can take several minutes.  (Decryption of other entries is not
affected.)  Upgrade your EasyPG version, if you can, and you can
deliberately clear your gpg-agent's cache by sending it a '-HUP'
signal.

See `allout-toggle-current-subtree-encryption' function docstring
and `allout-encrypt-unencrypted-on-saves' customization variable
for details.

                 HOT-SPOT Operation

Hot-spot operation provides a means for easy, single-keystroke outline
navigation and exposure control.

When the text cursor is positioned directly on the bullet character of
a topic, regular characters (a to z) invoke the commands of the
corresponding allout-mode keymap control chars.  For example, \"f\"
would invoke the command typically bound to \"C-c<space>C-f\"
\(\\[allout-forward-current-level] `allout-forward-current-level').

Thus, by positioning the cursor on a topic bullet, you can
execute the outline navigation and manipulation commands with a
single keystroke.  Regular navigation keys (eg, \\[forward-char], \\[next-line]) don't get
this special translation, so you can use them to get out of the
hot-spot and back to normal editing operation.

In allout-mode, the normal beginning-of-line command (\\[allout-beginning-of-line]) is
replaced with one that makes it easy to get to the hot-spot.  If you
repeat it immediately it cycles (if `allout-beginning-of-line-cycles'
is set) to the beginning of the item and then, if you hit it again
immediately, to the hot-spot.  Similarly, `allout-beginning-of-current-entry'
\(\\[allout-beginning-of-current-entry]) moves to the hot-spot when the cursor is already located
at the beginning of the current entry.

                             Extending Allout

Allout exposure and authoring activites all have associated
hooks, by which independent code can cooperate with allout
without changes to the allout core.  Here are key ones:

`allout-mode-hook'
`allout-mode-deactivate-hook' (deprecated)
`allout-mode-off-hook'
`allout-exposure-change-hook'
`allout-structure-added-hook'
`allout-structure-deleted-hook'
`allout-structure-shifted-hook'
`allout-after-copy-or-kill-hook'
`allout-post-undo-hook'

                            Terminology

Topic hierarchy constituents -- TOPICS and SUBTOPICS:

ITEM:   A unitary outline element, including the HEADER and ENTRY text.
TOPIC:  An ITEM and any ITEMs contained within it, ie having greater DEPTH
        and with no intervening items of lower DEPTH than the container.
CURRENT ITEM:
        The visible ITEM most immediately containing the cursor.
DEPTH:  The degree of nesting of an ITEM; it increases with containment.
        The DEPTH is determined by the HEADER PREFIX.  The DEPTH is also
        called the:
LEVEL:  The same as DEPTH.

ANCESTORS:
        Those ITEMs whose TOPICs contain an ITEM.
PARENT: An ITEM's immediate ANCESTOR.  It has a DEPTH one less than that
        of the ITEM.
OFFSPRING:
        The ITEMs contained within an ITEM's TOPIC.
SUBTOPIC:
        An OFFSPRING of its ANCESTOR TOPICs.
CHILD:
        An immediate SUBTOPIC of its PARENT.
SIBLINGS:
        TOPICs having the same PARENT and DEPTH.

Topic text constituents:

HEADER: The first line of an ITEM, include the ITEM PREFIX and HEADER
        text.
ENTRY:  The text content of an ITEM, before any OFFSPRING, but including
        the HEADER text and distinct from the ITEM PREFIX.
BODY:   Same as ENTRY.
PREFIX: The leading text of an ITEM which distinguishes it from normal
        ENTRY text.  Allout recognizes the outline structure according
        to the strict PREFIX format.  It consists of a PREFIX-LEAD string,
        PREFIX-PADDING, and a BULLET.  The BULLET might be followed by a
        number, indicating the ordinal number of the topic among its
        siblings, or an asterisk indicating encryption, plus an optional
        space.  After that is the ITEM HEADER text, which is not part of
        the PREFIX.

        The relative length of the PREFIX determines the nesting DEPTH
        of the ITEM.
PREFIX-LEAD:
        The string at the beginning of a HEADER PREFIX, by default a `.'.
        It can be customized by changing the setting of
        `allout-header-prefix' and then reinitializing `allout-mode'.

        When the PREFIX-LEAD is set to the comment-string of a
        programming language, outline structuring can be embedded in
        program code without interfering with processing of the text
        (by emacs or the language processor) as program code.  This
        setting happens automatically when allout mode is used in
        programming-mode buffers.  See `allout-use-mode-specific-leader'
        docstring for more detail.
PREFIX-PADDING:
        Spaces or asterisks which separate the PREFIX-LEAD and the
        bullet, determining the ITEM's DEPTH.
BULLET: A character at the end of the ITEM PREFIX, it must be one of
        the characters listed on `allout-plain-bullets-string' or
        `allout-distinctive-bullets-string'.  When creating a TOPIC,
        plain BULLETs are by default used, according to the DEPTH of the
        TOPIC.  Choice among the distinctive BULLETs is offered when you
        provide a universal argugment (\\[universal-argument]) to the
        TOPIC creation command, or when explictly rebulleting a TOPIC.  The
        significance of the various distinctive bullets is purely by
        convention.  See the documentation for the above bullet strings for
        more details.
EXPOSURE:
        The state of a TOPIC which determines the on-screen visibility
        of its OFFSPRING and contained ENTRY text.
CONCEALED:
        TOPICs and ENTRY text whose EXPOSURE is inhibited.  Concealed
        text is represented by \"...\" ellipses.

        CONCEALED TOPICs are effectively collapsed within an ANCESTOR.
CLOSED: A TOPIC whose immediate OFFSPRING and body-text is CONCEALED.
OPEN:	A TOPIC that is not CLOSED, though its OFFSPRING or BODY may be.

\(fn &optional ARG)" t nil)

(defalias 'outlinify-sticky 'outlineify-sticky)

(autoload 'outlineify-sticky "override/allout" "\
Activate outline mode and establish file var so it is started subsequently.

See `allout-layout' and customization of `allout-auto-activation'
for details on preparing emacs for automatic allout activation.

\(fn &optional ARG)" t nil)

;;;***
